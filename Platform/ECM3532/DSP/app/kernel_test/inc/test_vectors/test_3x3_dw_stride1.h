#define W_IN 8 
#define H_IN 8 
#define W_OUT 8 
#define H_OUT 8
#define CH_IN 4
//#define NUM_KER 3
#define DIM_OUT 4
#define DW 1

int bias_shift = 5;
int out_shift = 8;
int act_min = 0;
int act_max = 127;

char chess_storage(YMEM) g_wt_HWC [36] = { 
-25, -56, 61, 2, -44, 52, 37, -1, -23, -43, -53, 61, 38, -11, -15, 47, -16, 3, 26, 9, -3, -7, 18, 11, 36, -43, 14, -10, 0, 0, -11, -44, 58, -24, 41, 34
};

int chess_storage(YMEM) g_bias [4] = {
32, 32, 32, 32
};

char Im_in_HWC[256] = {
-11, 12, 15, 24, 29, 28, -1, -8, 4, 32, 9, 7, -1, -17, 14, 28, 14, 19, -16, 30, -10, -7, 8, 4, 12, 0, 19, 25, 27, 18, -13, 18, -24, 2, -2, 9, -2, 15, 5, -23, -9, 11, 26, -16, 1, 13, 0, 23, 6, 28, 3, -21, -28, 24, 31, 28, -8, 25, 30, 5, -14, 25, 15, -28, 26, -16, -16, 4, -13, -14, -11, 19, 1, -13, -26, 31, 24, -3, 5, 31, -26, -2, -3, -9, 16, -25, -15, 19, 20, -1, -20, -14, -12, 27, 3, 17, -7, 0, -20, 8, 17, -4, 31, -8, -8, 27, 10, 5, -10, 19, 6, 17, -26, 19, -8, -13, -28, 30, 9, -2, 7, -22, 20, -31, 13, -7, 4, 4, -8, 21, -13, 11, -26, 12, 25, 0, 2, -18, -14, -12, -7, 27, 25, 5, -5, 28, 20, 25, 22, 30, -9, 14, 7, -30, -5, 13, 26, 5, 28, -4, -4, -32, -11, -22, 29, -29, -14, -10, -27, -2, 11, 1, -16, -2, -14, 21, 28, -24, 29, -3, 12, -4, 18, 13, -19, 12, -27, -6, -9, -3, -24, 4, 24, -17, 25, -28, 22, 17, -22, -26, -8, 6, 29, -14, 32, -20, 7, -29, 26, 28, 21, 29, -15, -30, -31, -30, -20, 17, 24, 21, 24, -26, 19, -14, 19, 6, 5, 2, 20, 15, -18, -2, 8, -15, 29, 2, -31, 22, -21, 11, 22, -10, 15, 22, 20, -7, 25, 15, -22, 23, 6, 29, -27, 7, 17, 19
};

char pExpect[256] = {
4, 2, 6, 0, 0, 1, 7, 10, 8, 0, 5, 11, 4, 0, 6, 1, 0, 1, 7, 17, 6, 0, 11, 7, 0, 0, 7, 1, 3, 0, 3, 14, 2, 3, 5, 3, 0, 5, 4, 7, 4, 9, 6, 5, 0, 0, 8, 0, 10, 14, 4, 13, 7, 0, 0, 3, 0, 3, 14, 16, 1, 7, 5, 2, 11, 3, 6, 0, 9, 3, 0, 5, 4, 0, 10, 17, 0, 0, 10, 0, 3, 0, 0, 18, 2, 0, 3, 0, 10, 0, 12, 7, 12, 8, 16, 3, 0, 2, 9, 7, 1, 4, 5, 11, 1, 0, 2, 13, 1, 5, 0, 6, 9, 0, 6, 9, 1, 0, 8, 0, 4, 0, 3, 4, 5, 15, 0, 0, 11, 7, 0, 5, 0, 4, 6, 10, 1, 11, 7, 11, 12, 2, 20, 0, 11, 0, 3, 8, 8, 12, 0, 0, 6, 0, 8, 9, 0, 7, 12, 6, 13, 5, 0, 4, 8, 8, 14, 1, 23, 0, 2, 4, 7, 6, 5, 20, 0, 5, 14, 4, 3, 3, 13, 14, 5, 0, 0, 1, 0, 8, 7, 5, 5, 0, 3, 0, 9, 6, 1, 0, 7, 6, 4, 4, 9, 10, 4, 2, 3, 0, 3, 0, 4, 4, 17, 8, 2, 11, 19, 0, 0, 0, 0, 3, 0, 0, 11, 0, 0, 10, 1, 1, 3, 3, 4, 0, 0, 0, 5, 13, 0, 18, 19, 0, 8, 0, 2, 15, 11, 19, 0, 5, 0, 0, 14, 10
};

/*
#define OUT0_SIZE	512
q7_t out0[OUT0_SIZE] = {0};

void infer(q7_t* inp0, q7_t* out0 ) { 

//q7_t* inp0 = malloc(512);
//q7_t* out0 = malloc(512);


union xbuff_in {
q7_t pbuf_0_4 [144];
} buff_in;

conv2d_opt opt0 = {.in_rows = 8, .in_cols = 8, .in_depth = 8, .num_filt = 1, 
.filt_rows = 3, .filt_cols = 3, .row_pad = 1, .col_pad = 1,
.row_stride = 1, .col_stride = 1, .bias_lshift = 5, .out_rshift = 8, 
.out_rows = 8, .out_cols = 8, .act_max = 127, .act_min = 0};

eta_ds_conv2d_q7(inp0, pbuf_0_1, pbuf_0_2, out0, buff_in.pbuf_0_4, opt0);
*/
