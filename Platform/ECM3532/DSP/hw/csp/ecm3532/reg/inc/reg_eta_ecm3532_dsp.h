/*
 * @file    reg_eta_ecm3532_dsp.h
 * @date    09/08/2019
 *
 * @brief This file contains reg_eta_ecm3532_dsp module implementations
 *
 * Copyright (C) 2019 Eta Compute, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef __REG_ETA_ECM3532_DSP_H__
#define __REG_ETA_ECM3532_DSP_H__

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include "reg.h"

//-------------------------------------------------------------------------
// This file is generated by mkregn.py v3.0.0 - DO NOT EDIT
//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
// Edit .def file and regenerate
//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
// Register Definition Data - Used to create this file - DO NOT DELETE
//-------------------------------------------------------------------------
/*
#define PDM_DSP_BASE_ADDRESS 0x00008a00
#define PDM_DSP_OFFSET(n) (n * 0x100)

PDM_DSP,RX_DATA:n, (PDM_DSP_BASE_ADDRESS + PDM_DSP_OFFSET(n) + 0x0),16,SAMPLE:16
PDM_DSP,CSR:n, (PDM_DSP_BASE_ADDRESS + PDM_DSP_OFFSET(n) + 0x4),16,SOFT_RST:1,RSVD:8,RX_CH_MODE:2,RSVD:2,SRSRDY_EDGE_TRIG:1,SWAP_RD_CHNL:1,PDM_EN:1
PDM_DSP,STATUS:n, (PDM_DSP_BASE_ADDRESS + PDM_DSP_OFFSET(n) + 0x8),16,RSVD:10,RX_CNT:3,RX_UF:1,RX_OF:1,HAS_DATA:1

#define DMA_BASE_ADDRESS 0x00008300
#define DMA_OFFSET(n) (n * 0x10)

DMA,CONFIG_SRC:n, (DMA_BASE_ADDRESS + DMA_OFFSET(n) + 0x0),16,SRC_TYPE:3,SRC_STEP:5,SRC_RELOAD_PER_BLOCK:1,SRC_FLOWCTRL:4,SRCINC:1,SRC:2:IOMEM=0x0|XMEM=0x1|YMEM=0x2
DMA,CONFIG_DST:n, (DMA_BASE_ADDRESS + DMA_OFFSET(n) + 0x1),16,DST_TYPE:3,DST_STEP:5,DST_RELOAD_PER_BLOCK:1,DST_FLOWCTRL:4,DSTINC:1,DST:2:IOMEM=0x0|XMEM=0x1|YMEM=0x2
DMA,WORDS_PER_BLOCK:n, (DMA_BASE_ADDRESS + DMA_OFFSET(n) + 0x2),16,RSVD1:8,WORDS_PER_BLOCK:8
DMA,SRC_ADDR:n, (DMA_BASE_ADDRESS + DMA_OFFSET(n) + 0x3),16,ADDRESS:16
DMA,DST_ADDR:n, (DMA_BASE_ADDRESS + DMA_OFFSET(n) + 0x4),16,ADDRESS:16
DMA,NUMBLOCKS:n, (DMA_BASE_ADDRESS + DMA_OFFSET(n) + 0x5),16,AUTO_RELOAD:1,HALF_BUFFER_INT:1,NUMBLOCKS:14
DMA,STATUS:n, (DMA_BASE_ADDRESS + DMA_OFFSET(n) + 0x6),16,RSVD2:9,CIRC_BUFF_CURR:3,RSVD1:3,HALF:1
DMA,TRIG_CONFIG:n, (DMA_BASE_ADDRESS + DMA_OFFSET(n) + 0x7),16,CIRC_BUFF_SRC_RELOAD:1,CIRC_BUFF_DST_RELOAD:1,PACK_CMD:2:NO_PACK=0x0|ZERO_PAD=0x1|SIGN_EXT=0x2|REPACK=0x3,RSVD2:1,CIRC_BUFF_TRIG:3,RSVD1:2,DST_BOTH_EDGES:1,DST_EDGE:1,DST_POL:1,SRC_BOTH_EDGES:1,SRC_EDGE:1,SRC_POL:1
DMA,TIMEOUT:n, (DMA_BASE_ADDRESS + DMA_OFFSET(n) + 0x8),16,RSVD1:6,TIMEOUT:10
DMA,BUSY:n, (DMA_BASE_ADDRESS + DMA_OFFSET(n) + 0x9),16,RSVD1:15,BUSY:1
DMA,INT_LEVEL:n, (DMA_BASE_ADDRESS + DMA_OFFSET(n) + 0xa),16,INT_LEVEL:16

#define MBOX_DSP_BASE_ADDRESS 0x00008200

MBOX_DSP,DSP2M3_MBOX_LOWER, (MBOX_DSP_BASE_ADDRESS + 0x0),16,DATA:16
MBOX_DSP,DSP2M3_MBOX_LOW_SIGNEXT, (MBOX_DSP_BASE_ADDRESS + 0x1),16,DATA:16
MBOX_DSP,DSP2M32_MBOX_LOW_UPPER, (MBOX_DSP_BASE_ADDRESS + 0x2),16,DATA:16
MBOX_DSP,DSP2M32_MBOX_STATUS, (MBOX_DSP_BASE_ADDRESS + 0x3),16,RSVD:15,BUSY:1
MBOX_DSP,M32DSP_MBOX_LOWER, (MBOX_DSP_BASE_ADDRESS + 0x4),16,DATA:16
MBOX_DSP,M32DSP_MBOX_LOW_UPPER, (MBOX_DSP_BASE_ADDRESS + 0x5),16,DATA:16
MBOX_DSP,M32DSP_MBOX_EXT1, (MBOX_DSP_BASE_ADDRESS + 0x6),16,DATA:16
MBOX_DSP,M32DSP_MBOX_EXT2, (MBOX_DSP_BASE_ADDRESS + 0x7),16,DATA:16
MBOX_DSP,DSP2M3_MBOX_EXT1, (MBOX_DSP_BASE_ADDRESS + 0x8),16,DATA:16
MBOX_DSP,DSP2M3_MBOX_EXT2, (MBOX_DSP_BASE_ADDRESS + 0x9),16,DATA:16

#define ADC_DSP_BASE_ADDRESS 0x00008800

ADC_DSP,RX_DATA, (ADC_DSP_BASE_ADDRESS + 0x0),16,RSVD:3,OVERFLOW:1,SAMPLE:12
ADC_DSP,STATUS, (ADC_DSP_BASE_ADDRESS + 0x4),16,RSVD:11,RX_UF:1,RX_OF:1,FIFO_FULL:1,FIFO_EMPTY:1,HAS_DATA:1
ADC_DSP,CSR, (ADC_DSP_BASE_ADDRESS + 0x8),16,SOFT_RST:1,RSVD:13,EDGE_TRIG:1,ADC_EN:1

#define DSPCTRL_DSP_BASE_ADDRESS 0x00008400

DSPCTRL_DSP,CONFIG_STATUS, (DSPCTRL_DSP_BASE_ADDRESS + 0x0),16,IO_CMD_IN_PROG:1,WARN_BAD_AHB_RESP:1,WARN_DSP2AHB_OOO:1,NESTED_LOOP_OFLOW:1,RSVD:2,DSP_SPI_CLK_ON:1,DSP_I2C_CLK_ON:1,ANY_WR_INV_CACHE:1,MODULO_FIX_DISABLE:1,DMA_BYTE_ACC_DISABLE:1,DISABLE_ARB_ENFORCER:1,START_HALFWORD:1,CACHE_DISABLE:1,DONT_WAIT:1,HALFWORD_ENDIAN:1
DSPCTRL_DSP,WIN_ADDR0_UPPER, (DSPCTRL_DSP_BASE_ADDRESS + 0x1),16,ADDR:16
DSPCTRL_DSP,WIN_ADDR0_LOWER, (DSPCTRL_DSP_BASE_ADDRESS + 0x2),16,ADDR:16
DSPCTRL_DSP,WIN_ADDR1_UPPER, (DSPCTRL_DSP_BASE_ADDRESS + 0x3),16,ADDR:16
DSPCTRL_DSP,WIN_ADDR1_LOWER, (DSPCTRL_DSP_BASE_ADDRESS + 0x4),16,ADDR:16
DSPCTRL_DSP,WIN_ADDR2_UPPER, (DSPCTRL_DSP_BASE_ADDRESS + 0x5),16,ADDR:16
DSPCTRL_DSP,WIN_ADDR2_LOWER, (DSPCTRL_DSP_BASE_ADDRESS + 0x6),16,ADDR:16
DSPCTRL_DSP,WIN_ADDR3_UPPER, (DSPCTRL_DSP_BASE_ADDRESS + 0x7),16,ADDR:16
DSPCTRL_DSP,WIN_ADDR3_LOWER, (DSPCTRL_DSP_BASE_ADDRESS + 0x8),16,ADDR:16
DSPCTRL_DSP,DSP_HOLD, (DSPCTRL_DSP_BASE_ADDRESS + 0xb),16,KEY:16
DSPCTRL_DSP,SEMAPHORE0, (DSPCTRL_DSP_BASE_ADDRESS + 0xc),16,RSVD:15,SEMAPHORE:1
DSPCTRL_DSP,SEMAPHORE1, (DSPCTRL_DSP_BASE_ADDRESS + 0xd),16,RSVD:15,SEMAPHORE:1
DSPCTRL_DSP,SEMAPHORE2, (DSPCTRL_DSP_BASE_ADDRESS + 0xe),16,RSVD:15,SEMAPHORE:1
DSPCTRL_DSP,SEMAPHORE3, (DSPCTRL_DSP_BASE_ADDRESS + 0xf),16,RSVD:15,SEMAPHORE:1
DSPCTRL_DSP,DMA_SRCRDY_12, (DSPCTRL_DSP_BASE_ADDRESS + 0x10),16,RSVD:15,READY:1
DSPCTRL_DSP,DMA_SRCRDY_13, (DSPCTRL_DSP_BASE_ADDRESS + 0x11),16,RSVD:15,READY:1
DSPCTRL_DSP,DMA_SRCRDY_14, (DSPCTRL_DSP_BASE_ADDRESS + 0x12),16,RSVD:15,READY:1
DSPCTRL_DSP,DMA_SRCRDY_15, (DSPCTRL_DSP_BASE_ADDRESS + 0x13),16,RSVD:15,READY:1
DSPCTRL_DSP,DMA_DSTRDY_12, (DSPCTRL_DSP_BASE_ADDRESS + 0x14),16,RSVD:15,READY:1
DSPCTRL_DSP,DMA_DSTRDY_13, (DSPCTRL_DSP_BASE_ADDRESS + 0x15),16,RSVD:15,READY:1
DSPCTRL_DSP,DMA_DSTRDY_14, (DSPCTRL_DSP_BASE_ADDRESS + 0x16),16,RSVD:15,READY:1
DSPCTRL_DSP,DMA_DSTRDY_15, (DSPCTRL_DSP_BASE_ADDRESS + 0x17),16,RSVD:15,READY:1
DSPCTRL_DSP,DSP_UART, (DSPCTRL_DSP_BASE_ADDRESS + 0x18),16,BUSY:1,RSVD:7,DATA:8
DSPCTRL_DSP,DSP_STACK_DEBUG0, (DSPCTRL_DSP_BASE_ADDRESS + 0x19),16,RESET:1,STACK_END_ADDR:15
DSPCTRL_DSP,DSP_STACK_DEBUG1, (DSPCTRL_DSP_BASE_ADDRESS + 0x1a),16,RSVD:1,MAX_STACK_ADDR:15
DSPCTRL_DSP,DSP_HOLD_DEBUG0, (DSPCTRL_DSP_BASE_ADDRESS + 0x1b),16,RESET:1,MON_DSP2MEM:1,RSVD:6,HOLD_COUNT:8
DSPCTRL_DSP,CLK_CTRL, (DSPCTRL_DSP_BASE_ADDRESS + 0x1c),16,HYST_COUNT:4,ENABLE_SOCCTRL_STALL:1,RSVD:1,ALLOW_INT_TO_WAKE:1,ALLOW_DMA_TO_WAKE:1,ALLOW_ADC_TO_WAKE:1,ALLOW_I2S_TO_WAKE:1,ALLOW_PDM1_TO_WAKE:1,ALLOW_PDM0_TO_WAKE:1,ALLOW_I2C_TO_WAKE:1,ALLOW_SPI_TO_WAKE:1,ALLOW_AHB2DSP_TO_WAKE:1,KEEP_CLK_RUNNING:1
DSPCTRL_DSP,CLK_CTRL_SET, (DSPCTRL_DSP_BASE_ADDRESS + 0x1d),16,HYST_COUNT:4,ENABLE_SOCCTRL_STALL:1,RSVD:1,ALLOW_INT_TO_WAKE:1,ALLOW_DMA_TO_WAKE:1,ALLOW_ADC_TO_WAKE:1,ALLOW_I2S_TO_WAKE:1,ALLOW_PDM1_TO_WAKE:1,ALLOW_PDM0_TO_WAKE:1,ALLOW_I2C_TO_WAKE:1,ALLOW_SPI_TO_WAKE:1,ALLOW_AHB2DSP_TO_WAKE:1,KEEP_CLK_RUNNING:1
DSPCTRL_DSP,CLK_CTRL_CLR, (DSPCTRL_DSP_BASE_ADDRESS + 0x1e),16,HYST_COUNT:4,ENABLE_SOCCTRL_STALL:1,RSVD:1,ALLOW_INT_TO_WAKE:1,ALLOW_DMA_TO_WAKE:1,ALLOW_ADC_TO_WAKE:1,ALLOW_I2S_TO_WAKE:1,ALLOW_PDM1_TO_WAKE:1,ALLOW_PDM0_TO_WAKE:1,ALLOW_I2C_TO_WAKE:1,ALLOW_SPI_TO_WAKE:1,ALLOW_AHB2DSP_TO_WAKE:1,KEEP_CLK_RUNNING:1
DSPCTRL_DSP,CONFIG2, (DSPCTRL_DSP_BASE_ADDRESS + 0x1f),16,RSVD:13,HOLD_ON_BAD_AHB_RESP:1,HOLD_ON_DSP2AHB_OOO:1,HOLD_ON_NESTED_LOOP_OFLOW:1

#define I2S_DSP_BASE_ADDRESS 0x00008700

I2S_DSP,RX_DATA, (I2S_DSP_BASE_ADDRESS + 0x0),16,SAMPLE:16
I2S_DSP,TX_DATA, (I2S_DSP_BASE_ADDRESS + 0x4),16,SAMPLE:16
I2S_DSP,CSR, (I2S_DSP_BASE_ADDRESS + 0x8),16,SOFT_RST:1,RSVD:3,BIT64_MODE:1,TX_CH_MODE:2,RX_CH_MODE:2,INT_MODE:2,DSTRDY_EDGE_TRIG:1,SRSRDY_EDGE_TRIG:1,SWAP_WR_CHNL:1,SWAP_RD_CHNL:1,I2S_EN:1
I2S_DSP,STATUS, (I2S_DSP_BASE_ADDRESS + 0xc),16,RSVD:4,TX_CNT:3,RX_CNT:3,TX_UF:1,TX_OF:1,RX_UF:1,RX_OF:1,HAS_SPACE:1,HAS_DATA:1
I2S_DSP,CSR2, (I2S_DSP_BASE_ADDRESS + 0x10),16,RSVD:12,TX_UPSCALE:2,RX_UPSCALE:2

#define I2C2_BASE_ADDRESS 0x00008600

I2C2,CONFIG, (I2C2_BASE_ADDRESS + 0x0),16,RSVD16:2,HOLD_AT_ACK:1,RX_FIFO_INT_LEVEL:5,EN_RXFIFO_AT_START:1,BYTE2_END:1,RSVD4:2,END:1,STALL_IF_RXFULL:1,IGNORE_NACK:1,RD_PUSHES_TX_FIFO:1
I2C2,TXRX_1BYTE_FIFO_DATA, (I2C2_BASE_ADDRESS + 0x4),16,RSVD16:8,DATA:8
I2C2,STATUS, (I2C2_BASE_ADDRESS + 0xc),16,RSVD16:7,CMD_DONE:1,RX_FIFO_HIT_LEVEL:1,XMIT_COMPLETE:1,RXFIFO_HAS_1DATA:1,TXFIFO_HAS_1SPACE:1,TXFIFO_HAS_LEVEL_SPACE:1,SM_IN_NACK_HOLD:1,NACK_ESCAPE:1,START_BUSY:1
I2C2,TX_FIFO_DEBUG, (I2C2_BASE_ADDRESS + 0x10),16,RSVD16:3,MAX_ENTRIES:5,UFLOW:1,OFLOW:1,RSVD1:1,ENTRIES:5
I2C2,RX_FIFO_DEBUG, (I2C2_BASE_ADDRESS + 0x14),16,RSVD16:3,MAX_ENTRIES:5,UFLOW:1,OFLOW:1,RSVD5:1,ENTRIES:5
I2C2,GENERAL_DEBUG, (I2C2_BASE_ADDRESS + 0x1c),16,LAST_BYTE_HAD_NACK:1,MONITOR_SDA:1,MONITOR_EN:1,EN_BIT_BANG:1,BB_SDA_OEN:1,BB_SCL_OEN:1,STRETCH_ACTIVE:1,I2C_SDA_LOCAL:1,I2C_SDA_OEN:1,I2C_SCL_LOCAL:1,I2C_SCL_OEN:1,STATE_REG:5
I2C2,INT_EN, (I2C2_BASE_ADDRESS + 0x20),16,RX_HIT_LEVEL_EN_SRCRDY:1,RSVD14:1,RX_DATA_EN_SRCRDY:1,TX_DATA_EN_DSTRDY:1,TXFIFO_HAS_LEVEL_SPACE_EN_DSTRDY:1,RSVD0:2,CMD_DONE:1,RX_HIT_LEVEL_EN:1,TX_COMPLETE_EN:1,RX_DATA_EN:1,TX_DATA_EN:1,TXFIFO_HAS_LEVEL_SPACE_EN:1,UNACK_EN:1,RSVD0:2
I2C2,CMD_FIFO_DATA, (I2C2_BASE_ADDRESS + 0x24),16,RSVD16:8,CMD_RXFIFO:2:NOTHING=0x0|DISABLE_RXFIFO=0x1|ENABLE_RXFIFO=0x3,CMD_NACK:2:NOTHING=0x0|DRIVE_NACK_LOW=0x1|DRIVE_NACK_HIGH=0x3,RSVD3:1,EXP_1NACK:1,CMD_SRD:2:NOTHING=0x0|RESTART=0x1|STOP=0x2|DUMMYBYTE=0x3
I2C2,CONFIG2, (I2C2_BASE_ADDRESS + 0x28),16,RSVD16:1,DISABLE_SCL_HYSTERSIS:1,SCL_HYSTERISIS_LEVEL:4,AGGR_CLK_GATING:1,CLK_ON:1,SOFT_RST:1,CLR_STICKY:1,DISABLE_METAFLOP:1,DISABLE_SDA_HYSTERSIS:1,SDA_HYSTERISIS_LEVEL:4
I2C2,CLK_CONFIG1, (I2C2_BASE_ADDRESS + 0x30),16,IBG_TIME:8,CYCLE_TIME:8
I2C2,CLK_CONFIG2, (I2C2_BASE_ADDRESS + 0x34),16,RX_TIME:8,TX_TIME:8
I2C2,CLK_CONFIG3, (I2C2_BASE_ADDRESS + 0x38),16,NE_TIME:8,PE_TIME:8
I2C2,SCL_CONFIG, (I2C2_BASE_ADDRESS + 0x3c),16,RSVD16:5,DISABLE_FULL_STRETCH_SUPPORT:1,DISABLE_SCL_HIGH_CHK:1,HARD_DRIVE_SCL:1,RSVD7:1,MIN_SCL_HIGH:7
I2C2,RX_2BYTE_FIFO_DATA, (I2C2_BASE_ADDRESS + 0x40),16,DATA:16
I2C2,RISE_TIME_DEBUG, (I2C2_BASE_ADDRESS + 0x48),16,RSVD16:8,VALUE:8
I2C2,DUMMY_BYTES, (I2C2_BASE_ADDRESS + 0x4c),16,VALUE:16
I2C2,TX_1BYTE_DATA_CMD_FIFO, (I2C2_BASE_ADDRESS + 0x50),16,CMD:8,DATA:8
I2C2,INT_ACT, (I2C2_BASE_ADDRESS + 0x54),16,RSVD16:7,CMD_DONE_ACT:1,RX_HIT_LEVEL_ACT:1,TX_COMPLETE_ACT:1,RX_DATA_ACT:1,TX_DATA_ACT:1,TXFIFO_HAS_LEVEL_SPACE_ACT:1,UNACK_ACT:1,RSVD0:2

#define SPI2_BASE_ADDRESS 0x00008500

SPI2,CONFIG, (SPI2_BASE_ADDRESS + 0x0),16,RSVD16:1,SPIRDY_ACT_LOW:1,DIS_RX_FIFO:1,FIFO_LEVEL_TRIG:5,EN_SLVRDY:1,RSVD7:1,RX_OVFLW_DROPHEAD:1,SLVRDY_IS_MISO:1,END:1,CPHA:1,CPOL:1,RD_PUSHES_TX_FIFO:1
SPI2,TXRX_1BYTE_FIFO_DATA, (SPI2_BASE_ADDRESS + 0x4),16,RSVD16:8,DATA:8
SPI2,CLKDIV, (SPI2_BASE_ADDRESS + 0x8),16,RSVD16:4,ICG:4,IBG:4,CLKDIV:4
SPI2,STATUS, (SPI2_BASE_ADDRESS + 0xc),16,RX_FIFO_HIT_LEVEL_DUP:1,RSVD14:1,RXFIFO_HAS_1DATA_DUP:1,RSVD12:1,NE_BUSY_STICKY:1,PE_BUSY_STICKY:1,CMD_IS_DONE:1,XMIT_COMPLETE:1,RX_FIFO_HIT_LEVEL:1,TXFIFO_HAS_LEVEL_SPACE:1,RXFIFO_HAS_1DATA:1,TXFIFO_HAS_1SPACE:1,CS_SEL:2,HOLD_CS:1,START_BUSY:1
SPI2,TX_FIFO_DEBUG, (SPI2_BASE_ADDRESS + 0x10),16,RSVD16:3,MAX_ENTRIES:5,UFLOW:1,OFLOW:1,RSVD1:1,ENTRIES:5
SPI2,RX_FIFO_DEBUG, (SPI2_BASE_ADDRESS + 0x14),16,RSVD16:3,MAX_ENTRIES:5,UFLOW:1,OFLOW:1,SPI_RDY:1,ENTRIES:5
SPI2,RXDROP_CNT, (SPI2_BASE_ADDRESS + 0x18),16,COUNT:16
SPI2,GENERAL_DEBUG, (SPI2_BASE_ADDRESS + 0x1c),16,RSVD16:4,EN_BIT_BANG:1,BB_SPI_MOSI:1,BB_SPI_CS_N:1,BB_SPI_CLK:1,SPI_MISO:1,SPI_MOSI:1,SPI_CS_N:1,SPI_CLK:1,STATE_REG:4
SPI2,INT_EN, (SPI2_BASE_ADDRESS + 0x20),16,RX_FIFO_HIT_LEVEL_EN1:1,TXFIFO_HAS_LEVEL_SPACE_EN2:1,RX_DATA_EN1:1,TX_DATA_EN2:1,NE_BUSY_STICKY_EN0:1,PE_BUSY_STICKY_EN0:1,CMD_IS_DONE_EN0:1,XMIT_COMPLETE_EN0:1,RX_FIFO_HIT_LEVEL_EN0:1,TXFIFO_HAS_LEVEL_SPACE_EN0:1,RX_DATA_EN0:1,TX_DATA_EN0:1,RSVD1:4
SPI2,TXRX_2BYTE_FIFO_DATA, (SPI2_BASE_ADDRESS + 0x24),16,DATA:16
SPI2,CONFIG2, (SPI2_BASE_ADDRESS + 0x28),16,RSVD16:4,RX_BYTE2_END:1,TX_BYTE2_END:1,AGGR_CLK_GATING:1,RSVD8:1,SOFT_RST:1,CLR_STICKY:1,STALL_IF_RXFULL:1,DISABLE_MISO_METAFLOP:1,EN_LOOPBACK:1,RSVD2:1,RX_SAMPLE_TIME:2
SPI2,TX_DUMMY_BYTE_CNT, (SPI2_BASE_ADDRESS + 0x2c),16,COUNT:16
SPI2,CS_CONFIG, (SPI2_BASE_ADDRESS + 0x30),16,RSVD16:12,CS3_POL:1,CS2_POL:1,CS1_POL:1,CS0_POL:1
SPI2,INT_ACT, (SPI2_BASE_ADDRESS + 0x38),16,RSVD16:4,NE_BUSY_STICKY_ACT:1,PE_BUSY_STICKY_ACT:1,CMD_IS_DONE_ACT:1,XMIT_COMPLETE_ACT:1,RX_FIFO_HIT_LEVEL_ACT:1,TXFIFO_HAS_LEVEL_SPACE_ACT:1,RX_DATA_ACT:1,TX_DATA_ACT:1,RSVD1:4
SPI2,SLAVE_MODE, (SPI2_BASE_ADDRESS + 0x3c),16,RSVD16:12,DISABLED_TX_FIFO_DATA:1,DISABLE_TX_FIFO:1,DISABLE_ALL:1,SLAVE_EN:1

*/

#define PDM_DSP_BASE_ADDRESS 0x00008a00
#define PDM_DSP_OFFSET(n) (n * 0x100)


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pdm_dsp_rx_data_u
{
  uint16_t V;
  struct reg_pdm_dsp_rx_data_s
  {
    uint16_t SAMPLE              :16;
  }BF;
} reg_pdm_dsp_rx_data_t;

#endif  // __LANGUAGE_ASM__

#define REG_PDM_DSP_RX_DATA(N)       (*(volatile uint16_t chess_storage(IOMEM)*)((PDM_DSP_BASE_ADDRESS + PDM_DSP_OFFSET(N) + 0x0)))
#define REG_PDM_DSP_RX_DATA_ADDR(N)  (PDM_DSP_BASE_ADDRESS + PDM_DSP_OFFSET(N) + 0x0)
#define BP_PDM_DSP_RX_DATA_SAMPLE                                         0
#define BM_PDM_DSP_RX_DATA_SAMPLE                                    0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pdm_dsp_csr_u
{
  uint16_t V;
  struct reg_pdm_dsp_csr_s
  {
    uint16_t PDM_EN              :1;
    uint16_t SWAP_RD_CHNL        :1;
    uint16_t SRSRDY_EDGE_TRIG    :1;
    uint16_t RSVD0               :2;
    uint16_t RX_CH_MODE          :2;
    uint16_t RSVD1               :8;
    uint16_t SOFT_RST            :1;
  }BF;
} reg_pdm_dsp_csr_t;

#endif  // __LANGUAGE_ASM__

#define REG_PDM_DSP_CSR(N)       (*(volatile uint16_t chess_storage(IOMEM)*)((PDM_DSP_BASE_ADDRESS + PDM_DSP_OFFSET(N) + 0x4)))
#define REG_PDM_DSP_CSR_ADDR(N)  (PDM_DSP_BASE_ADDRESS + PDM_DSP_OFFSET(N) + 0x4)
#define BP_PDM_DSP_CSR_SOFT_RST                                          15
#define BM_PDM_DSP_CSR_SOFT_RST                                      0x8000
#define BP_PDM_DSP_CSR_RSVD0                                              7
#define BM_PDM_DSP_CSR_RSVD0                                         0x7F80
#define BP_PDM_DSP_CSR_RX_CH_MODE                                         5
#define BM_PDM_DSP_CSR_RX_CH_MODE                                    0x0060
#define BP_PDM_DSP_CSR_RSVD1                                              3
#define BM_PDM_DSP_CSR_RSVD1                                         0x0018
#define BP_PDM_DSP_CSR_SRSRDY_EDGE_TRIG                                   2
#define BM_PDM_DSP_CSR_SRSRDY_EDGE_TRIG                              0x0004
#define BP_PDM_DSP_CSR_SWAP_RD_CHNL                                       1
#define BM_PDM_DSP_CSR_SWAP_RD_CHNL                                  0x0002
#define BP_PDM_DSP_CSR_PDM_EN                                             0
#define BM_PDM_DSP_CSR_PDM_EN                                        0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pdm_dsp_status_u
{
  uint16_t V;
  struct reg_pdm_dsp_status_s
  {
    uint16_t HAS_DATA            :1;
    uint16_t RX_OF               :1;
    uint16_t RX_UF               :1;
    uint16_t RX_CNT              :3;
    uint16_t RSVD0               :10;
  }BF;
} reg_pdm_dsp_status_t;

#endif  // __LANGUAGE_ASM__

#define REG_PDM_DSP_STATUS(N)       (*(volatile uint16_t chess_storage(IOMEM)*)((PDM_DSP_BASE_ADDRESS + PDM_DSP_OFFSET(N) + 0x8)))
#define REG_PDM_DSP_STATUS_ADDR(N)  (PDM_DSP_BASE_ADDRESS + PDM_DSP_OFFSET(N) + 0x8)
#define BP_PDM_DSP_STATUS_RSVD0                                           6
#define BM_PDM_DSP_STATUS_RSVD0                                      0xFFC0
#define BP_PDM_DSP_STATUS_RX_CNT                                          3
#define BM_PDM_DSP_STATUS_RX_CNT                                     0x0038
#define BP_PDM_DSP_STATUS_RX_UF                                           2
#define BM_PDM_DSP_STATUS_RX_UF                                      0x0004
#define BP_PDM_DSP_STATUS_RX_OF                                           1
#define BM_PDM_DSP_STATUS_RX_OF                                      0x0002
#define BP_PDM_DSP_STATUS_HAS_DATA                                        0
#define BM_PDM_DSP_STATUS_HAS_DATA                                   0x0001

#define DMA_BASE_ADDRESS 0x00008300
#define DMA_OFFSET(n) (n * 0x10)


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dma_config_src_u
{
  uint16_t V;
  struct reg_dma_config_src_s
  {
    uint16_t SRC                 :2;
    uint16_t SRCINC              :1;
    uint16_t SRC_FLOWCTRL        :4;
    uint16_t SRC_RELOAD_PER_BLOCK:1;
    uint16_t SRC_STEP            :5;
    uint16_t SRC_TYPE            :3;
  }BF;
} reg_dma_config_src_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for DMA_CONFIG_SRC_SRC
//-------------------------------------------------------------------------
#define BFV_DMA_CONFIG_SRC_SRC_IOMEM                                    0x0
#define BFV_DMA_CONFIG_SRC_SRC_XMEM                                     0x1
#define BFV_DMA_CONFIG_SRC_SRC_YMEM                                     0x2

#define REG_DMA_CONFIG_SRC(N)       (*(volatile uint16_t chess_storage(IOMEM)*)((DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x0)))
#define REG_DMA_CONFIG_SRC_ADDR(N)  (DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x0)
#define BP_DMA_CONFIG_SRC_SRC_TYPE                                       13
#define BM_DMA_CONFIG_SRC_SRC_TYPE                                   0xE000
#define BP_DMA_CONFIG_SRC_SRC_STEP                                        8
#define BM_DMA_CONFIG_SRC_SRC_STEP                                   0x1F00
#define BP_DMA_CONFIG_SRC_SRC_RELOAD_PER_BLOCK                            7
#define BM_DMA_CONFIG_SRC_SRC_RELOAD_PER_BLOCK                       0x0080
#define BP_DMA_CONFIG_SRC_SRC_FLOWCTRL                                    3
#define BM_DMA_CONFIG_SRC_SRC_FLOWCTRL                               0x0078
#define BP_DMA_CONFIG_SRC_SRCINC                                          2
#define BM_DMA_CONFIG_SRC_SRCINC                                     0x0004
#define BP_DMA_CONFIG_SRC_SRC                                             0
#define BM_DMA_CONFIG_SRC_SRC                                        0x0003

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dma_config_dst_u
{
  uint16_t V;
  struct reg_dma_config_dst_s
  {
    uint16_t DST                 :2;
    uint16_t DSTINC              :1;
    uint16_t DST_FLOWCTRL        :4;
    uint16_t DST_RELOAD_PER_BLOCK:1;
    uint16_t DST_STEP            :5;
    uint16_t DST_TYPE            :3;
  }BF;
} reg_dma_config_dst_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for DMA_CONFIG_DST_DST
//-------------------------------------------------------------------------
#define BFV_DMA_CONFIG_DST_DST_IOMEM                                    0x0
#define BFV_DMA_CONFIG_DST_DST_XMEM                                     0x1
#define BFV_DMA_CONFIG_DST_DST_YMEM                                     0x2

#define REG_DMA_CONFIG_DST(N)       (*(volatile uint16_t chess_storage(IOMEM)*)((DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x1)))
#define REG_DMA_CONFIG_DST_ADDR(N)  (DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x1)
#define BP_DMA_CONFIG_DST_DST_TYPE                                       13
#define BM_DMA_CONFIG_DST_DST_TYPE                                   0xE000
#define BP_DMA_CONFIG_DST_DST_STEP                                        8
#define BM_DMA_CONFIG_DST_DST_STEP                                   0x1F00
#define BP_DMA_CONFIG_DST_DST_RELOAD_PER_BLOCK                            7
#define BM_DMA_CONFIG_DST_DST_RELOAD_PER_BLOCK                       0x0080
#define BP_DMA_CONFIG_DST_DST_FLOWCTRL                                    3
#define BM_DMA_CONFIG_DST_DST_FLOWCTRL                               0x0078
#define BP_DMA_CONFIG_DST_DSTINC                                          2
#define BM_DMA_CONFIG_DST_DSTINC                                     0x0004
#define BP_DMA_CONFIG_DST_DST                                             0
#define BM_DMA_CONFIG_DST_DST                                        0x0003

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dma_words_per_block_u
{
  uint16_t V;
  struct reg_dma_words_per_block_s
  {
    uint16_t WORDS_PER_BLOCK     :8;
    uint16_t RSVD0               :8;
  }BF;
} reg_dma_words_per_block_t;

#endif  // __LANGUAGE_ASM__

#define REG_DMA_WORDS_PER_BLOCK(N)       (*(volatile uint16_t chess_storage(IOMEM)*)((DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x2)))
#define REG_DMA_WORDS_PER_BLOCK_ADDR(N)  (DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x2)
#define BP_DMA_WORDS_PER_BLOCK_RSVD0                                      8
#define BM_DMA_WORDS_PER_BLOCK_RSVD0                                 0xFF00
#define BP_DMA_WORDS_PER_BLOCK_WORDS_PER_BLOCK                            0
#define BM_DMA_WORDS_PER_BLOCK_WORDS_PER_BLOCK                       0x00FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dma_src_addr_u
{
  uint16_t V;
  struct reg_dma_src_addr_s
  {
    uint16_t ADDRESS             :16;
  }BF;
} reg_dma_src_addr_t;

#endif  // __LANGUAGE_ASM__

#define REG_DMA_SRC_ADDR(N)       (*(volatile uint16_t chess_storage(IOMEM)*)((DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x3)))
#define REG_DMA_SRC_ADDR_ADDR(N)  (DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x3)
#define BP_DMA_SRC_ADDR_ADDRESS                                           0
#define BM_DMA_SRC_ADDR_ADDRESS                                      0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dma_dst_addr_u
{
  uint16_t V;
  struct reg_dma_dst_addr_s
  {
    uint16_t ADDRESS             :16;
  }BF;
} reg_dma_dst_addr_t;

#endif  // __LANGUAGE_ASM__

#define REG_DMA_DST_ADDR(N)       (*(volatile uint16_t chess_storage(IOMEM)*)((DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x4)))
#define REG_DMA_DST_ADDR_ADDR(N)  (DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x4)
#define BP_DMA_DST_ADDR_ADDRESS                                           0
#define BM_DMA_DST_ADDR_ADDRESS                                      0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dma_numblocks_u
{
  uint16_t V;
  struct reg_dma_numblocks_s
  {
    uint16_t NUMBLOCKS           :14;
    uint16_t HALF_BUFFER_INT     :1;
    uint16_t AUTO_RELOAD         :1;
  }BF;
} reg_dma_numblocks_t;

#endif  // __LANGUAGE_ASM__

#define REG_DMA_NUMBLOCKS(N)       (*(volatile uint16_t chess_storage(IOMEM)*)((DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x5)))
#define REG_DMA_NUMBLOCKS_ADDR(N)  (DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x5)
#define BP_DMA_NUMBLOCKS_AUTO_RELOAD                                     15
#define BM_DMA_NUMBLOCKS_AUTO_RELOAD                                 0x8000
#define BP_DMA_NUMBLOCKS_HALF_BUFFER_INT                                 14
#define BM_DMA_NUMBLOCKS_HALF_BUFFER_INT                             0x4000
#define BP_DMA_NUMBLOCKS_NUMBLOCKS                                        0
#define BM_DMA_NUMBLOCKS_NUMBLOCKS                                   0x3FFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dma_status_u
{
  uint16_t V;
  struct reg_dma_status_s
  {
    uint16_t HALF                :1;
    uint16_t RSVD0               :3;
    uint16_t CIRC_BUFF_CURR      :3;
    uint16_t RSVD1               :9;
  }BF;
} reg_dma_status_t;

#endif  // __LANGUAGE_ASM__

#define REG_DMA_STATUS(N)       (*(volatile uint16_t chess_storage(IOMEM)*)((DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x6)))
#define REG_DMA_STATUS_ADDR(N)  (DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x6)
#define BP_DMA_STATUS_RSVD0                                               7
#define BM_DMA_STATUS_RSVD0                                          0xFF80
#define BP_DMA_STATUS_CIRC_BUFF_CURR                                      4
#define BM_DMA_STATUS_CIRC_BUFF_CURR                                 0x0070
#define BP_DMA_STATUS_RSVD1                                               1
#define BM_DMA_STATUS_RSVD1                                          0x000E
#define BP_DMA_STATUS_HALF                                                0
#define BM_DMA_STATUS_HALF                                           0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dma_trig_config_u
{
  uint16_t V;
  struct reg_dma_trig_config_s
  {
    uint16_t SRC_POL             :1;
    uint16_t SRC_EDGE            :1;
    uint16_t SRC_BOTH_EDGES      :1;
    uint16_t DST_POL             :1;
    uint16_t DST_EDGE            :1;
    uint16_t DST_BOTH_EDGES      :1;
    uint16_t RSVD0               :2;
    uint16_t CIRC_BUFF_TRIG      :3;
    uint16_t RSVD1               :1;
    uint16_t PACK_CMD            :2;
    uint16_t CIRC_BUFF_DST_RELOAD:1;
    uint16_t CIRC_BUFF_SRC_RELOAD:1;
  }BF;
} reg_dma_trig_config_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for DMA_TRIG_CONFIG_PACK_CMD
//-------------------------------------------------------------------------
#define BFV_DMA_TRIG_CONFIG_PACK_CMD_NO_PACK                            0x0
#define BFV_DMA_TRIG_CONFIG_PACK_CMD_ZERO_PAD                           0x1
#define BFV_DMA_TRIG_CONFIG_PACK_CMD_SIGN_EXT                           0x2
#define BFV_DMA_TRIG_CONFIG_PACK_CMD_REPACK                             0x3

#define REG_DMA_TRIG_CONFIG(N)       (*(volatile uint16_t chess_storage(IOMEM)*)((DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x7)))
#define REG_DMA_TRIG_CONFIG_ADDR(N)  (DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x7)
#define BP_DMA_TRIG_CONFIG_CIRC_BUFF_SRC_RELOAD                          15
#define BM_DMA_TRIG_CONFIG_CIRC_BUFF_SRC_RELOAD                      0x8000
#define BP_DMA_TRIG_CONFIG_CIRC_BUFF_DST_RELOAD                          14
#define BM_DMA_TRIG_CONFIG_CIRC_BUFF_DST_RELOAD                      0x4000
#define BP_DMA_TRIG_CONFIG_PACK_CMD                                      12
#define BM_DMA_TRIG_CONFIG_PACK_CMD                                  0x3000
#define BP_DMA_TRIG_CONFIG_RSVD0                                         11
#define BM_DMA_TRIG_CONFIG_RSVD0                                     0x0800
#define BP_DMA_TRIG_CONFIG_CIRC_BUFF_TRIG                                 8
#define BM_DMA_TRIG_CONFIG_CIRC_BUFF_TRIG                            0x0700
#define BP_DMA_TRIG_CONFIG_RSVD1                                          6
#define BM_DMA_TRIG_CONFIG_RSVD1                                     0x00C0
#define BP_DMA_TRIG_CONFIG_DST_BOTH_EDGES                                 5
#define BM_DMA_TRIG_CONFIG_DST_BOTH_EDGES                            0x0020
#define BP_DMA_TRIG_CONFIG_DST_EDGE                                       4
#define BM_DMA_TRIG_CONFIG_DST_EDGE                                  0x0010
#define BP_DMA_TRIG_CONFIG_DST_POL                                        3
#define BM_DMA_TRIG_CONFIG_DST_POL                                   0x0008
#define BP_DMA_TRIG_CONFIG_SRC_BOTH_EDGES                                 2
#define BM_DMA_TRIG_CONFIG_SRC_BOTH_EDGES                            0x0004
#define BP_DMA_TRIG_CONFIG_SRC_EDGE                                       1
#define BM_DMA_TRIG_CONFIG_SRC_EDGE                                  0x0002
#define BP_DMA_TRIG_CONFIG_SRC_POL                                        0
#define BM_DMA_TRIG_CONFIG_SRC_POL                                   0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dma_timeout_u
{
  uint16_t V;
  struct reg_dma_timeout_s
  {
    uint16_t TIMEOUT             :10;
    uint16_t RSVD0               :6;
  }BF;
} reg_dma_timeout_t;

#endif  // __LANGUAGE_ASM__

#define REG_DMA_TIMEOUT(N)       (*(volatile uint16_t chess_storage(IOMEM)*)((DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x8)))
#define REG_DMA_TIMEOUT_ADDR(N)  (DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x8)
#define BP_DMA_TIMEOUT_RSVD0                                             10
#define BM_DMA_TIMEOUT_RSVD0                                         0xFC00
#define BP_DMA_TIMEOUT_TIMEOUT                                            0
#define BM_DMA_TIMEOUT_TIMEOUT                                       0x03FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dma_busy_u
{
  uint16_t V;
  struct reg_dma_busy_s
  {
    uint16_t BUSY                :1;
    uint16_t RSVD0               :15;
  }BF;
} reg_dma_busy_t;

#endif  // __LANGUAGE_ASM__

#define REG_DMA_BUSY(N)       (*(volatile uint16_t chess_storage(IOMEM)*)((DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x9)))
#define REG_DMA_BUSY_ADDR(N)  (DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0x9)
#define BP_DMA_BUSY_RSVD0                                                 1
#define BM_DMA_BUSY_RSVD0                                            0xFFFE
#define BP_DMA_BUSY_BUSY                                                  0
#define BM_DMA_BUSY_BUSY                                             0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dma_int_level_u
{
  uint16_t V;
  struct reg_dma_int_level_s
  {
    uint16_t INT_LEVEL           :16;
  }BF;
} reg_dma_int_level_t;

#endif  // __LANGUAGE_ASM__

#define REG_DMA_INT_LEVEL(N)       (*(volatile uint16_t chess_storage(IOMEM)*)((DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0xA)))
#define REG_DMA_INT_LEVEL_ADDR(N)  (DMA_BASE_ADDRESS + DMA_OFFSET(N) + 0xA)
#define BP_DMA_INT_LEVEL_INT_LEVEL                                        0
#define BM_DMA_INT_LEVEL_INT_LEVEL                                   0xFFFF

#define MBOX_DSP_BASE_ADDRESS 0x00008200


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_mbox_dsp_dsp2m3_mbox_lower_u
{
  uint16_t V;
  struct reg_mbox_dsp_dsp2m3_mbox_lower_s
  {
    uint16_t DATA                :16;
  }BF;
} reg_mbox_dsp_dsp2m3_mbox_lower_t;

#endif  // __LANGUAGE_ASM__

#define REG_MBOX_DSP_DSP2M3_MBOX_LOWER           (*(volatile uint16_t chess_storage(IOMEM)*)((MBOX_DSP_BASE_ADDRESS + 0x0)))
#define REG_MBOX_DSP_DSP2M3_MBOX_LOWER_ADDR      (MBOX_DSP_BASE_ADDRESS + 0x0)
#define BP_MBOX_DSP_DSP2M3_MBOX_LOWER_DATA                                0
#define BM_MBOX_DSP_DSP2M3_MBOX_LOWER_DATA                           0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_mbox_dsp_dsp2m3_mbox_low_signext_u
{
  uint16_t V;
  struct reg_mbox_dsp_dsp2m3_mbox_low_signext_s
  {
    uint16_t DATA                :16;
  }BF;
} reg_mbox_dsp_dsp2m3_mbox_low_signext_t;

#endif  // __LANGUAGE_ASM__

#define REG_MBOX_DSP_DSP2M3_MBOX_LOW_SIGNEXT           (*(volatile uint16_t chess_storage(IOMEM)*)((MBOX_DSP_BASE_ADDRESS + 0x1)))
#define REG_MBOX_DSP_DSP2M3_MBOX_LOW_SIGNEXT_ADDR      (MBOX_DSP_BASE_ADDRESS + 0x1)
#define BP_MBOX_DSP_DSP2M3_MBOX_LOW_SIGNEXT_DATA                          0
#define BM_MBOX_DSP_DSP2M3_MBOX_LOW_SIGNEXT_DATA                     0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_mbox_dsp_dsp2m32_mbox_low_upper_u
{
  uint16_t V;
  struct reg_mbox_dsp_dsp2m32_mbox_low_upper_s
  {
    uint16_t DATA                :16;
  }BF;
} reg_mbox_dsp_dsp2m32_mbox_low_upper_t;

#endif  // __LANGUAGE_ASM__

#define REG_MBOX_DSP_DSP2M32_MBOX_LOW_UPPER           (*(volatile uint16_t chess_storage(IOMEM)*)((MBOX_DSP_BASE_ADDRESS + 0x2)))
#define REG_MBOX_DSP_DSP2M32_MBOX_LOW_UPPER_ADDR      (MBOX_DSP_BASE_ADDRESS + 0x2)
#define BP_MBOX_DSP_DSP2M32_MBOX_LOW_UPPER_DATA                           0
#define BM_MBOX_DSP_DSP2M32_MBOX_LOW_UPPER_DATA                      0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_mbox_dsp_dsp2m32_mbox_status_u
{
  uint16_t V;
  struct reg_mbox_dsp_dsp2m32_mbox_status_s
  {
    uint16_t BUSY                :1;
    uint16_t RSVD0               :15;
  }BF;
} reg_mbox_dsp_dsp2m32_mbox_status_t;

#endif  // __LANGUAGE_ASM__

#define REG_MBOX_DSP_DSP2M32_MBOX_STATUS           (*(volatile uint16_t chess_storage(IOMEM)*)((MBOX_DSP_BASE_ADDRESS + 0x3)))
#define REG_MBOX_DSP_DSP2M32_MBOX_STATUS_ADDR      (MBOX_DSP_BASE_ADDRESS + 0x3)
#define BP_MBOX_DSP_DSP2M32_MBOX_STATUS_RSVD0                             1
#define BM_MBOX_DSP_DSP2M32_MBOX_STATUS_RSVD0                        0xFFFE
#define BP_MBOX_DSP_DSP2M32_MBOX_STATUS_BUSY                              0
#define BM_MBOX_DSP_DSP2M32_MBOX_STATUS_BUSY                         0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_mbox_dsp_m32dsp_mbox_lower_u
{
  uint16_t V;
  struct reg_mbox_dsp_m32dsp_mbox_lower_s
  {
    uint16_t DATA                :16;
  }BF;
} reg_mbox_dsp_m32dsp_mbox_lower_t;

#endif  // __LANGUAGE_ASM__

#define REG_MBOX_DSP_M32DSP_MBOX_LOWER           (*(volatile uint16_t chess_storage(IOMEM)*)((MBOX_DSP_BASE_ADDRESS + 0x4)))
#define REG_MBOX_DSP_M32DSP_MBOX_LOWER_ADDR      (MBOX_DSP_BASE_ADDRESS + 0x4)
#define BP_MBOX_DSP_M32DSP_MBOX_LOWER_DATA                                0
#define BM_MBOX_DSP_M32DSP_MBOX_LOWER_DATA                           0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_mbox_dsp_m32dsp_mbox_low_upper_u
{
  uint16_t V;
  struct reg_mbox_dsp_m32dsp_mbox_low_upper_s
  {
    uint16_t DATA                :16;
  }BF;
} reg_mbox_dsp_m32dsp_mbox_low_upper_t;

#endif  // __LANGUAGE_ASM__

#define REG_MBOX_DSP_M32DSP_MBOX_LOW_UPPER           (*(volatile uint16_t chess_storage(IOMEM)*)((MBOX_DSP_BASE_ADDRESS + 0x5)))
#define REG_MBOX_DSP_M32DSP_MBOX_LOW_UPPER_ADDR      (MBOX_DSP_BASE_ADDRESS + 0x5)
#define BP_MBOX_DSP_M32DSP_MBOX_LOW_UPPER_DATA                            0
#define BM_MBOX_DSP_M32DSP_MBOX_LOW_UPPER_DATA                       0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_mbox_dsp_m32dsp_mbox_ext1_u
{
  uint16_t V;
  struct reg_mbox_dsp_m32dsp_mbox_ext1_s
  {
    uint16_t DATA                :16;
  }BF;
} reg_mbox_dsp_m32dsp_mbox_ext1_t;

#endif  // __LANGUAGE_ASM__

#define REG_MBOX_DSP_M32DSP_MBOX_EXT1           (*(volatile uint16_t chess_storage(IOMEM)*)((MBOX_DSP_BASE_ADDRESS + 0x6)))
#define REG_MBOX_DSP_M32DSP_MBOX_EXT1_ADDR      (MBOX_DSP_BASE_ADDRESS + 0x6)
#define BP_MBOX_DSP_M32DSP_MBOX_EXT1_DATA                                 0
#define BM_MBOX_DSP_M32DSP_MBOX_EXT1_DATA                            0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_mbox_dsp_m32dsp_mbox_ext2_u
{
  uint16_t V;
  struct reg_mbox_dsp_m32dsp_mbox_ext2_s
  {
    uint16_t DATA                :16;
  }BF;
} reg_mbox_dsp_m32dsp_mbox_ext2_t;

#endif  // __LANGUAGE_ASM__

#define REG_MBOX_DSP_M32DSP_MBOX_EXT2           (*(volatile uint16_t chess_storage(IOMEM)*)((MBOX_DSP_BASE_ADDRESS + 0x7)))
#define REG_MBOX_DSP_M32DSP_MBOX_EXT2_ADDR      (MBOX_DSP_BASE_ADDRESS + 0x7)
#define BP_MBOX_DSP_M32DSP_MBOX_EXT2_DATA                                 0
#define BM_MBOX_DSP_M32DSP_MBOX_EXT2_DATA                            0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_mbox_dsp_dsp2m3_mbox_ext1_u
{
  uint16_t V;
  struct reg_mbox_dsp_dsp2m3_mbox_ext1_s
  {
    uint16_t DATA                :16;
  }BF;
} reg_mbox_dsp_dsp2m3_mbox_ext1_t;

#endif  // __LANGUAGE_ASM__

#define REG_MBOX_DSP_DSP2M3_MBOX_EXT1           (*(volatile uint16_t chess_storage(IOMEM)*)((MBOX_DSP_BASE_ADDRESS + 0x8)))
#define REG_MBOX_DSP_DSP2M3_MBOX_EXT1_ADDR      (MBOX_DSP_BASE_ADDRESS + 0x8)
#define BP_MBOX_DSP_DSP2M3_MBOX_EXT1_DATA                                 0
#define BM_MBOX_DSP_DSP2M3_MBOX_EXT1_DATA                            0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_mbox_dsp_dsp2m3_mbox_ext2_u
{
  uint16_t V;
  struct reg_mbox_dsp_dsp2m3_mbox_ext2_s
  {
    uint16_t DATA                :16;
  }BF;
} reg_mbox_dsp_dsp2m3_mbox_ext2_t;

#endif  // __LANGUAGE_ASM__

#define REG_MBOX_DSP_DSP2M3_MBOX_EXT2           (*(volatile uint16_t chess_storage(IOMEM)*)((MBOX_DSP_BASE_ADDRESS + 0x9)))
#define REG_MBOX_DSP_DSP2M3_MBOX_EXT2_ADDR      (MBOX_DSP_BASE_ADDRESS + 0x9)
#define BP_MBOX_DSP_DSP2M3_MBOX_EXT2_DATA                                 0
#define BM_MBOX_DSP_DSP2M3_MBOX_EXT2_DATA                            0xFFFF

#define ADC_DSP_BASE_ADDRESS 0x00008800


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_adc_dsp_rx_data_u
{
  uint16_t V;
  struct reg_adc_dsp_rx_data_s
  {
    uint16_t SAMPLE              :12;
    uint16_t OVERFLOW            :1;
    uint16_t RSVD0               :3;
  }BF;
} reg_adc_dsp_rx_data_t;

#endif  // __LANGUAGE_ASM__

#define REG_ADC_DSP_RX_DATA           (*(volatile uint16_t chess_storage(IOMEM)*)((ADC_DSP_BASE_ADDRESS + 0x0)))
#define REG_ADC_DSP_RX_DATA_ADDR      (ADC_DSP_BASE_ADDRESS + 0x0)
#define BP_ADC_DSP_RX_DATA_RSVD0                                         13
#define BM_ADC_DSP_RX_DATA_RSVD0                                     0xE000
#define BP_ADC_DSP_RX_DATA_OVERFLOW                                      12
#define BM_ADC_DSP_RX_DATA_OVERFLOW                                  0x1000
#define BP_ADC_DSP_RX_DATA_SAMPLE                                         0
#define BM_ADC_DSP_RX_DATA_SAMPLE                                    0x0FFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_adc_dsp_status_u
{
  uint16_t V;
  struct reg_adc_dsp_status_s
  {
    uint16_t HAS_DATA            :1;
    uint16_t FIFO_EMPTY          :1;
    uint16_t FIFO_FULL           :1;
    uint16_t RX_OF               :1;
    uint16_t RX_UF               :1;
    uint16_t RSVD0               :11;
  }BF;
} reg_adc_dsp_status_t;

#endif  // __LANGUAGE_ASM__

#define REG_ADC_DSP_STATUS           (*(volatile uint16_t chess_storage(IOMEM)*)((ADC_DSP_BASE_ADDRESS + 0x4)))
#define REG_ADC_DSP_STATUS_ADDR      (ADC_DSP_BASE_ADDRESS + 0x4)
#define BP_ADC_DSP_STATUS_RSVD0                                           5
#define BM_ADC_DSP_STATUS_RSVD0                                      0xFFE0
#define BP_ADC_DSP_STATUS_RX_UF                                           4
#define BM_ADC_DSP_STATUS_RX_UF                                      0x0010
#define BP_ADC_DSP_STATUS_RX_OF                                           3
#define BM_ADC_DSP_STATUS_RX_OF                                      0x0008
#define BP_ADC_DSP_STATUS_FIFO_FULL                                       2
#define BM_ADC_DSP_STATUS_FIFO_FULL                                  0x0004
#define BP_ADC_DSP_STATUS_FIFO_EMPTY                                      1
#define BM_ADC_DSP_STATUS_FIFO_EMPTY                                 0x0002
#define BP_ADC_DSP_STATUS_HAS_DATA                                        0
#define BM_ADC_DSP_STATUS_HAS_DATA                                   0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_adc_dsp_csr_u
{
  uint16_t V;
  struct reg_adc_dsp_csr_s
  {
    uint16_t ADC_EN              :1;
    uint16_t EDGE_TRIG           :1;
    uint16_t RSVD0               :13;
    uint16_t SOFT_RST            :1;
  }BF;
} reg_adc_dsp_csr_t;

#endif  // __LANGUAGE_ASM__

#define REG_ADC_DSP_CSR           (*(volatile uint16_t chess_storage(IOMEM)*)((ADC_DSP_BASE_ADDRESS + 0x8)))
#define REG_ADC_DSP_CSR_ADDR      (ADC_DSP_BASE_ADDRESS + 0x8)
#define BP_ADC_DSP_CSR_SOFT_RST                                          15
#define BM_ADC_DSP_CSR_SOFT_RST                                      0x8000
#define BP_ADC_DSP_CSR_RSVD0                                              2
#define BM_ADC_DSP_CSR_RSVD0                                         0x7FFC
#define BP_ADC_DSP_CSR_EDGE_TRIG                                          1
#define BM_ADC_DSP_CSR_EDGE_TRIG                                     0x0002
#define BP_ADC_DSP_CSR_ADC_EN                                             0
#define BM_ADC_DSP_CSR_ADC_EN                                        0x0001

#define DSPCTRL_DSP_BASE_ADDRESS 0x00008400


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_config_status_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_config_status_s
  {
    uint16_t HALFWORD_ENDIAN     :1;
    uint16_t DONT_WAIT           :1;
    uint16_t CACHE_DISABLE       :1;
    uint16_t START_HALFWORD      :1;
    uint16_t DISABLE_ARB_ENFORCER:1;
    uint16_t DMA_BYTE_ACC_DISABLE:1;
    uint16_t MODULO_FIX_DISABLE  :1;
    uint16_t ANY_WR_INV_CACHE    :1;
    uint16_t DSP_I2C_CLK_ON      :1;
    uint16_t DSP_SPI_CLK_ON      :1;
    uint16_t RSVD0               :2;
    uint16_t NESTED_LOOP_OFLOW   :1;
    uint16_t WARN_DSP2AHB_OOO    :1;
    uint16_t WARN_BAD_AHB_RESP   :1;
    uint16_t IO_CMD_IN_PROG      :1;
  }BF;
} reg_dspctrl_dsp_config_status_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_CONFIG_STATUS           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x0)))
#define REG_DSPCTRL_DSP_CONFIG_STATUS_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x0)
#define BP_DSPCTRL_DSP_CONFIG_STATUS_IO_CMD_IN_PROG                      15
#define BM_DSPCTRL_DSP_CONFIG_STATUS_IO_CMD_IN_PROG                  0x8000
#define BP_DSPCTRL_DSP_CONFIG_STATUS_WARN_BAD_AHB_RESP                   14
#define BM_DSPCTRL_DSP_CONFIG_STATUS_WARN_BAD_AHB_RESP               0x4000
#define BP_DSPCTRL_DSP_CONFIG_STATUS_WARN_DSP2AHB_OOO                    13
#define BM_DSPCTRL_DSP_CONFIG_STATUS_WARN_DSP2AHB_OOO                0x2000
#define BP_DSPCTRL_DSP_CONFIG_STATUS_NESTED_LOOP_OFLOW                   12
#define BM_DSPCTRL_DSP_CONFIG_STATUS_NESTED_LOOP_OFLOW               0x1000
#define BP_DSPCTRL_DSP_CONFIG_STATUS_RSVD0                               10
#define BM_DSPCTRL_DSP_CONFIG_STATUS_RSVD0                           0x0C00
#define BP_DSPCTRL_DSP_CONFIG_STATUS_DSP_SPI_CLK_ON                       9
#define BM_DSPCTRL_DSP_CONFIG_STATUS_DSP_SPI_CLK_ON                  0x0200
#define BP_DSPCTRL_DSP_CONFIG_STATUS_DSP_I2C_CLK_ON                       8
#define BM_DSPCTRL_DSP_CONFIG_STATUS_DSP_I2C_CLK_ON                  0x0100
#define BP_DSPCTRL_DSP_CONFIG_STATUS_ANY_WR_INV_CACHE                     7
#define BM_DSPCTRL_DSP_CONFIG_STATUS_ANY_WR_INV_CACHE                0x0080
#define BP_DSPCTRL_DSP_CONFIG_STATUS_MODULO_FIX_DISABLE                   6
#define BM_DSPCTRL_DSP_CONFIG_STATUS_MODULO_FIX_DISABLE              0x0040
#define BP_DSPCTRL_DSP_CONFIG_STATUS_DMA_BYTE_ACC_DISABLE                 5
#define BM_DSPCTRL_DSP_CONFIG_STATUS_DMA_BYTE_ACC_DISABLE            0x0020
#define BP_DSPCTRL_DSP_CONFIG_STATUS_DISABLE_ARB_ENFORCER                 4
#define BM_DSPCTRL_DSP_CONFIG_STATUS_DISABLE_ARB_ENFORCER            0x0010
#define BP_DSPCTRL_DSP_CONFIG_STATUS_START_HALFWORD                       3
#define BM_DSPCTRL_DSP_CONFIG_STATUS_START_HALFWORD                  0x0008
#define BP_DSPCTRL_DSP_CONFIG_STATUS_CACHE_DISABLE                        2
#define BM_DSPCTRL_DSP_CONFIG_STATUS_CACHE_DISABLE                   0x0004
#define BP_DSPCTRL_DSP_CONFIG_STATUS_DONT_WAIT                            1
#define BM_DSPCTRL_DSP_CONFIG_STATUS_DONT_WAIT                       0x0002
#define BP_DSPCTRL_DSP_CONFIG_STATUS_HALFWORD_ENDIAN                      0
#define BM_DSPCTRL_DSP_CONFIG_STATUS_HALFWORD_ENDIAN                 0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_win_addr0_upper_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_win_addr0_upper_s
  {
    uint16_t ADDR                :16;
  }BF;
} reg_dspctrl_dsp_win_addr0_upper_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_WIN_ADDR0_UPPER           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x1)))
#define REG_DSPCTRL_DSP_WIN_ADDR0_UPPER_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x1)
#define BP_DSPCTRL_DSP_WIN_ADDR0_UPPER_ADDR                               0
#define BM_DSPCTRL_DSP_WIN_ADDR0_UPPER_ADDR                          0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_win_addr0_lower_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_win_addr0_lower_s
  {
    uint16_t ADDR                :16;
  }BF;
} reg_dspctrl_dsp_win_addr0_lower_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_WIN_ADDR0_LOWER           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x2)))
#define REG_DSPCTRL_DSP_WIN_ADDR0_LOWER_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x2)
#define BP_DSPCTRL_DSP_WIN_ADDR0_LOWER_ADDR                               0
#define BM_DSPCTRL_DSP_WIN_ADDR0_LOWER_ADDR                          0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_win_addr1_upper_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_win_addr1_upper_s
  {
    uint16_t ADDR                :16;
  }BF;
} reg_dspctrl_dsp_win_addr1_upper_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_WIN_ADDR1_UPPER           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x3)))
#define REG_DSPCTRL_DSP_WIN_ADDR1_UPPER_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x3)
#define BP_DSPCTRL_DSP_WIN_ADDR1_UPPER_ADDR                               0
#define BM_DSPCTRL_DSP_WIN_ADDR1_UPPER_ADDR                          0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_win_addr1_lower_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_win_addr1_lower_s
  {
    uint16_t ADDR                :16;
  }BF;
} reg_dspctrl_dsp_win_addr1_lower_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_WIN_ADDR1_LOWER           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x4)))
#define REG_DSPCTRL_DSP_WIN_ADDR1_LOWER_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x4)
#define BP_DSPCTRL_DSP_WIN_ADDR1_LOWER_ADDR                               0
#define BM_DSPCTRL_DSP_WIN_ADDR1_LOWER_ADDR                          0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_win_addr2_upper_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_win_addr2_upper_s
  {
    uint16_t ADDR                :16;
  }BF;
} reg_dspctrl_dsp_win_addr2_upper_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_WIN_ADDR2_UPPER           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x5)))
#define REG_DSPCTRL_DSP_WIN_ADDR2_UPPER_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x5)
#define BP_DSPCTRL_DSP_WIN_ADDR2_UPPER_ADDR                               0
#define BM_DSPCTRL_DSP_WIN_ADDR2_UPPER_ADDR                          0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_win_addr2_lower_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_win_addr2_lower_s
  {
    uint16_t ADDR                :16;
  }BF;
} reg_dspctrl_dsp_win_addr2_lower_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_WIN_ADDR2_LOWER           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x6)))
#define REG_DSPCTRL_DSP_WIN_ADDR2_LOWER_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x6)
#define BP_DSPCTRL_DSP_WIN_ADDR2_LOWER_ADDR                               0
#define BM_DSPCTRL_DSP_WIN_ADDR2_LOWER_ADDR                          0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_win_addr3_upper_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_win_addr3_upper_s
  {
    uint16_t ADDR                :16;
  }BF;
} reg_dspctrl_dsp_win_addr3_upper_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_WIN_ADDR3_UPPER           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x7)))
#define REG_DSPCTRL_DSP_WIN_ADDR3_UPPER_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x7)
#define BP_DSPCTRL_DSP_WIN_ADDR3_UPPER_ADDR                               0
#define BM_DSPCTRL_DSP_WIN_ADDR3_UPPER_ADDR                          0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_win_addr3_lower_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_win_addr3_lower_s
  {
    uint16_t ADDR                :16;
  }BF;
} reg_dspctrl_dsp_win_addr3_lower_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_WIN_ADDR3_LOWER           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x8)))
#define REG_DSPCTRL_DSP_WIN_ADDR3_LOWER_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x8)
#define BP_DSPCTRL_DSP_WIN_ADDR3_LOWER_ADDR                               0
#define BM_DSPCTRL_DSP_WIN_ADDR3_LOWER_ADDR                          0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_dsp_hold_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_dsp_hold_s
  {
    uint16_t KEY                 :16;
  }BF;
} reg_dspctrl_dsp_dsp_hold_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_DSP_HOLD           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0xB)))
#define REG_DSPCTRL_DSP_DSP_HOLD_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0xB)
#define BP_DSPCTRL_DSP_DSP_HOLD_KEY                                       0
#define BM_DSPCTRL_DSP_DSP_HOLD_KEY                                  0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_semaphore0_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_semaphore0_s
  {
    uint16_t SEMAPHORE           :1;
    uint16_t RSVD0               :15;
  }BF;
} reg_dspctrl_dsp_semaphore0_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_SEMAPHORE0           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0xC)))
#define REG_DSPCTRL_DSP_SEMAPHORE0_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0xC)
#define BP_DSPCTRL_DSP_SEMAPHORE0_RSVD0                                   1
#define BM_DSPCTRL_DSP_SEMAPHORE0_RSVD0                              0xFFFE
#define BP_DSPCTRL_DSP_SEMAPHORE0_SEMAPHORE                               0
#define BM_DSPCTRL_DSP_SEMAPHORE0_SEMAPHORE                          0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_semaphore1_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_semaphore1_s
  {
    uint16_t SEMAPHORE           :1;
    uint16_t RSVD0               :15;
  }BF;
} reg_dspctrl_dsp_semaphore1_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_SEMAPHORE1           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0xD)))
#define REG_DSPCTRL_DSP_SEMAPHORE1_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0xD)
#define BP_DSPCTRL_DSP_SEMAPHORE1_RSVD0                                   1
#define BM_DSPCTRL_DSP_SEMAPHORE1_RSVD0                              0xFFFE
#define BP_DSPCTRL_DSP_SEMAPHORE1_SEMAPHORE                               0
#define BM_DSPCTRL_DSP_SEMAPHORE1_SEMAPHORE                          0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_semaphore2_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_semaphore2_s
  {
    uint16_t SEMAPHORE           :1;
    uint16_t RSVD0               :15;
  }BF;
} reg_dspctrl_dsp_semaphore2_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_SEMAPHORE2           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0xE)))
#define REG_DSPCTRL_DSP_SEMAPHORE2_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0xE)
#define BP_DSPCTRL_DSP_SEMAPHORE2_RSVD0                                   1
#define BM_DSPCTRL_DSP_SEMAPHORE2_RSVD0                              0xFFFE
#define BP_DSPCTRL_DSP_SEMAPHORE2_SEMAPHORE                               0
#define BM_DSPCTRL_DSP_SEMAPHORE2_SEMAPHORE                          0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_semaphore3_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_semaphore3_s
  {
    uint16_t SEMAPHORE           :1;
    uint16_t RSVD0               :15;
  }BF;
} reg_dspctrl_dsp_semaphore3_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_SEMAPHORE3           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0xF)))
#define REG_DSPCTRL_DSP_SEMAPHORE3_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0xF)
#define BP_DSPCTRL_DSP_SEMAPHORE3_RSVD0                                   1
#define BM_DSPCTRL_DSP_SEMAPHORE3_RSVD0                              0xFFFE
#define BP_DSPCTRL_DSP_SEMAPHORE3_SEMAPHORE                               0
#define BM_DSPCTRL_DSP_SEMAPHORE3_SEMAPHORE                          0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_dma_srcrdy_12_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_dma_srcrdy_12_s
  {
    uint16_t READY               :1;
    uint16_t RSVD0               :15;
  }BF;
} reg_dspctrl_dsp_dma_srcrdy_12_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_DMA_SRCRDY_12           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x10)))
#define REG_DSPCTRL_DSP_DMA_SRCRDY_12_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x10)
#define BP_DSPCTRL_DSP_DMA_SRCRDY_12_RSVD0                                1
#define BM_DSPCTRL_DSP_DMA_SRCRDY_12_RSVD0                           0xFFFE
#define BP_DSPCTRL_DSP_DMA_SRCRDY_12_READY                                0
#define BM_DSPCTRL_DSP_DMA_SRCRDY_12_READY                           0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_dma_srcrdy_13_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_dma_srcrdy_13_s
  {
    uint16_t READY               :1;
    uint16_t RSVD0               :15;
  }BF;
} reg_dspctrl_dsp_dma_srcrdy_13_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_DMA_SRCRDY_13           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x11)))
#define REG_DSPCTRL_DSP_DMA_SRCRDY_13_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x11)
#define BP_DSPCTRL_DSP_DMA_SRCRDY_13_RSVD0                                1
#define BM_DSPCTRL_DSP_DMA_SRCRDY_13_RSVD0                           0xFFFE
#define BP_DSPCTRL_DSP_DMA_SRCRDY_13_READY                                0
#define BM_DSPCTRL_DSP_DMA_SRCRDY_13_READY                           0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_dma_srcrdy_14_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_dma_srcrdy_14_s
  {
    uint16_t READY               :1;
    uint16_t RSVD0               :15;
  }BF;
} reg_dspctrl_dsp_dma_srcrdy_14_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_DMA_SRCRDY_14           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x12)))
#define REG_DSPCTRL_DSP_DMA_SRCRDY_14_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x12)
#define BP_DSPCTRL_DSP_DMA_SRCRDY_14_RSVD0                                1
#define BM_DSPCTRL_DSP_DMA_SRCRDY_14_RSVD0                           0xFFFE
#define BP_DSPCTRL_DSP_DMA_SRCRDY_14_READY                                0
#define BM_DSPCTRL_DSP_DMA_SRCRDY_14_READY                           0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_dma_srcrdy_15_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_dma_srcrdy_15_s
  {
    uint16_t READY               :1;
    uint16_t RSVD0               :15;
  }BF;
} reg_dspctrl_dsp_dma_srcrdy_15_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_DMA_SRCRDY_15           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x13)))
#define REG_DSPCTRL_DSP_DMA_SRCRDY_15_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x13)
#define BP_DSPCTRL_DSP_DMA_SRCRDY_15_RSVD0                                1
#define BM_DSPCTRL_DSP_DMA_SRCRDY_15_RSVD0                           0xFFFE
#define BP_DSPCTRL_DSP_DMA_SRCRDY_15_READY                                0
#define BM_DSPCTRL_DSP_DMA_SRCRDY_15_READY                           0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_dma_dstrdy_12_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_dma_dstrdy_12_s
  {
    uint16_t READY               :1;
    uint16_t RSVD0               :15;
  }BF;
} reg_dspctrl_dsp_dma_dstrdy_12_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_DMA_DSTRDY_12           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x14)))
#define REG_DSPCTRL_DSP_DMA_DSTRDY_12_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x14)
#define BP_DSPCTRL_DSP_DMA_DSTRDY_12_RSVD0                                1
#define BM_DSPCTRL_DSP_DMA_DSTRDY_12_RSVD0                           0xFFFE
#define BP_DSPCTRL_DSP_DMA_DSTRDY_12_READY                                0
#define BM_DSPCTRL_DSP_DMA_DSTRDY_12_READY                           0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_dma_dstrdy_13_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_dma_dstrdy_13_s
  {
    uint16_t READY               :1;
    uint16_t RSVD0               :15;
  }BF;
} reg_dspctrl_dsp_dma_dstrdy_13_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_DMA_DSTRDY_13           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x15)))
#define REG_DSPCTRL_DSP_DMA_DSTRDY_13_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x15)
#define BP_DSPCTRL_DSP_DMA_DSTRDY_13_RSVD0                                1
#define BM_DSPCTRL_DSP_DMA_DSTRDY_13_RSVD0                           0xFFFE
#define BP_DSPCTRL_DSP_DMA_DSTRDY_13_READY                                0
#define BM_DSPCTRL_DSP_DMA_DSTRDY_13_READY                           0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_dma_dstrdy_14_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_dma_dstrdy_14_s
  {
    uint16_t READY               :1;
    uint16_t RSVD0               :15;
  }BF;
} reg_dspctrl_dsp_dma_dstrdy_14_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_DMA_DSTRDY_14           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x16)))
#define REG_DSPCTRL_DSP_DMA_DSTRDY_14_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x16)
#define BP_DSPCTRL_DSP_DMA_DSTRDY_14_RSVD0                                1
#define BM_DSPCTRL_DSP_DMA_DSTRDY_14_RSVD0                           0xFFFE
#define BP_DSPCTRL_DSP_DMA_DSTRDY_14_READY                                0
#define BM_DSPCTRL_DSP_DMA_DSTRDY_14_READY                           0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_dma_dstrdy_15_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_dma_dstrdy_15_s
  {
    uint16_t READY               :1;
    uint16_t RSVD0               :15;
  }BF;
} reg_dspctrl_dsp_dma_dstrdy_15_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_DMA_DSTRDY_15           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x17)))
#define REG_DSPCTRL_DSP_DMA_DSTRDY_15_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x17)
#define BP_DSPCTRL_DSP_DMA_DSTRDY_15_RSVD0                                1
#define BM_DSPCTRL_DSP_DMA_DSTRDY_15_RSVD0                           0xFFFE
#define BP_DSPCTRL_DSP_DMA_DSTRDY_15_READY                                0
#define BM_DSPCTRL_DSP_DMA_DSTRDY_15_READY                           0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_dsp_uart_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_dsp_uart_s
  {
    uint16_t DATA                :8;
    uint16_t RSVD0               :7;
    uint16_t BUSY                :1;
  }BF;
} reg_dspctrl_dsp_dsp_uart_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_DSP_UART           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x18)))
#define REG_DSPCTRL_DSP_DSP_UART_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x18)
#define BP_DSPCTRL_DSP_DSP_UART_BUSY                                     15
#define BM_DSPCTRL_DSP_DSP_UART_BUSY                                 0x8000
#define BP_DSPCTRL_DSP_DSP_UART_RSVD0                                     8
#define BM_DSPCTRL_DSP_DSP_UART_RSVD0                                0x7F00
#define BP_DSPCTRL_DSP_DSP_UART_DATA                                      0
#define BM_DSPCTRL_DSP_DSP_UART_DATA                                 0x00FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_dsp_stack_debug0_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_dsp_stack_debug0_s
  {
    uint16_t STACK_END_ADDR      :15;
    uint16_t RESET               :1;
  }BF;
} reg_dspctrl_dsp_dsp_stack_debug0_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_DSP_STACK_DEBUG0           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x19)))
#define REG_DSPCTRL_DSP_DSP_STACK_DEBUG0_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x19)
#define BP_DSPCTRL_DSP_DSP_STACK_DEBUG0_RESET                            15
#define BM_DSPCTRL_DSP_DSP_STACK_DEBUG0_RESET                        0x8000
#define BP_DSPCTRL_DSP_DSP_STACK_DEBUG0_STACK_END_ADDR                    0
#define BM_DSPCTRL_DSP_DSP_STACK_DEBUG0_STACK_END_ADDR               0x7FFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_dsp_stack_debug1_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_dsp_stack_debug1_s
  {
    uint16_t MAX_STACK_ADDR      :15;
    uint16_t RSVD0               :1;
  }BF;
} reg_dspctrl_dsp_dsp_stack_debug1_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_DSP_STACK_DEBUG1           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x1A)))
#define REG_DSPCTRL_DSP_DSP_STACK_DEBUG1_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x1A)
#define BP_DSPCTRL_DSP_DSP_STACK_DEBUG1_RSVD0                            15
#define BM_DSPCTRL_DSP_DSP_STACK_DEBUG1_RSVD0                        0x8000
#define BP_DSPCTRL_DSP_DSP_STACK_DEBUG1_MAX_STACK_ADDR                    0
#define BM_DSPCTRL_DSP_DSP_STACK_DEBUG1_MAX_STACK_ADDR               0x7FFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_dsp_hold_debug0_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_dsp_hold_debug0_s
  {
    uint16_t HOLD_COUNT          :8;
    uint16_t RSVD0               :6;
    uint16_t MON_DSP2MEM         :1;
    uint16_t RESET               :1;
  }BF;
} reg_dspctrl_dsp_dsp_hold_debug0_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_DSP_HOLD_DEBUG0           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x1B)))
#define REG_DSPCTRL_DSP_DSP_HOLD_DEBUG0_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x1B)
#define BP_DSPCTRL_DSP_DSP_HOLD_DEBUG0_RESET                             15
#define BM_DSPCTRL_DSP_DSP_HOLD_DEBUG0_RESET                         0x8000
#define BP_DSPCTRL_DSP_DSP_HOLD_DEBUG0_MON_DSP2MEM                       14
#define BM_DSPCTRL_DSP_DSP_HOLD_DEBUG0_MON_DSP2MEM                   0x4000
#define BP_DSPCTRL_DSP_DSP_HOLD_DEBUG0_RSVD0                              8
#define BM_DSPCTRL_DSP_DSP_HOLD_DEBUG0_RSVD0                         0x3F00
#define BP_DSPCTRL_DSP_DSP_HOLD_DEBUG0_HOLD_COUNT                         0
#define BM_DSPCTRL_DSP_DSP_HOLD_DEBUG0_HOLD_COUNT                    0x00FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_clk_ctrl_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_clk_ctrl_s
  {
    uint16_t KEEP_CLK_RUNNING    :1;
    uint16_t ALLOW_AHB2DSP_TO_WAKE:1;
    uint16_t ALLOW_SPI_TO_WAKE   :1;
    uint16_t ALLOW_I2C_TO_WAKE   :1;
    uint16_t ALLOW_PDM0_TO_WAKE  :1;
    uint16_t ALLOW_PDM1_TO_WAKE  :1;
    uint16_t ALLOW_I2S_TO_WAKE   :1;
    uint16_t ALLOW_ADC_TO_WAKE   :1;
    uint16_t ALLOW_DMA_TO_WAKE   :1;
    uint16_t ALLOW_INT_TO_WAKE   :1;
    uint16_t RSVD0               :1;
    uint16_t ENABLE_SOCCTRL_STALL:1;
    uint16_t HYST_COUNT          :4;
  }BF;
} reg_dspctrl_dsp_clk_ctrl_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_CLK_CTRL           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x1C)))
#define REG_DSPCTRL_DSP_CLK_CTRL_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x1C)
#define BP_DSPCTRL_DSP_CLK_CTRL_HYST_COUNT                               12
#define BM_DSPCTRL_DSP_CLK_CTRL_HYST_COUNT                           0xF000
#define BP_DSPCTRL_DSP_CLK_CTRL_ENABLE_SOCCTRL_STALL                     11
#define BM_DSPCTRL_DSP_CLK_CTRL_ENABLE_SOCCTRL_STALL                 0x0800
#define BP_DSPCTRL_DSP_CLK_CTRL_RSVD0                                    10
#define BM_DSPCTRL_DSP_CLK_CTRL_RSVD0                                0x0400
#define BP_DSPCTRL_DSP_CLK_CTRL_ALLOW_INT_TO_WAKE                         9
#define BM_DSPCTRL_DSP_CLK_CTRL_ALLOW_INT_TO_WAKE                    0x0200
#define BP_DSPCTRL_DSP_CLK_CTRL_ALLOW_DMA_TO_WAKE                         8
#define BM_DSPCTRL_DSP_CLK_CTRL_ALLOW_DMA_TO_WAKE                    0x0100
#define BP_DSPCTRL_DSP_CLK_CTRL_ALLOW_ADC_TO_WAKE                         7
#define BM_DSPCTRL_DSP_CLK_CTRL_ALLOW_ADC_TO_WAKE                    0x0080
#define BP_DSPCTRL_DSP_CLK_CTRL_ALLOW_I2S_TO_WAKE                         6
#define BM_DSPCTRL_DSP_CLK_CTRL_ALLOW_I2S_TO_WAKE                    0x0040
#define BP_DSPCTRL_DSP_CLK_CTRL_ALLOW_PDM1_TO_WAKE                        5
#define BM_DSPCTRL_DSP_CLK_CTRL_ALLOW_PDM1_TO_WAKE                   0x0020
#define BP_DSPCTRL_DSP_CLK_CTRL_ALLOW_PDM0_TO_WAKE                        4
#define BM_DSPCTRL_DSP_CLK_CTRL_ALLOW_PDM0_TO_WAKE                   0x0010
#define BP_DSPCTRL_DSP_CLK_CTRL_ALLOW_I2C_TO_WAKE                         3
#define BM_DSPCTRL_DSP_CLK_CTRL_ALLOW_I2C_TO_WAKE                    0x0008
#define BP_DSPCTRL_DSP_CLK_CTRL_ALLOW_SPI_TO_WAKE                         2
#define BM_DSPCTRL_DSP_CLK_CTRL_ALLOW_SPI_TO_WAKE                    0x0004
#define BP_DSPCTRL_DSP_CLK_CTRL_ALLOW_AHB2DSP_TO_WAKE                     1
#define BM_DSPCTRL_DSP_CLK_CTRL_ALLOW_AHB2DSP_TO_WAKE                0x0002
#define BP_DSPCTRL_DSP_CLK_CTRL_KEEP_CLK_RUNNING                          0
#define BM_DSPCTRL_DSP_CLK_CTRL_KEEP_CLK_RUNNING                     0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_clk_ctrl_set_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_clk_ctrl_set_s
  {
    uint16_t KEEP_CLK_RUNNING    :1;
    uint16_t ALLOW_AHB2DSP_TO_WAKE:1;
    uint16_t ALLOW_SPI_TO_WAKE   :1;
    uint16_t ALLOW_I2C_TO_WAKE   :1;
    uint16_t ALLOW_PDM0_TO_WAKE  :1;
    uint16_t ALLOW_PDM1_TO_WAKE  :1;
    uint16_t ALLOW_I2S_TO_WAKE   :1;
    uint16_t ALLOW_ADC_TO_WAKE   :1;
    uint16_t ALLOW_DMA_TO_WAKE   :1;
    uint16_t ALLOW_INT_TO_WAKE   :1;
    uint16_t RSVD0               :1;
    uint16_t ENABLE_SOCCTRL_STALL:1;
    uint16_t HYST_COUNT          :4;
  }BF;
} reg_dspctrl_dsp_clk_ctrl_set_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_CLK_CTRL_SET           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x1D)))
#define REG_DSPCTRL_DSP_CLK_CTRL_SET_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x1D)
#define BP_DSPCTRL_DSP_CLK_CTRL_SET_HYST_COUNT                           12
#define BM_DSPCTRL_DSP_CLK_CTRL_SET_HYST_COUNT                       0xF000
#define BP_DSPCTRL_DSP_CLK_CTRL_SET_ENABLE_SOCCTRL_STALL                 11
#define BM_DSPCTRL_DSP_CLK_CTRL_SET_ENABLE_SOCCTRL_STALL             0x0800
#define BP_DSPCTRL_DSP_CLK_CTRL_SET_RSVD0                                10
#define BM_DSPCTRL_DSP_CLK_CTRL_SET_RSVD0                            0x0400
#define BP_DSPCTRL_DSP_CLK_CTRL_SET_ALLOW_INT_TO_WAKE                     9
#define BM_DSPCTRL_DSP_CLK_CTRL_SET_ALLOW_INT_TO_WAKE                0x0200
#define BP_DSPCTRL_DSP_CLK_CTRL_SET_ALLOW_DMA_TO_WAKE                     8
#define BM_DSPCTRL_DSP_CLK_CTRL_SET_ALLOW_DMA_TO_WAKE                0x0100
#define BP_DSPCTRL_DSP_CLK_CTRL_SET_ALLOW_ADC_TO_WAKE                     7
#define BM_DSPCTRL_DSP_CLK_CTRL_SET_ALLOW_ADC_TO_WAKE                0x0080
#define BP_DSPCTRL_DSP_CLK_CTRL_SET_ALLOW_I2S_TO_WAKE                     6
#define BM_DSPCTRL_DSP_CLK_CTRL_SET_ALLOW_I2S_TO_WAKE                0x0040
#define BP_DSPCTRL_DSP_CLK_CTRL_SET_ALLOW_PDM1_TO_WAKE                    5
#define BM_DSPCTRL_DSP_CLK_CTRL_SET_ALLOW_PDM1_TO_WAKE               0x0020
#define BP_DSPCTRL_DSP_CLK_CTRL_SET_ALLOW_PDM0_TO_WAKE                    4
#define BM_DSPCTRL_DSP_CLK_CTRL_SET_ALLOW_PDM0_TO_WAKE               0x0010
#define BP_DSPCTRL_DSP_CLK_CTRL_SET_ALLOW_I2C_TO_WAKE                     3
#define BM_DSPCTRL_DSP_CLK_CTRL_SET_ALLOW_I2C_TO_WAKE                0x0008
#define BP_DSPCTRL_DSP_CLK_CTRL_SET_ALLOW_SPI_TO_WAKE                     2
#define BM_DSPCTRL_DSP_CLK_CTRL_SET_ALLOW_SPI_TO_WAKE                0x0004
#define BP_DSPCTRL_DSP_CLK_CTRL_SET_ALLOW_AHB2DSP_TO_WAKE                 1
#define BM_DSPCTRL_DSP_CLK_CTRL_SET_ALLOW_AHB2DSP_TO_WAKE            0x0002
#define BP_DSPCTRL_DSP_CLK_CTRL_SET_KEEP_CLK_RUNNING                      0
#define BM_DSPCTRL_DSP_CLK_CTRL_SET_KEEP_CLK_RUNNING                 0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_clk_ctrl_clr_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_clk_ctrl_clr_s
  {
    uint16_t KEEP_CLK_RUNNING    :1;
    uint16_t ALLOW_AHB2DSP_TO_WAKE:1;
    uint16_t ALLOW_SPI_TO_WAKE   :1;
    uint16_t ALLOW_I2C_TO_WAKE   :1;
    uint16_t ALLOW_PDM0_TO_WAKE  :1;
    uint16_t ALLOW_PDM1_TO_WAKE  :1;
    uint16_t ALLOW_I2S_TO_WAKE   :1;
    uint16_t ALLOW_ADC_TO_WAKE   :1;
    uint16_t ALLOW_DMA_TO_WAKE   :1;
    uint16_t ALLOW_INT_TO_WAKE   :1;
    uint16_t RSVD0               :1;
    uint16_t ENABLE_SOCCTRL_STALL:1;
    uint16_t HYST_COUNT          :4;
  }BF;
} reg_dspctrl_dsp_clk_ctrl_clr_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_CLK_CTRL_CLR           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x1E)))
#define REG_DSPCTRL_DSP_CLK_CTRL_CLR_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x1E)
#define BP_DSPCTRL_DSP_CLK_CTRL_CLR_HYST_COUNT                           12
#define BM_DSPCTRL_DSP_CLK_CTRL_CLR_HYST_COUNT                       0xF000
#define BP_DSPCTRL_DSP_CLK_CTRL_CLR_ENABLE_SOCCTRL_STALL                 11
#define BM_DSPCTRL_DSP_CLK_CTRL_CLR_ENABLE_SOCCTRL_STALL             0x0800
#define BP_DSPCTRL_DSP_CLK_CTRL_CLR_RSVD0                                10
#define BM_DSPCTRL_DSP_CLK_CTRL_CLR_RSVD0                            0x0400
#define BP_DSPCTRL_DSP_CLK_CTRL_CLR_ALLOW_INT_TO_WAKE                     9
#define BM_DSPCTRL_DSP_CLK_CTRL_CLR_ALLOW_INT_TO_WAKE                0x0200
#define BP_DSPCTRL_DSP_CLK_CTRL_CLR_ALLOW_DMA_TO_WAKE                     8
#define BM_DSPCTRL_DSP_CLK_CTRL_CLR_ALLOW_DMA_TO_WAKE                0x0100
#define BP_DSPCTRL_DSP_CLK_CTRL_CLR_ALLOW_ADC_TO_WAKE                     7
#define BM_DSPCTRL_DSP_CLK_CTRL_CLR_ALLOW_ADC_TO_WAKE                0x0080
#define BP_DSPCTRL_DSP_CLK_CTRL_CLR_ALLOW_I2S_TO_WAKE                     6
#define BM_DSPCTRL_DSP_CLK_CTRL_CLR_ALLOW_I2S_TO_WAKE                0x0040
#define BP_DSPCTRL_DSP_CLK_CTRL_CLR_ALLOW_PDM1_TO_WAKE                    5
#define BM_DSPCTRL_DSP_CLK_CTRL_CLR_ALLOW_PDM1_TO_WAKE               0x0020
#define BP_DSPCTRL_DSP_CLK_CTRL_CLR_ALLOW_PDM0_TO_WAKE                    4
#define BM_DSPCTRL_DSP_CLK_CTRL_CLR_ALLOW_PDM0_TO_WAKE               0x0010
#define BP_DSPCTRL_DSP_CLK_CTRL_CLR_ALLOW_I2C_TO_WAKE                     3
#define BM_DSPCTRL_DSP_CLK_CTRL_CLR_ALLOW_I2C_TO_WAKE                0x0008
#define BP_DSPCTRL_DSP_CLK_CTRL_CLR_ALLOW_SPI_TO_WAKE                     2
#define BM_DSPCTRL_DSP_CLK_CTRL_CLR_ALLOW_SPI_TO_WAKE                0x0004
#define BP_DSPCTRL_DSP_CLK_CTRL_CLR_ALLOW_AHB2DSP_TO_WAKE                 1
#define BM_DSPCTRL_DSP_CLK_CTRL_CLR_ALLOW_AHB2DSP_TO_WAKE            0x0002
#define BP_DSPCTRL_DSP_CLK_CTRL_CLR_KEEP_CLK_RUNNING                      0
#define BM_DSPCTRL_DSP_CLK_CTRL_CLR_KEEP_CLK_RUNNING                 0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_dsp_config2_u
{
  uint16_t V;
  struct reg_dspctrl_dsp_config2_s
  {
    uint16_t HOLD_ON_NESTED_LOOP_OFLOW:1;
    uint16_t HOLD_ON_DSP2AHB_OOO :1;
    uint16_t HOLD_ON_BAD_AHB_RESP:1;
    uint16_t RSVD0               :13;
  }BF;
} reg_dspctrl_dsp_config2_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_DSP_CONFIG2           (*(volatile uint16_t chess_storage(IOMEM)*)((DSPCTRL_DSP_BASE_ADDRESS + 0x1F)))
#define REG_DSPCTRL_DSP_CONFIG2_ADDR      (DSPCTRL_DSP_BASE_ADDRESS + 0x1F)
#define BP_DSPCTRL_DSP_CONFIG2_RSVD0                                      3
#define BM_DSPCTRL_DSP_CONFIG2_RSVD0                                 0xFFF8
#define BP_DSPCTRL_DSP_CONFIG2_HOLD_ON_BAD_AHB_RESP                       2
#define BM_DSPCTRL_DSP_CONFIG2_HOLD_ON_BAD_AHB_RESP                  0x0004
#define BP_DSPCTRL_DSP_CONFIG2_HOLD_ON_DSP2AHB_OOO                        1
#define BM_DSPCTRL_DSP_CONFIG2_HOLD_ON_DSP2AHB_OOO                   0x0002
#define BP_DSPCTRL_DSP_CONFIG2_HOLD_ON_NESTED_LOOP_OFLOW                  0
#define BM_DSPCTRL_DSP_CONFIG2_HOLD_ON_NESTED_LOOP_OFLOW             0x0001

#define I2S_DSP_BASE_ADDRESS 0x00008700


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2s_dsp_rx_data_u
{
  uint16_t V;
  struct reg_i2s_dsp_rx_data_s
  {
    uint16_t SAMPLE              :16;
  }BF;
} reg_i2s_dsp_rx_data_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2S_DSP_RX_DATA           (*(volatile uint16_t chess_storage(IOMEM)*)((I2S_DSP_BASE_ADDRESS + 0x0)))
#define REG_I2S_DSP_RX_DATA_ADDR      (I2S_DSP_BASE_ADDRESS + 0x0)
#define BP_I2S_DSP_RX_DATA_SAMPLE                                         0
#define BM_I2S_DSP_RX_DATA_SAMPLE                                    0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2s_dsp_tx_data_u
{
  uint16_t V;
  struct reg_i2s_dsp_tx_data_s
  {
    uint16_t SAMPLE              :16;
  }BF;
} reg_i2s_dsp_tx_data_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2S_DSP_TX_DATA           (*(volatile uint16_t chess_storage(IOMEM)*)((I2S_DSP_BASE_ADDRESS + 0x4)))
#define REG_I2S_DSP_TX_DATA_ADDR      (I2S_DSP_BASE_ADDRESS + 0x4)
#define BP_I2S_DSP_TX_DATA_SAMPLE                                         0
#define BM_I2S_DSP_TX_DATA_SAMPLE                                    0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2s_dsp_csr_u
{
  uint16_t V;
  struct reg_i2s_dsp_csr_s
  {
    uint16_t I2S_EN              :1;
    uint16_t SWAP_RD_CHNL        :1;
    uint16_t SWAP_WR_CHNL        :1;
    uint16_t SRSRDY_EDGE_TRIG    :1;
    uint16_t DSTRDY_EDGE_TRIG    :1;
    uint16_t INT_MODE            :2;
    uint16_t RX_CH_MODE          :2;
    uint16_t TX_CH_MODE          :2;
    uint16_t BIT64_MODE          :1;
    uint16_t RSVD0               :3;
    uint16_t SOFT_RST            :1;
  }BF;
} reg_i2s_dsp_csr_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2S_DSP_CSR           (*(volatile uint16_t chess_storage(IOMEM)*)((I2S_DSP_BASE_ADDRESS + 0x8)))
#define REG_I2S_DSP_CSR_ADDR      (I2S_DSP_BASE_ADDRESS + 0x8)
#define BP_I2S_DSP_CSR_SOFT_RST                                          15
#define BM_I2S_DSP_CSR_SOFT_RST                                      0x8000
#define BP_I2S_DSP_CSR_RSVD0                                             12
#define BM_I2S_DSP_CSR_RSVD0                                         0x7000
#define BP_I2S_DSP_CSR_BIT64_MODE                                        11
#define BM_I2S_DSP_CSR_BIT64_MODE                                    0x0800
#define BP_I2S_DSP_CSR_TX_CH_MODE                                         9
#define BM_I2S_DSP_CSR_TX_CH_MODE                                    0x0600
#define BP_I2S_DSP_CSR_RX_CH_MODE                                         7
#define BM_I2S_DSP_CSR_RX_CH_MODE                                    0x0180
#define BP_I2S_DSP_CSR_INT_MODE                                           5
#define BM_I2S_DSP_CSR_INT_MODE                                      0x0060
#define BP_I2S_DSP_CSR_DSTRDY_EDGE_TRIG                                   4
#define BM_I2S_DSP_CSR_DSTRDY_EDGE_TRIG                              0x0010
#define BP_I2S_DSP_CSR_SRSRDY_EDGE_TRIG                                   3
#define BM_I2S_DSP_CSR_SRSRDY_EDGE_TRIG                              0x0008
#define BP_I2S_DSP_CSR_SWAP_WR_CHNL                                       2
#define BM_I2S_DSP_CSR_SWAP_WR_CHNL                                  0x0004
#define BP_I2S_DSP_CSR_SWAP_RD_CHNL                                       1
#define BM_I2S_DSP_CSR_SWAP_RD_CHNL                                  0x0002
#define BP_I2S_DSP_CSR_I2S_EN                                             0
#define BM_I2S_DSP_CSR_I2S_EN                                        0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2s_dsp_status_u
{
  uint16_t V;
  struct reg_i2s_dsp_status_s
  {
    uint16_t HAS_DATA            :1;
    uint16_t HAS_SPACE           :1;
    uint16_t RX_OF               :1;
    uint16_t RX_UF               :1;
    uint16_t TX_OF               :1;
    uint16_t TX_UF               :1;
    uint16_t RX_CNT              :3;
    uint16_t TX_CNT              :3;
    uint16_t RSVD0               :4;
  }BF;
} reg_i2s_dsp_status_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2S_DSP_STATUS           (*(volatile uint16_t chess_storage(IOMEM)*)((I2S_DSP_BASE_ADDRESS + 0xC)))
#define REG_I2S_DSP_STATUS_ADDR      (I2S_DSP_BASE_ADDRESS + 0xC)
#define BP_I2S_DSP_STATUS_RSVD0                                          12
#define BM_I2S_DSP_STATUS_RSVD0                                      0xF000
#define BP_I2S_DSP_STATUS_TX_CNT                                          9
#define BM_I2S_DSP_STATUS_TX_CNT                                     0x0E00
#define BP_I2S_DSP_STATUS_RX_CNT                                          6
#define BM_I2S_DSP_STATUS_RX_CNT                                     0x01C0
#define BP_I2S_DSP_STATUS_TX_UF                                           5
#define BM_I2S_DSP_STATUS_TX_UF                                      0x0020
#define BP_I2S_DSP_STATUS_TX_OF                                           4
#define BM_I2S_DSP_STATUS_TX_OF                                      0x0010
#define BP_I2S_DSP_STATUS_RX_UF                                           3
#define BM_I2S_DSP_STATUS_RX_UF                                      0x0008
#define BP_I2S_DSP_STATUS_RX_OF                                           2
#define BM_I2S_DSP_STATUS_RX_OF                                      0x0004
#define BP_I2S_DSP_STATUS_HAS_SPACE                                       1
#define BM_I2S_DSP_STATUS_HAS_SPACE                                  0x0002
#define BP_I2S_DSP_STATUS_HAS_DATA                                        0
#define BM_I2S_DSP_STATUS_HAS_DATA                                   0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2s_dsp_csr2_u
{
  uint16_t V;
  struct reg_i2s_dsp_csr2_s
  {
    uint16_t RX_UPSCALE          :2;
    uint16_t TX_UPSCALE          :2;
    uint16_t RSVD0               :12;
  }BF;
} reg_i2s_dsp_csr2_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2S_DSP_CSR2           (*(volatile uint16_t chess_storage(IOMEM)*)((I2S_DSP_BASE_ADDRESS + 0x10)))
#define REG_I2S_DSP_CSR2_ADDR      (I2S_DSP_BASE_ADDRESS + 0x10)
#define BP_I2S_DSP_CSR2_RSVD0                                             4
#define BM_I2S_DSP_CSR2_RSVD0                                        0xFFF0
#define BP_I2S_DSP_CSR2_TX_UPSCALE                                        2
#define BM_I2S_DSP_CSR2_TX_UPSCALE                                   0x000C
#define BP_I2S_DSP_CSR2_RX_UPSCALE                                        0
#define BM_I2S_DSP_CSR2_RX_UPSCALE                                   0x0003

#define I2C2_BASE_ADDRESS 0x00008600


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c2_config_u
{
  uint16_t V;
  struct reg_i2c2_config_s
  {
    uint16_t RD_PUSHES_TX_FIFO   :1;
    uint16_t IGNORE_NACK         :1;
    uint16_t STALL_IF_RXFULL     :1;
    uint16_t END                 :1;
    uint16_t RSVD0               :2;
    uint16_t BYTE2_END           :1;
    uint16_t EN_RXFIFO_AT_START  :1;
    uint16_t RX_FIFO_INT_LEVEL   :5;
    uint16_t HOLD_AT_ACK         :1;
    uint16_t RSVD1               :2;
  }BF;
} reg_i2c2_config_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C2_CONFIG           (*(volatile uint16_t chess_storage(IOMEM)*)((I2C2_BASE_ADDRESS + 0x0)))
#define REG_I2C2_CONFIG_ADDR      (I2C2_BASE_ADDRESS + 0x0)
#define BP_I2C2_CONFIG_RSVD0                                             14
#define BM_I2C2_CONFIG_RSVD0                                         0xC000
#define BP_I2C2_CONFIG_HOLD_AT_ACK                                       13
#define BM_I2C2_CONFIG_HOLD_AT_ACK                                   0x2000
#define BP_I2C2_CONFIG_RX_FIFO_INT_LEVEL                                  8
#define BM_I2C2_CONFIG_RX_FIFO_INT_LEVEL                             0x1F00
#define BP_I2C2_CONFIG_EN_RXFIFO_AT_START                                 7
#define BM_I2C2_CONFIG_EN_RXFIFO_AT_START                            0x0080
#define BP_I2C2_CONFIG_BYTE2_END                                          6
#define BM_I2C2_CONFIG_BYTE2_END                                     0x0040
#define BP_I2C2_CONFIG_RSVD1                                              4
#define BM_I2C2_CONFIG_RSVD1                                         0x0030
#define BP_I2C2_CONFIG_END                                                3
#define BM_I2C2_CONFIG_END                                           0x0008
#define BP_I2C2_CONFIG_STALL_IF_RXFULL                                    2
#define BM_I2C2_CONFIG_STALL_IF_RXFULL                               0x0004
#define BP_I2C2_CONFIG_IGNORE_NACK                                        1
#define BM_I2C2_CONFIG_IGNORE_NACK                                   0x0002
#define BP_I2C2_CONFIG_RD_PUSHES_TX_FIFO                                  0
#define BM_I2C2_CONFIG_RD_PUSHES_TX_FIFO                             0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c2_txrx_1byte_fifo_data_u
{
  uint16_t V;
  struct reg_i2c2_txrx_1byte_fifo_data_s
  {
    uint16_t DATA                :8;
    uint16_t RSVD0               :8;
  }BF;
} reg_i2c2_txrx_1byte_fifo_data_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C2_TXRX_1BYTE_FIFO_DATA           (*(volatile uint16_t chess_storage(IOMEM)*)((I2C2_BASE_ADDRESS + 0x4)))
#define REG_I2C2_TXRX_1BYTE_FIFO_DATA_ADDR      (I2C2_BASE_ADDRESS + 0x4)
#define BP_I2C2_TXRX_1BYTE_FIFO_DATA_RSVD0                                8
#define BM_I2C2_TXRX_1BYTE_FIFO_DATA_RSVD0                           0xFF00
#define BP_I2C2_TXRX_1BYTE_FIFO_DATA_DATA                                 0
#define BM_I2C2_TXRX_1BYTE_FIFO_DATA_DATA                            0x00FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c2_status_u
{
  uint16_t V;
  struct reg_i2c2_status_s
  {
    uint16_t START_BUSY          :1;
    uint16_t NACK_ESCAPE         :1;
    uint16_t SM_IN_NACK_HOLD     :1;
    uint16_t TXFIFO_HAS_LEVEL_SPACE:1;
    uint16_t TXFIFO_HAS_1SPACE   :1;
    uint16_t RXFIFO_HAS_1DATA    :1;
    uint16_t XMIT_COMPLETE       :1;
    uint16_t RX_FIFO_HIT_LEVEL   :1;
    uint16_t CMD_DONE            :1;
    uint16_t RSVD0               :7;
  }BF;
} reg_i2c2_status_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C2_STATUS           (*(volatile uint16_t chess_storage(IOMEM)*)((I2C2_BASE_ADDRESS + 0xC)))
#define REG_I2C2_STATUS_ADDR      (I2C2_BASE_ADDRESS + 0xC)
#define BP_I2C2_STATUS_RSVD0                                              9
#define BM_I2C2_STATUS_RSVD0                                         0xFE00
#define BP_I2C2_STATUS_CMD_DONE                                           8
#define BM_I2C2_STATUS_CMD_DONE                                      0x0100
#define BP_I2C2_STATUS_RX_FIFO_HIT_LEVEL                                  7
#define BM_I2C2_STATUS_RX_FIFO_HIT_LEVEL                             0x0080
#define BP_I2C2_STATUS_XMIT_COMPLETE                                      6
#define BM_I2C2_STATUS_XMIT_COMPLETE                                 0x0040
#define BP_I2C2_STATUS_RXFIFO_HAS_1DATA                                   5
#define BM_I2C2_STATUS_RXFIFO_HAS_1DATA                              0x0020
#define BP_I2C2_STATUS_TXFIFO_HAS_1SPACE                                  4
#define BM_I2C2_STATUS_TXFIFO_HAS_1SPACE                             0x0010
#define BP_I2C2_STATUS_TXFIFO_HAS_LEVEL_SPACE                             3
#define BM_I2C2_STATUS_TXFIFO_HAS_LEVEL_SPACE                        0x0008
#define BP_I2C2_STATUS_SM_IN_NACK_HOLD                                    2
#define BM_I2C2_STATUS_SM_IN_NACK_HOLD                               0x0004
#define BP_I2C2_STATUS_NACK_ESCAPE                                        1
#define BM_I2C2_STATUS_NACK_ESCAPE                                   0x0002
#define BP_I2C2_STATUS_START_BUSY                                         0
#define BM_I2C2_STATUS_START_BUSY                                    0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c2_tx_fifo_debug_u
{
  uint16_t V;
  struct reg_i2c2_tx_fifo_debug_s
  {
    uint16_t ENTRIES             :5;
    uint16_t RSVD0               :1;
    uint16_t OFLOW               :1;
    uint16_t UFLOW               :1;
    uint16_t MAX_ENTRIES         :5;
    uint16_t RSVD1               :3;
  }BF;
} reg_i2c2_tx_fifo_debug_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C2_TX_FIFO_DEBUG           (*(volatile uint16_t chess_storage(IOMEM)*)((I2C2_BASE_ADDRESS + 0x10)))
#define REG_I2C2_TX_FIFO_DEBUG_ADDR      (I2C2_BASE_ADDRESS + 0x10)
#define BP_I2C2_TX_FIFO_DEBUG_RSVD0                                      13
#define BM_I2C2_TX_FIFO_DEBUG_RSVD0                                  0xE000
#define BP_I2C2_TX_FIFO_DEBUG_MAX_ENTRIES                                 8
#define BM_I2C2_TX_FIFO_DEBUG_MAX_ENTRIES                            0x1F00
#define BP_I2C2_TX_FIFO_DEBUG_UFLOW                                       7
#define BM_I2C2_TX_FIFO_DEBUG_UFLOW                                  0x0080
#define BP_I2C2_TX_FIFO_DEBUG_OFLOW                                       6
#define BM_I2C2_TX_FIFO_DEBUG_OFLOW                                  0x0040
#define BP_I2C2_TX_FIFO_DEBUG_RSVD1                                       5
#define BM_I2C2_TX_FIFO_DEBUG_RSVD1                                  0x0020
#define BP_I2C2_TX_FIFO_DEBUG_ENTRIES                                     0
#define BM_I2C2_TX_FIFO_DEBUG_ENTRIES                                0x001F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c2_rx_fifo_debug_u
{
  uint16_t V;
  struct reg_i2c2_rx_fifo_debug_s
  {
    uint16_t ENTRIES             :5;
    uint16_t RSVD0               :1;
    uint16_t OFLOW               :1;
    uint16_t UFLOW               :1;
    uint16_t MAX_ENTRIES         :5;
    uint16_t RSVD1               :3;
  }BF;
} reg_i2c2_rx_fifo_debug_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C2_RX_FIFO_DEBUG           (*(volatile uint16_t chess_storage(IOMEM)*)((I2C2_BASE_ADDRESS + 0x14)))
#define REG_I2C2_RX_FIFO_DEBUG_ADDR      (I2C2_BASE_ADDRESS + 0x14)
#define BP_I2C2_RX_FIFO_DEBUG_RSVD0                                      13
#define BM_I2C2_RX_FIFO_DEBUG_RSVD0                                  0xE000
#define BP_I2C2_RX_FIFO_DEBUG_MAX_ENTRIES                                 8
#define BM_I2C2_RX_FIFO_DEBUG_MAX_ENTRIES                            0x1F00
#define BP_I2C2_RX_FIFO_DEBUG_UFLOW                                       7
#define BM_I2C2_RX_FIFO_DEBUG_UFLOW                                  0x0080
#define BP_I2C2_RX_FIFO_DEBUG_OFLOW                                       6
#define BM_I2C2_RX_FIFO_DEBUG_OFLOW                                  0x0040
#define BP_I2C2_RX_FIFO_DEBUG_RSVD1                                       5
#define BM_I2C2_RX_FIFO_DEBUG_RSVD1                                  0x0020
#define BP_I2C2_RX_FIFO_DEBUG_ENTRIES                                     0
#define BM_I2C2_RX_FIFO_DEBUG_ENTRIES                                0x001F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c2_general_debug_u
{
  uint16_t V;
  struct reg_i2c2_general_debug_s
  {
    uint16_t STATE_REG           :5;
    uint16_t I2C_SCL_OEN         :1;
    uint16_t I2C_SCL_LOCAL       :1;
    uint16_t I2C_SDA_OEN         :1;
    uint16_t I2C_SDA_LOCAL       :1;
    uint16_t STRETCH_ACTIVE      :1;
    uint16_t BB_SCL_OEN          :1;
    uint16_t BB_SDA_OEN          :1;
    uint16_t EN_BIT_BANG         :1;
    uint16_t MONITOR_EN          :1;
    uint16_t MONITOR_SDA         :1;
    uint16_t LAST_BYTE_HAD_NACK  :1;
  }BF;
} reg_i2c2_general_debug_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C2_GENERAL_DEBUG           (*(volatile uint16_t chess_storage(IOMEM)*)((I2C2_BASE_ADDRESS + 0x1C)))
#define REG_I2C2_GENERAL_DEBUG_ADDR      (I2C2_BASE_ADDRESS + 0x1C)
#define BP_I2C2_GENERAL_DEBUG_LAST_BYTE_HAD_NACK                         15
#define BM_I2C2_GENERAL_DEBUG_LAST_BYTE_HAD_NACK                     0x8000
#define BP_I2C2_GENERAL_DEBUG_MONITOR_SDA                                14
#define BM_I2C2_GENERAL_DEBUG_MONITOR_SDA                            0x4000
#define BP_I2C2_GENERAL_DEBUG_MONITOR_EN                                 13
#define BM_I2C2_GENERAL_DEBUG_MONITOR_EN                             0x2000
#define BP_I2C2_GENERAL_DEBUG_EN_BIT_BANG                                12
#define BM_I2C2_GENERAL_DEBUG_EN_BIT_BANG                            0x1000
#define BP_I2C2_GENERAL_DEBUG_BB_SDA_OEN                                 11
#define BM_I2C2_GENERAL_DEBUG_BB_SDA_OEN                             0x0800
#define BP_I2C2_GENERAL_DEBUG_BB_SCL_OEN                                 10
#define BM_I2C2_GENERAL_DEBUG_BB_SCL_OEN                             0x0400
#define BP_I2C2_GENERAL_DEBUG_STRETCH_ACTIVE                              9
#define BM_I2C2_GENERAL_DEBUG_STRETCH_ACTIVE                         0x0200
#define BP_I2C2_GENERAL_DEBUG_I2C_SDA_LOCAL                               8
#define BM_I2C2_GENERAL_DEBUG_I2C_SDA_LOCAL                          0x0100
#define BP_I2C2_GENERAL_DEBUG_I2C_SDA_OEN                                 7
#define BM_I2C2_GENERAL_DEBUG_I2C_SDA_OEN                            0x0080
#define BP_I2C2_GENERAL_DEBUG_I2C_SCL_LOCAL                               6
#define BM_I2C2_GENERAL_DEBUG_I2C_SCL_LOCAL                          0x0040
#define BP_I2C2_GENERAL_DEBUG_I2C_SCL_OEN                                 5
#define BM_I2C2_GENERAL_DEBUG_I2C_SCL_OEN                            0x0020
#define BP_I2C2_GENERAL_DEBUG_STATE_REG                                   0
#define BM_I2C2_GENERAL_DEBUG_STATE_REG                              0x001F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c2_int_en_u
{
  uint16_t V;
  struct reg_i2c2_int_en_s
  {
    uint16_t RSVD0               :2;
    uint16_t UNACK_EN            :1;
    uint16_t TXFIFO_HAS_LEVEL_SPACE_EN:1;
    uint16_t TX_DATA_EN          :1;
    uint16_t RX_DATA_EN          :1;
    uint16_t TX_COMPLETE_EN      :1;
    uint16_t RX_HIT_LEVEL_EN     :1;
    uint16_t CMD_DONE            :1;
    uint16_t RSVD1               :2;
    uint16_t TXFIFO_HAS_LEVEL_SPACE_EN_DSTRDY:1;
    uint16_t TX_DATA_EN_DSTRDY   :1;
    uint16_t RX_DATA_EN_SRCRDY   :1;
    uint16_t RSVD2               :1;
    uint16_t RX_HIT_LEVEL_EN_SRCRDY:1;
  }BF;
} reg_i2c2_int_en_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C2_INT_EN           (*(volatile uint16_t chess_storage(IOMEM)*)((I2C2_BASE_ADDRESS + 0x20)))
#define REG_I2C2_INT_EN_ADDR      (I2C2_BASE_ADDRESS + 0x20)
#define BP_I2C2_INT_EN_RX_HIT_LEVEL_EN_SRCRDY                            15
#define BM_I2C2_INT_EN_RX_HIT_LEVEL_EN_SRCRDY                        0x8000
#define BP_I2C2_INT_EN_RSVD0                                             14
#define BM_I2C2_INT_EN_RSVD0                                         0x4000
#define BP_I2C2_INT_EN_RX_DATA_EN_SRCRDY                                 13
#define BM_I2C2_INT_EN_RX_DATA_EN_SRCRDY                             0x2000
#define BP_I2C2_INT_EN_TX_DATA_EN_DSTRDY                                 12
#define BM_I2C2_INT_EN_TX_DATA_EN_DSTRDY                             0x1000
#define BP_I2C2_INT_EN_TXFIFO_HAS_LEVEL_SPACE_EN_DSTRDY                  11
#define BM_I2C2_INT_EN_TXFIFO_HAS_LEVEL_SPACE_EN_DSTRDY              0x0800
#define BP_I2C2_INT_EN_RSVD1                                              9
#define BM_I2C2_INT_EN_RSVD1                                         0x0600
#define BP_I2C2_INT_EN_CMD_DONE                                           8
#define BM_I2C2_INT_EN_CMD_DONE                                      0x0100
#define BP_I2C2_INT_EN_RX_HIT_LEVEL_EN                                    7
#define BM_I2C2_INT_EN_RX_HIT_LEVEL_EN                               0x0080
#define BP_I2C2_INT_EN_TX_COMPLETE_EN                                     6
#define BM_I2C2_INT_EN_TX_COMPLETE_EN                                0x0040
#define BP_I2C2_INT_EN_RX_DATA_EN                                         5
#define BM_I2C2_INT_EN_RX_DATA_EN                                    0x0020
#define BP_I2C2_INT_EN_TX_DATA_EN                                         4
#define BM_I2C2_INT_EN_TX_DATA_EN                                    0x0010
#define BP_I2C2_INT_EN_TXFIFO_HAS_LEVEL_SPACE_EN                          3
#define BM_I2C2_INT_EN_TXFIFO_HAS_LEVEL_SPACE_EN                     0x0008
#define BP_I2C2_INT_EN_UNACK_EN                                           2
#define BM_I2C2_INT_EN_UNACK_EN                                      0x0004
#define BP_I2C2_INT_EN_RSVD2                                              0
#define BM_I2C2_INT_EN_RSVD2                                         0x0003

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c2_cmd_fifo_data_u
{
  uint16_t V;
  struct reg_i2c2_cmd_fifo_data_s
  {
    uint16_t CMD_SRD             :2;
    uint16_t EXP_1NACK           :1;
    uint16_t RSVD0               :1;
    uint16_t CMD_NACK            :2;
    uint16_t CMD_RXFIFO          :2;
    uint16_t RSVD1               :8;
  }BF;
} reg_i2c2_cmd_fifo_data_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for I2C2_CMD_FIFO_DATA_CMD_RXFIFO
//-------------------------------------------------------------------------
#define BFV_I2C2_CMD_FIFO_DATA_CMD_RXFIFO_NOTHING                       0x0
#define BFV_I2C2_CMD_FIFO_DATA_CMD_RXFIFO_DISABLE_RXFIFO                0x1
#define BFV_I2C2_CMD_FIFO_DATA_CMD_RXFIFO_ENABLE_RXFIFO                 0x3

//-------------------------------------------------------------------------
// field value definitions for I2C2_CMD_FIFO_DATA_CMD_NACK
//-------------------------------------------------------------------------
#define BFV_I2C2_CMD_FIFO_DATA_CMD_NACK_NOTHING                         0x0
#define BFV_I2C2_CMD_FIFO_DATA_CMD_NACK_DRIVE_NACK_LOW                  0x1
#define BFV_I2C2_CMD_FIFO_DATA_CMD_NACK_DRIVE_NACK_HIGH                 0x3

//-------------------------------------------------------------------------
// field value definitions for I2C2_CMD_FIFO_DATA_CMD_SRD
//-------------------------------------------------------------------------
#define BFV_I2C2_CMD_FIFO_DATA_CMD_SRD_NOTHING                          0x0
#define BFV_I2C2_CMD_FIFO_DATA_CMD_SRD_RESTART                          0x1
#define BFV_I2C2_CMD_FIFO_DATA_CMD_SRD_STOP                             0x2
#define BFV_I2C2_CMD_FIFO_DATA_CMD_SRD_DUMMYBYTE                        0x3

#define REG_I2C2_CMD_FIFO_DATA           (*(volatile uint16_t chess_storage(IOMEM)*)((I2C2_BASE_ADDRESS + 0x24)))
#define REG_I2C2_CMD_FIFO_DATA_ADDR      (I2C2_BASE_ADDRESS + 0x24)
#define BP_I2C2_CMD_FIFO_DATA_RSVD0                                       8
#define BM_I2C2_CMD_FIFO_DATA_RSVD0                                  0xFF00
#define BP_I2C2_CMD_FIFO_DATA_CMD_RXFIFO                                  6
#define BM_I2C2_CMD_FIFO_DATA_CMD_RXFIFO                             0x00C0
#define BP_I2C2_CMD_FIFO_DATA_CMD_NACK                                    4
#define BM_I2C2_CMD_FIFO_DATA_CMD_NACK                               0x0030
#define BP_I2C2_CMD_FIFO_DATA_RSVD1                                       3
#define BM_I2C2_CMD_FIFO_DATA_RSVD1                                  0x0008
#define BP_I2C2_CMD_FIFO_DATA_EXP_1NACK                                   2
#define BM_I2C2_CMD_FIFO_DATA_EXP_1NACK                              0x0004
#define BP_I2C2_CMD_FIFO_DATA_CMD_SRD                                     0
#define BM_I2C2_CMD_FIFO_DATA_CMD_SRD                                0x0003

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c2_config2_u
{
  uint16_t V;
  struct reg_i2c2_config2_s
  {
    uint16_t SDA_HYSTERISIS_LEVEL:4;
    uint16_t DISABLE_SDA_HYSTERSIS:1;
    uint16_t DISABLE_METAFLOP    :1;
    uint16_t CLR_STICKY          :1;
    uint16_t SOFT_RST            :1;
    uint16_t CLK_ON              :1;
    uint16_t AGGR_CLK_GATING     :1;
    uint16_t SCL_HYSTERISIS_LEVEL:4;
    uint16_t DISABLE_SCL_HYSTERSIS:1;
    uint16_t RSVD0               :1;
  }BF;
} reg_i2c2_config2_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C2_CONFIG2           (*(volatile uint16_t chess_storage(IOMEM)*)((I2C2_BASE_ADDRESS + 0x28)))
#define REG_I2C2_CONFIG2_ADDR      (I2C2_BASE_ADDRESS + 0x28)
#define BP_I2C2_CONFIG2_RSVD0                                            15
#define BM_I2C2_CONFIG2_RSVD0                                        0x8000
#define BP_I2C2_CONFIG2_DISABLE_SCL_HYSTERSIS                            14
#define BM_I2C2_CONFIG2_DISABLE_SCL_HYSTERSIS                        0x4000
#define BP_I2C2_CONFIG2_SCL_HYSTERISIS_LEVEL                             10
#define BM_I2C2_CONFIG2_SCL_HYSTERISIS_LEVEL                         0x3C00
#define BP_I2C2_CONFIG2_AGGR_CLK_GATING                                   9
#define BM_I2C2_CONFIG2_AGGR_CLK_GATING                              0x0200
#define BP_I2C2_CONFIG2_CLK_ON                                            8
#define BM_I2C2_CONFIG2_CLK_ON                                       0x0100
#define BP_I2C2_CONFIG2_SOFT_RST                                          7
#define BM_I2C2_CONFIG2_SOFT_RST                                     0x0080
#define BP_I2C2_CONFIG2_CLR_STICKY                                        6
#define BM_I2C2_CONFIG2_CLR_STICKY                                   0x0040
#define BP_I2C2_CONFIG2_DISABLE_METAFLOP                                  5
#define BM_I2C2_CONFIG2_DISABLE_METAFLOP                             0x0020
#define BP_I2C2_CONFIG2_DISABLE_SDA_HYSTERSIS                             4
#define BM_I2C2_CONFIG2_DISABLE_SDA_HYSTERSIS                        0x0010
#define BP_I2C2_CONFIG2_SDA_HYSTERISIS_LEVEL                              0
#define BM_I2C2_CONFIG2_SDA_HYSTERISIS_LEVEL                         0x000F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c2_clk_config1_u
{
  uint16_t V;
  struct reg_i2c2_clk_config1_s
  {
    uint16_t CYCLE_TIME          :8;
    uint16_t IBG_TIME            :8;
  }BF;
} reg_i2c2_clk_config1_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C2_CLK_CONFIG1           (*(volatile uint16_t chess_storage(IOMEM)*)((I2C2_BASE_ADDRESS + 0x30)))
#define REG_I2C2_CLK_CONFIG1_ADDR      (I2C2_BASE_ADDRESS + 0x30)
#define BP_I2C2_CLK_CONFIG1_IBG_TIME                                      8
#define BM_I2C2_CLK_CONFIG1_IBG_TIME                                 0xFF00
#define BP_I2C2_CLK_CONFIG1_CYCLE_TIME                                    0
#define BM_I2C2_CLK_CONFIG1_CYCLE_TIME                               0x00FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c2_clk_config2_u
{
  uint16_t V;
  struct reg_i2c2_clk_config2_s
  {
    uint16_t TX_TIME             :8;
    uint16_t RX_TIME             :8;
  }BF;
} reg_i2c2_clk_config2_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C2_CLK_CONFIG2           (*(volatile uint16_t chess_storage(IOMEM)*)((I2C2_BASE_ADDRESS + 0x34)))
#define REG_I2C2_CLK_CONFIG2_ADDR      (I2C2_BASE_ADDRESS + 0x34)
#define BP_I2C2_CLK_CONFIG2_RX_TIME                                       8
#define BM_I2C2_CLK_CONFIG2_RX_TIME                                  0xFF00
#define BP_I2C2_CLK_CONFIG2_TX_TIME                                       0
#define BM_I2C2_CLK_CONFIG2_TX_TIME                                  0x00FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c2_clk_config3_u
{
  uint16_t V;
  struct reg_i2c2_clk_config3_s
  {
    uint16_t PE_TIME             :8;
    uint16_t NE_TIME             :8;
  }BF;
} reg_i2c2_clk_config3_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C2_CLK_CONFIG3           (*(volatile uint16_t chess_storage(IOMEM)*)((I2C2_BASE_ADDRESS + 0x38)))
#define REG_I2C2_CLK_CONFIG3_ADDR      (I2C2_BASE_ADDRESS + 0x38)
#define BP_I2C2_CLK_CONFIG3_NE_TIME                                       8
#define BM_I2C2_CLK_CONFIG3_NE_TIME                                  0xFF00
#define BP_I2C2_CLK_CONFIG3_PE_TIME                                       0
#define BM_I2C2_CLK_CONFIG3_PE_TIME                                  0x00FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c2_scl_config_u
{
  uint16_t V;
  struct reg_i2c2_scl_config_s
  {
    uint16_t MIN_SCL_HIGH        :7;
    uint16_t RSVD0               :1;
    uint16_t HARD_DRIVE_SCL      :1;
    uint16_t DISABLE_SCL_HIGH_CHK:1;
    uint16_t DISABLE_FULL_STRETCH_SUPPORT:1;
    uint16_t RSVD1               :5;
  }BF;
} reg_i2c2_scl_config_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C2_SCL_CONFIG           (*(volatile uint16_t chess_storage(IOMEM)*)((I2C2_BASE_ADDRESS + 0x3C)))
#define REG_I2C2_SCL_CONFIG_ADDR      (I2C2_BASE_ADDRESS + 0x3C)
#define BP_I2C2_SCL_CONFIG_RSVD0                                         11
#define BM_I2C2_SCL_CONFIG_RSVD0                                     0xF800
#define BP_I2C2_SCL_CONFIG_DISABLE_FULL_STRETCH_SUPPORT                  10
#define BM_I2C2_SCL_CONFIG_DISABLE_FULL_STRETCH_SUPPORT              0x0400
#define BP_I2C2_SCL_CONFIG_DISABLE_SCL_HIGH_CHK                           9
#define BM_I2C2_SCL_CONFIG_DISABLE_SCL_HIGH_CHK                      0x0200
#define BP_I2C2_SCL_CONFIG_HARD_DRIVE_SCL                                 8
#define BM_I2C2_SCL_CONFIG_HARD_DRIVE_SCL                            0x0100
#define BP_I2C2_SCL_CONFIG_RSVD1                                          7
#define BM_I2C2_SCL_CONFIG_RSVD1                                     0x0080
#define BP_I2C2_SCL_CONFIG_MIN_SCL_HIGH                                   0
#define BM_I2C2_SCL_CONFIG_MIN_SCL_HIGH                              0x007F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c2_rx_2byte_fifo_data_u
{
  uint16_t V;
  struct reg_i2c2_rx_2byte_fifo_data_s
  {
    uint16_t DATA                :16;
  }BF;
} reg_i2c2_rx_2byte_fifo_data_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C2_RX_2BYTE_FIFO_DATA           (*(volatile uint16_t chess_storage(IOMEM)*)((I2C2_BASE_ADDRESS + 0x40)))
#define REG_I2C2_RX_2BYTE_FIFO_DATA_ADDR      (I2C2_BASE_ADDRESS + 0x40)
#define BP_I2C2_RX_2BYTE_FIFO_DATA_DATA                                   0
#define BM_I2C2_RX_2BYTE_FIFO_DATA_DATA                              0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c2_rise_time_debug_u
{
  uint16_t V;
  struct reg_i2c2_rise_time_debug_s
  {
    uint16_t VALUE               :8;
    uint16_t RSVD0               :8;
  }BF;
} reg_i2c2_rise_time_debug_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C2_RISE_TIME_DEBUG           (*(volatile uint16_t chess_storage(IOMEM)*)((I2C2_BASE_ADDRESS + 0x48)))
#define REG_I2C2_RISE_TIME_DEBUG_ADDR      (I2C2_BASE_ADDRESS + 0x48)
#define BP_I2C2_RISE_TIME_DEBUG_RSVD0                                     8
#define BM_I2C2_RISE_TIME_DEBUG_RSVD0                                0xFF00
#define BP_I2C2_RISE_TIME_DEBUG_VALUE                                     0
#define BM_I2C2_RISE_TIME_DEBUG_VALUE                                0x00FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c2_dummy_bytes_u
{
  uint16_t V;
  struct reg_i2c2_dummy_bytes_s
  {
    uint16_t VALUE               :16;
  }BF;
} reg_i2c2_dummy_bytes_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C2_DUMMY_BYTES           (*(volatile uint16_t chess_storage(IOMEM)*)((I2C2_BASE_ADDRESS + 0x4C)))
#define REG_I2C2_DUMMY_BYTES_ADDR      (I2C2_BASE_ADDRESS + 0x4C)
#define BP_I2C2_DUMMY_BYTES_VALUE                                         0
#define BM_I2C2_DUMMY_BYTES_VALUE                                    0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c2_tx_1byte_data_cmd_fifo_u
{
  uint16_t V;
  struct reg_i2c2_tx_1byte_data_cmd_fifo_s
  {
    uint16_t DATA                :8;
    uint16_t CMD                 :8;
  }BF;
} reg_i2c2_tx_1byte_data_cmd_fifo_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C2_TX_1BYTE_DATA_CMD_FIFO           (*(volatile uint16_t chess_storage(IOMEM)*)((I2C2_BASE_ADDRESS + 0x50)))
#define REG_I2C2_TX_1BYTE_DATA_CMD_FIFO_ADDR      (I2C2_BASE_ADDRESS + 0x50)
#define BP_I2C2_TX_1BYTE_DATA_CMD_FIFO_CMD                                8
#define BM_I2C2_TX_1BYTE_DATA_CMD_FIFO_CMD                           0xFF00
#define BP_I2C2_TX_1BYTE_DATA_CMD_FIFO_DATA                               0
#define BM_I2C2_TX_1BYTE_DATA_CMD_FIFO_DATA                          0x00FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c2_int_act_u
{
  uint16_t V;
  struct reg_i2c2_int_act_s
  {
    uint16_t RSVD0               :2;
    uint16_t UNACK_ACT           :1;
    uint16_t TXFIFO_HAS_LEVEL_SPACE_ACT:1;
    uint16_t TX_DATA_ACT         :1;
    uint16_t RX_DATA_ACT         :1;
    uint16_t TX_COMPLETE_ACT     :1;
    uint16_t RX_HIT_LEVEL_ACT    :1;
    uint16_t CMD_DONE_ACT        :1;
    uint16_t RSVD1               :7;
  }BF;
} reg_i2c2_int_act_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C2_INT_ACT           (*(volatile uint16_t chess_storage(IOMEM)*)((I2C2_BASE_ADDRESS + 0x54)))
#define REG_I2C2_INT_ACT_ADDR      (I2C2_BASE_ADDRESS + 0x54)
#define BP_I2C2_INT_ACT_RSVD0                                             9
#define BM_I2C2_INT_ACT_RSVD0                                        0xFE00
#define BP_I2C2_INT_ACT_CMD_DONE_ACT                                      8
#define BM_I2C2_INT_ACT_CMD_DONE_ACT                                 0x0100
#define BP_I2C2_INT_ACT_RX_HIT_LEVEL_ACT                                  7
#define BM_I2C2_INT_ACT_RX_HIT_LEVEL_ACT                             0x0080
#define BP_I2C2_INT_ACT_TX_COMPLETE_ACT                                   6
#define BM_I2C2_INT_ACT_TX_COMPLETE_ACT                              0x0040
#define BP_I2C2_INT_ACT_RX_DATA_ACT                                       5
#define BM_I2C2_INT_ACT_RX_DATA_ACT                                  0x0020
#define BP_I2C2_INT_ACT_TX_DATA_ACT                                       4
#define BM_I2C2_INT_ACT_TX_DATA_ACT                                  0x0010
#define BP_I2C2_INT_ACT_TXFIFO_HAS_LEVEL_SPACE_ACT                        3
#define BM_I2C2_INT_ACT_TXFIFO_HAS_LEVEL_SPACE_ACT                   0x0008
#define BP_I2C2_INT_ACT_UNACK_ACT                                         2
#define BM_I2C2_INT_ACT_UNACK_ACT                                    0x0004
#define BP_I2C2_INT_ACT_RSVD1                                             0
#define BM_I2C2_INT_ACT_RSVD1                                        0x0003

#define SPI2_BASE_ADDRESS 0x00008500


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi2_config_u
{
  uint16_t V;
  struct reg_spi2_config_s
  {
    uint16_t RD_PUSHES_TX_FIFO   :1;
    uint16_t CPOL                :1;
    uint16_t CPHA                :1;
    uint16_t END                 :1;
    uint16_t SLVRDY_IS_MISO      :1;
    uint16_t RX_OVFLW_DROPHEAD   :1;
    uint16_t RSVD0               :1;
    uint16_t EN_SLVRDY           :1;
    uint16_t FIFO_LEVEL_TRIG     :5;
    uint16_t DIS_RX_FIFO         :1;
    uint16_t SPIRDY_ACT_LOW      :1;
    uint16_t RSVD1               :1;
  }BF;
} reg_spi2_config_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI2_CONFIG           (*(volatile uint16_t chess_storage(IOMEM)*)((SPI2_BASE_ADDRESS + 0x0)))
#define REG_SPI2_CONFIG_ADDR      (SPI2_BASE_ADDRESS + 0x0)
#define BP_SPI2_CONFIG_RSVD0                                             15
#define BM_SPI2_CONFIG_RSVD0                                         0x8000
#define BP_SPI2_CONFIG_SPIRDY_ACT_LOW                                    14
#define BM_SPI2_CONFIG_SPIRDY_ACT_LOW                                0x4000
#define BP_SPI2_CONFIG_DIS_RX_FIFO                                       13
#define BM_SPI2_CONFIG_DIS_RX_FIFO                                   0x2000
#define BP_SPI2_CONFIG_FIFO_LEVEL_TRIG                                    8
#define BM_SPI2_CONFIG_FIFO_LEVEL_TRIG                               0x1F00
#define BP_SPI2_CONFIG_EN_SLVRDY                                          7
#define BM_SPI2_CONFIG_EN_SLVRDY                                     0x0080
#define BP_SPI2_CONFIG_RSVD1                                              6
#define BM_SPI2_CONFIG_RSVD1                                         0x0040
#define BP_SPI2_CONFIG_RX_OVFLW_DROPHEAD                                  5
#define BM_SPI2_CONFIG_RX_OVFLW_DROPHEAD                             0x0020
#define BP_SPI2_CONFIG_SLVRDY_IS_MISO                                     4
#define BM_SPI2_CONFIG_SLVRDY_IS_MISO                                0x0010
#define BP_SPI2_CONFIG_END                                                3
#define BM_SPI2_CONFIG_END                                           0x0008
#define BP_SPI2_CONFIG_CPHA                                               2
#define BM_SPI2_CONFIG_CPHA                                          0x0004
#define BP_SPI2_CONFIG_CPOL                                               1
#define BM_SPI2_CONFIG_CPOL                                          0x0002
#define BP_SPI2_CONFIG_RD_PUSHES_TX_FIFO                                  0
#define BM_SPI2_CONFIG_RD_PUSHES_TX_FIFO                             0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi2_txrx_1byte_fifo_data_u
{
  uint16_t V;
  struct reg_spi2_txrx_1byte_fifo_data_s
  {
    uint16_t DATA                :8;
    uint16_t RSVD0               :8;
  }BF;
} reg_spi2_txrx_1byte_fifo_data_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI2_TXRX_1BYTE_FIFO_DATA           (*(volatile uint16_t chess_storage(IOMEM)*)((SPI2_BASE_ADDRESS + 0x4)))
#define REG_SPI2_TXRX_1BYTE_FIFO_DATA_ADDR      (SPI2_BASE_ADDRESS + 0x4)
#define BP_SPI2_TXRX_1BYTE_FIFO_DATA_RSVD0                                8
#define BM_SPI2_TXRX_1BYTE_FIFO_DATA_RSVD0                           0xFF00
#define BP_SPI2_TXRX_1BYTE_FIFO_DATA_DATA                                 0
#define BM_SPI2_TXRX_1BYTE_FIFO_DATA_DATA                            0x00FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi2_clkdiv_u
{
  uint16_t V;
  struct reg_spi2_clkdiv_s
  {
    uint16_t CLKDIV              :4;
    uint16_t IBG                 :4;
    uint16_t ICG                 :4;
    uint16_t RSVD0               :4;
  }BF;
} reg_spi2_clkdiv_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI2_CLKDIV           (*(volatile uint16_t chess_storage(IOMEM)*)((SPI2_BASE_ADDRESS + 0x8)))
#define REG_SPI2_CLKDIV_ADDR      (SPI2_BASE_ADDRESS + 0x8)
#define BP_SPI2_CLKDIV_RSVD0                                             12
#define BM_SPI2_CLKDIV_RSVD0                                         0xF000
#define BP_SPI2_CLKDIV_ICG                                                8
#define BM_SPI2_CLKDIV_ICG                                           0x0F00
#define BP_SPI2_CLKDIV_IBG                                                4
#define BM_SPI2_CLKDIV_IBG                                           0x00F0
#define BP_SPI2_CLKDIV_CLKDIV                                             0
#define BM_SPI2_CLKDIV_CLKDIV                                        0x000F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi2_status_u
{
  uint16_t V;
  struct reg_spi2_status_s
  {
    uint16_t START_BUSY          :1;
    uint16_t HOLD_CS             :1;
    uint16_t CS_SEL              :2;
    uint16_t TXFIFO_HAS_1SPACE   :1;
    uint16_t RXFIFO_HAS_1DATA    :1;
    uint16_t TXFIFO_HAS_LEVEL_SPACE:1;
    uint16_t RX_FIFO_HIT_LEVEL   :1;
    uint16_t XMIT_COMPLETE       :1;
    uint16_t CMD_IS_DONE         :1;
    uint16_t PE_BUSY_STICKY      :1;
    uint16_t NE_BUSY_STICKY      :1;
    uint16_t RSVD0               :1;
    uint16_t RXFIFO_HAS_1DATA_DUP:1;
    uint16_t RSVD1               :1;
    uint16_t RX_FIFO_HIT_LEVEL_DUP:1;
  }BF;
} reg_spi2_status_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI2_STATUS           (*(volatile uint16_t chess_storage(IOMEM)*)((SPI2_BASE_ADDRESS + 0xC)))
#define REG_SPI2_STATUS_ADDR      (SPI2_BASE_ADDRESS + 0xC)
#define BP_SPI2_STATUS_RX_FIFO_HIT_LEVEL_DUP                             15
#define BM_SPI2_STATUS_RX_FIFO_HIT_LEVEL_DUP                         0x8000
#define BP_SPI2_STATUS_RSVD0                                             14
#define BM_SPI2_STATUS_RSVD0                                         0x4000
#define BP_SPI2_STATUS_RXFIFO_HAS_1DATA_DUP                              13
#define BM_SPI2_STATUS_RXFIFO_HAS_1DATA_DUP                          0x2000
#define BP_SPI2_STATUS_RSVD1                                             12
#define BM_SPI2_STATUS_RSVD1                                         0x1000
#define BP_SPI2_STATUS_NE_BUSY_STICKY                                    11
#define BM_SPI2_STATUS_NE_BUSY_STICKY                                0x0800
#define BP_SPI2_STATUS_PE_BUSY_STICKY                                    10
#define BM_SPI2_STATUS_PE_BUSY_STICKY                                0x0400
#define BP_SPI2_STATUS_CMD_IS_DONE                                        9
#define BM_SPI2_STATUS_CMD_IS_DONE                                   0x0200
#define BP_SPI2_STATUS_XMIT_COMPLETE                                      8
#define BM_SPI2_STATUS_XMIT_COMPLETE                                 0x0100
#define BP_SPI2_STATUS_RX_FIFO_HIT_LEVEL                                  7
#define BM_SPI2_STATUS_RX_FIFO_HIT_LEVEL                             0x0080
#define BP_SPI2_STATUS_TXFIFO_HAS_LEVEL_SPACE                             6
#define BM_SPI2_STATUS_TXFIFO_HAS_LEVEL_SPACE                        0x0040
#define BP_SPI2_STATUS_RXFIFO_HAS_1DATA                                   5
#define BM_SPI2_STATUS_RXFIFO_HAS_1DATA                              0x0020
#define BP_SPI2_STATUS_TXFIFO_HAS_1SPACE                                  4
#define BM_SPI2_STATUS_TXFIFO_HAS_1SPACE                             0x0010
#define BP_SPI2_STATUS_CS_SEL                                             2
#define BM_SPI2_STATUS_CS_SEL                                        0x000C
#define BP_SPI2_STATUS_HOLD_CS                                            1
#define BM_SPI2_STATUS_HOLD_CS                                       0x0002
#define BP_SPI2_STATUS_START_BUSY                                         0
#define BM_SPI2_STATUS_START_BUSY                                    0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi2_tx_fifo_debug_u
{
  uint16_t V;
  struct reg_spi2_tx_fifo_debug_s
  {
    uint16_t ENTRIES             :5;
    uint16_t RSVD0               :1;
    uint16_t OFLOW               :1;
    uint16_t UFLOW               :1;
    uint16_t MAX_ENTRIES         :5;
    uint16_t RSVD1               :3;
  }BF;
} reg_spi2_tx_fifo_debug_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI2_TX_FIFO_DEBUG           (*(volatile uint16_t chess_storage(IOMEM)*)((SPI2_BASE_ADDRESS + 0x10)))
#define REG_SPI2_TX_FIFO_DEBUG_ADDR      (SPI2_BASE_ADDRESS + 0x10)
#define BP_SPI2_TX_FIFO_DEBUG_RSVD0                                      13
#define BM_SPI2_TX_FIFO_DEBUG_RSVD0                                  0xE000
#define BP_SPI2_TX_FIFO_DEBUG_MAX_ENTRIES                                 8
#define BM_SPI2_TX_FIFO_DEBUG_MAX_ENTRIES                            0x1F00
#define BP_SPI2_TX_FIFO_DEBUG_UFLOW                                       7
#define BM_SPI2_TX_FIFO_DEBUG_UFLOW                                  0x0080
#define BP_SPI2_TX_FIFO_DEBUG_OFLOW                                       6
#define BM_SPI2_TX_FIFO_DEBUG_OFLOW                                  0x0040
#define BP_SPI2_TX_FIFO_DEBUG_RSVD1                                       5
#define BM_SPI2_TX_FIFO_DEBUG_RSVD1                                  0x0020
#define BP_SPI2_TX_FIFO_DEBUG_ENTRIES                                     0
#define BM_SPI2_TX_FIFO_DEBUG_ENTRIES                                0x001F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi2_rx_fifo_debug_u
{
  uint16_t V;
  struct reg_spi2_rx_fifo_debug_s
  {
    uint16_t ENTRIES             :5;
    uint16_t SPI_RDY             :1;
    uint16_t OFLOW               :1;
    uint16_t UFLOW               :1;
    uint16_t MAX_ENTRIES         :5;
    uint16_t RSVD0               :3;
  }BF;
} reg_spi2_rx_fifo_debug_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI2_RX_FIFO_DEBUG           (*(volatile uint16_t chess_storage(IOMEM)*)((SPI2_BASE_ADDRESS + 0x14)))
#define REG_SPI2_RX_FIFO_DEBUG_ADDR      (SPI2_BASE_ADDRESS + 0x14)
#define BP_SPI2_RX_FIFO_DEBUG_RSVD0                                      13
#define BM_SPI2_RX_FIFO_DEBUG_RSVD0                                  0xE000
#define BP_SPI2_RX_FIFO_DEBUG_MAX_ENTRIES                                 8
#define BM_SPI2_RX_FIFO_DEBUG_MAX_ENTRIES                            0x1F00
#define BP_SPI2_RX_FIFO_DEBUG_UFLOW                                       7
#define BM_SPI2_RX_FIFO_DEBUG_UFLOW                                  0x0080
#define BP_SPI2_RX_FIFO_DEBUG_OFLOW                                       6
#define BM_SPI2_RX_FIFO_DEBUG_OFLOW                                  0x0040
#define BP_SPI2_RX_FIFO_DEBUG_SPI_RDY                                     5
#define BM_SPI2_RX_FIFO_DEBUG_SPI_RDY                                0x0020
#define BP_SPI2_RX_FIFO_DEBUG_ENTRIES                                     0
#define BM_SPI2_RX_FIFO_DEBUG_ENTRIES                                0x001F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi2_rxdrop_cnt_u
{
  uint16_t V;
  struct reg_spi2_rxdrop_cnt_s
  {
    uint16_t COUNT               :16;
  }BF;
} reg_spi2_rxdrop_cnt_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI2_RXDROP_CNT           (*(volatile uint16_t chess_storage(IOMEM)*)((SPI2_BASE_ADDRESS + 0x18)))
#define REG_SPI2_RXDROP_CNT_ADDR      (SPI2_BASE_ADDRESS + 0x18)
#define BP_SPI2_RXDROP_CNT_COUNT                                          0
#define BM_SPI2_RXDROP_CNT_COUNT                                     0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi2_general_debug_u
{
  uint16_t V;
  struct reg_spi2_general_debug_s
  {
    uint16_t STATE_REG           :4;
    uint16_t SPI_CLK             :1;
    uint16_t SPI_CS_N            :1;
    uint16_t SPI_MOSI            :1;
    uint16_t SPI_MISO            :1;
    uint16_t BB_SPI_CLK          :1;
    uint16_t BB_SPI_CS_N         :1;
    uint16_t BB_SPI_MOSI         :1;
    uint16_t EN_BIT_BANG         :1;
    uint16_t RSVD0               :4;
  }BF;
} reg_spi2_general_debug_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI2_GENERAL_DEBUG           (*(volatile uint16_t chess_storage(IOMEM)*)((SPI2_BASE_ADDRESS + 0x1C)))
#define REG_SPI2_GENERAL_DEBUG_ADDR      (SPI2_BASE_ADDRESS + 0x1C)
#define BP_SPI2_GENERAL_DEBUG_RSVD0                                      12
#define BM_SPI2_GENERAL_DEBUG_RSVD0                                  0xF000
#define BP_SPI2_GENERAL_DEBUG_EN_BIT_BANG                                11
#define BM_SPI2_GENERAL_DEBUG_EN_BIT_BANG                            0x0800
#define BP_SPI2_GENERAL_DEBUG_BB_SPI_MOSI                                10
#define BM_SPI2_GENERAL_DEBUG_BB_SPI_MOSI                            0x0400
#define BP_SPI2_GENERAL_DEBUG_BB_SPI_CS_N                                 9
#define BM_SPI2_GENERAL_DEBUG_BB_SPI_CS_N                            0x0200
#define BP_SPI2_GENERAL_DEBUG_BB_SPI_CLK                                  8
#define BM_SPI2_GENERAL_DEBUG_BB_SPI_CLK                             0x0100
#define BP_SPI2_GENERAL_DEBUG_SPI_MISO                                    7
#define BM_SPI2_GENERAL_DEBUG_SPI_MISO                               0x0080
#define BP_SPI2_GENERAL_DEBUG_SPI_MOSI                                    6
#define BM_SPI2_GENERAL_DEBUG_SPI_MOSI                               0x0040
#define BP_SPI2_GENERAL_DEBUG_SPI_CS_N                                    5
#define BM_SPI2_GENERAL_DEBUG_SPI_CS_N                               0x0020
#define BP_SPI2_GENERAL_DEBUG_SPI_CLK                                     4
#define BM_SPI2_GENERAL_DEBUG_SPI_CLK                                0x0010
#define BP_SPI2_GENERAL_DEBUG_STATE_REG                                   0
#define BM_SPI2_GENERAL_DEBUG_STATE_REG                              0x000F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi2_int_en_u
{
  uint16_t V;
  struct reg_spi2_int_en_s
  {
    uint16_t RSVD0               :4;
    uint16_t TX_DATA_EN0         :1;
    uint16_t RX_DATA_EN0         :1;
    uint16_t TXFIFO_HAS_LEVEL_SPACE_EN0:1;
    uint16_t RX_FIFO_HIT_LEVEL_EN0:1;
    uint16_t XMIT_COMPLETE_EN0   :1;
    uint16_t CMD_IS_DONE_EN0     :1;
    uint16_t PE_BUSY_STICKY_EN0  :1;
    uint16_t NE_BUSY_STICKY_EN0  :1;
    uint16_t TX_DATA_EN2         :1;
    uint16_t RX_DATA_EN1         :1;
    uint16_t TXFIFO_HAS_LEVEL_SPACE_EN2:1;
    uint16_t RX_FIFO_HIT_LEVEL_EN1:1;
  }BF;
} reg_spi2_int_en_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI2_INT_EN           (*(volatile uint16_t chess_storage(IOMEM)*)((SPI2_BASE_ADDRESS + 0x20)))
#define REG_SPI2_INT_EN_ADDR      (SPI2_BASE_ADDRESS + 0x20)
#define BP_SPI2_INT_EN_RX_FIFO_HIT_LEVEL_EN1                             15
#define BM_SPI2_INT_EN_RX_FIFO_HIT_LEVEL_EN1                         0x8000
#define BP_SPI2_INT_EN_TXFIFO_HAS_LEVEL_SPACE_EN2                        14
#define BM_SPI2_INT_EN_TXFIFO_HAS_LEVEL_SPACE_EN2                    0x4000
#define BP_SPI2_INT_EN_RX_DATA_EN1                                       13
#define BM_SPI2_INT_EN_RX_DATA_EN1                                   0x2000
#define BP_SPI2_INT_EN_TX_DATA_EN2                                       12
#define BM_SPI2_INT_EN_TX_DATA_EN2                                   0x1000
#define BP_SPI2_INT_EN_NE_BUSY_STICKY_EN0                                11
#define BM_SPI2_INT_EN_NE_BUSY_STICKY_EN0                            0x0800
#define BP_SPI2_INT_EN_PE_BUSY_STICKY_EN0                                10
#define BM_SPI2_INT_EN_PE_BUSY_STICKY_EN0                            0x0400
#define BP_SPI2_INT_EN_CMD_IS_DONE_EN0                                    9
#define BM_SPI2_INT_EN_CMD_IS_DONE_EN0                               0x0200
#define BP_SPI2_INT_EN_XMIT_COMPLETE_EN0                                  8
#define BM_SPI2_INT_EN_XMIT_COMPLETE_EN0                             0x0100
#define BP_SPI2_INT_EN_RX_FIFO_HIT_LEVEL_EN0                              7
#define BM_SPI2_INT_EN_RX_FIFO_HIT_LEVEL_EN0                         0x0080
#define BP_SPI2_INT_EN_TXFIFO_HAS_LEVEL_SPACE_EN0                         6
#define BM_SPI2_INT_EN_TXFIFO_HAS_LEVEL_SPACE_EN0                    0x0040
#define BP_SPI2_INT_EN_RX_DATA_EN0                                        5
#define BM_SPI2_INT_EN_RX_DATA_EN0                                   0x0020
#define BP_SPI2_INT_EN_TX_DATA_EN0                                        4
#define BM_SPI2_INT_EN_TX_DATA_EN0                                   0x0010
#define BP_SPI2_INT_EN_RSVD0                                              0
#define BM_SPI2_INT_EN_RSVD0                                         0x000F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi2_txrx_2byte_fifo_data_u
{
  uint16_t V;
  struct reg_spi2_txrx_2byte_fifo_data_s
  {
    uint16_t DATA                :16;
  }BF;
} reg_spi2_txrx_2byte_fifo_data_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI2_TXRX_2BYTE_FIFO_DATA           (*(volatile uint16_t chess_storage(IOMEM)*)((SPI2_BASE_ADDRESS + 0x24)))
#define REG_SPI2_TXRX_2BYTE_FIFO_DATA_ADDR      (SPI2_BASE_ADDRESS + 0x24)
#define BP_SPI2_TXRX_2BYTE_FIFO_DATA_DATA                                 0
#define BM_SPI2_TXRX_2BYTE_FIFO_DATA_DATA                            0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi2_config2_u
{
  uint16_t V;
  struct reg_spi2_config2_s
  {
    uint16_t RX_SAMPLE_TIME      :2;
    uint16_t RSVD0               :1;
    uint16_t EN_LOOPBACK         :1;
    uint16_t DISABLE_MISO_METAFLOP:1;
    uint16_t STALL_IF_RXFULL     :1;
    uint16_t CLR_STICKY          :1;
    uint16_t SOFT_RST            :1;
    uint16_t RSVD1               :1;
    uint16_t AGGR_CLK_GATING     :1;
    uint16_t TX_BYTE2_END        :1;
    uint16_t RX_BYTE2_END        :1;
    uint16_t RSVD2               :4;
  }BF;
} reg_spi2_config2_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI2_CONFIG2           (*(volatile uint16_t chess_storage(IOMEM)*)((SPI2_BASE_ADDRESS + 0x28)))
#define REG_SPI2_CONFIG2_ADDR      (SPI2_BASE_ADDRESS + 0x28)
#define BP_SPI2_CONFIG2_RSVD0                                            12
#define BM_SPI2_CONFIG2_RSVD0                                        0xF000
#define BP_SPI2_CONFIG2_RX_BYTE2_END                                     11
#define BM_SPI2_CONFIG2_RX_BYTE2_END                                 0x0800
#define BP_SPI2_CONFIG2_TX_BYTE2_END                                     10
#define BM_SPI2_CONFIG2_TX_BYTE2_END                                 0x0400
#define BP_SPI2_CONFIG2_AGGR_CLK_GATING                                   9
#define BM_SPI2_CONFIG2_AGGR_CLK_GATING                              0x0200
#define BP_SPI2_CONFIG2_RSVD1                                             8
#define BM_SPI2_CONFIG2_RSVD1                                        0x0100
#define BP_SPI2_CONFIG2_SOFT_RST                                          7
#define BM_SPI2_CONFIG2_SOFT_RST                                     0x0080
#define BP_SPI2_CONFIG2_CLR_STICKY                                        6
#define BM_SPI2_CONFIG2_CLR_STICKY                                   0x0040
#define BP_SPI2_CONFIG2_STALL_IF_RXFULL                                   5
#define BM_SPI2_CONFIG2_STALL_IF_RXFULL                              0x0020
#define BP_SPI2_CONFIG2_DISABLE_MISO_METAFLOP                             4
#define BM_SPI2_CONFIG2_DISABLE_MISO_METAFLOP                        0x0010
#define BP_SPI2_CONFIG2_EN_LOOPBACK                                       3
#define BM_SPI2_CONFIG2_EN_LOOPBACK                                  0x0008
#define BP_SPI2_CONFIG2_RSVD2                                             2
#define BM_SPI2_CONFIG2_RSVD2                                        0x0004
#define BP_SPI2_CONFIG2_RX_SAMPLE_TIME                                    0
#define BM_SPI2_CONFIG2_RX_SAMPLE_TIME                               0x0003

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi2_tx_dummy_byte_cnt_u
{
  uint16_t V;
  struct reg_spi2_tx_dummy_byte_cnt_s
  {
    uint16_t COUNT               :16;
  }BF;
} reg_spi2_tx_dummy_byte_cnt_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI2_TX_DUMMY_BYTE_CNT           (*(volatile uint16_t chess_storage(IOMEM)*)((SPI2_BASE_ADDRESS + 0x2C)))
#define REG_SPI2_TX_DUMMY_BYTE_CNT_ADDR      (SPI2_BASE_ADDRESS + 0x2C)
#define BP_SPI2_TX_DUMMY_BYTE_CNT_COUNT                                   0
#define BM_SPI2_TX_DUMMY_BYTE_CNT_COUNT                              0xFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi2_cs_config_u
{
  uint16_t V;
  struct reg_spi2_cs_config_s
  {
    uint16_t CS0_POL             :1;
    uint16_t CS1_POL             :1;
    uint16_t CS2_POL             :1;
    uint16_t CS3_POL             :1;
    uint16_t RSVD0               :12;
  }BF;
} reg_spi2_cs_config_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI2_CS_CONFIG           (*(volatile uint16_t chess_storage(IOMEM)*)((SPI2_BASE_ADDRESS + 0x30)))
#define REG_SPI2_CS_CONFIG_ADDR      (SPI2_BASE_ADDRESS + 0x30)
#define BP_SPI2_CS_CONFIG_RSVD0                                           4
#define BM_SPI2_CS_CONFIG_RSVD0                                      0xFFF0
#define BP_SPI2_CS_CONFIG_CS3_POL                                         3
#define BM_SPI2_CS_CONFIG_CS3_POL                                    0x0008
#define BP_SPI2_CS_CONFIG_CS2_POL                                         2
#define BM_SPI2_CS_CONFIG_CS2_POL                                    0x0004
#define BP_SPI2_CS_CONFIG_CS1_POL                                         1
#define BM_SPI2_CS_CONFIG_CS1_POL                                    0x0002
#define BP_SPI2_CS_CONFIG_CS0_POL                                         0
#define BM_SPI2_CS_CONFIG_CS0_POL                                    0x0001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi2_int_act_u
{
  uint16_t V;
  struct reg_spi2_int_act_s
  {
    uint16_t RSVD0               :4;
    uint16_t TX_DATA_ACT         :1;
    uint16_t RX_DATA_ACT         :1;
    uint16_t TXFIFO_HAS_LEVEL_SPACE_ACT:1;
    uint16_t RX_FIFO_HIT_LEVEL_ACT:1;
    uint16_t XMIT_COMPLETE_ACT   :1;
    uint16_t CMD_IS_DONE_ACT     :1;
    uint16_t PE_BUSY_STICKY_ACT  :1;
    uint16_t NE_BUSY_STICKY_ACT  :1;
    uint16_t RSVD1               :4;
  }BF;
} reg_spi2_int_act_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI2_INT_ACT           (*(volatile uint16_t chess_storage(IOMEM)*)((SPI2_BASE_ADDRESS + 0x38)))
#define REG_SPI2_INT_ACT_ADDR      (SPI2_BASE_ADDRESS + 0x38)
#define BP_SPI2_INT_ACT_RSVD0                                            12
#define BM_SPI2_INT_ACT_RSVD0                                        0xF000
#define BP_SPI2_INT_ACT_NE_BUSY_STICKY_ACT                               11
#define BM_SPI2_INT_ACT_NE_BUSY_STICKY_ACT                           0x0800
#define BP_SPI2_INT_ACT_PE_BUSY_STICKY_ACT                               10
#define BM_SPI2_INT_ACT_PE_BUSY_STICKY_ACT                           0x0400
#define BP_SPI2_INT_ACT_CMD_IS_DONE_ACT                                   9
#define BM_SPI2_INT_ACT_CMD_IS_DONE_ACT                              0x0200
#define BP_SPI2_INT_ACT_XMIT_COMPLETE_ACT                                 8
#define BM_SPI2_INT_ACT_XMIT_COMPLETE_ACT                            0x0100
#define BP_SPI2_INT_ACT_RX_FIFO_HIT_LEVEL_ACT                             7
#define BM_SPI2_INT_ACT_RX_FIFO_HIT_LEVEL_ACT                        0x0080
#define BP_SPI2_INT_ACT_TXFIFO_HAS_LEVEL_SPACE_ACT                        6
#define BM_SPI2_INT_ACT_TXFIFO_HAS_LEVEL_SPACE_ACT                   0x0040
#define BP_SPI2_INT_ACT_RX_DATA_ACT                                       5
#define BM_SPI2_INT_ACT_RX_DATA_ACT                                  0x0020
#define BP_SPI2_INT_ACT_TX_DATA_ACT                                       4
#define BM_SPI2_INT_ACT_TX_DATA_ACT                                  0x0010
#define BP_SPI2_INT_ACT_RSVD1                                             0
#define BM_SPI2_INT_ACT_RSVD1                                        0x000F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi2_slave_mode_u
{
  uint16_t V;
  struct reg_spi2_slave_mode_s
  {
    uint16_t SLAVE_EN            :1;
    uint16_t DISABLE_ALL         :1;
    uint16_t DISABLE_TX_FIFO     :1;
    uint16_t DISABLED_TX_FIFO_DATA:1;
    uint16_t RSVD0               :12;
  }BF;
} reg_spi2_slave_mode_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI2_SLAVE_MODE           (*(volatile uint16_t chess_storage(IOMEM)*)((SPI2_BASE_ADDRESS + 0x3C)))
#define REG_SPI2_SLAVE_MODE_ADDR      (SPI2_BASE_ADDRESS + 0x3C)
#define BP_SPI2_SLAVE_MODE_RSVD0                                          4
#define BM_SPI2_SLAVE_MODE_RSVD0                                     0xFFF0
#define BP_SPI2_SLAVE_MODE_DISABLED_TX_FIFO_DATA                          3
#define BM_SPI2_SLAVE_MODE_DISABLED_TX_FIFO_DATA                     0x0008
#define BP_SPI2_SLAVE_MODE_DISABLE_TX_FIFO                                2
#define BM_SPI2_SLAVE_MODE_DISABLE_TX_FIFO                           0x0004
#define BP_SPI2_SLAVE_MODE_DISABLE_ALL                                    1
#define BM_SPI2_SLAVE_MODE_DISABLE_ALL                               0x0002
#define BP_SPI2_SLAVE_MODE_SLAVE_EN                                       0
#define BM_SPI2_SLAVE_MODE_SLAVE_EN                                  0x0001


//-----------------------------------------------------------------------------

#ifdef __cplusplus
}
#endif

#endif //__REG_ETA_ECM3532_DSP_H__
