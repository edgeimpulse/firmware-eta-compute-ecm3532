/*
 * @file    reg_eta_ecm3532_m3.h
 * @author  DJW
 * @date    01/21/2020
 *
 * @brief This file contains reg_eta_ecm3532_m3 module implementations
 *
 * Copyright (C) 2020 Eta Compute, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef __REG_ETA_ECM3532_M3_H__
#define __REG_ETA_ECM3532_M3_H__

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include "reg.h"

//-------------------------------------------------------------------------
// This file is generated by mkregn.py v3.0.0 - DO NOT EDIT
//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
// Edit .def file and regenerate
//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
// Register Definition Data - Used to create this file - DO NOT DELETE
//-------------------------------------------------------------------------
/*
#define GPIO_BASE_ADDRESS 0x40010000

GPIO,CSR, (GPIO_BASE_ADDRESS + 0x0),32,RSVD2:12,M3_TICK_HI:4,RSVD1:15,TICK2GPIOIN:1:ENABLE=0x1|DISABLE=0x0
GPIO,M3_TICK, (GPIO_BASE_ADDRESS + 0x4),32,COUNT:32:CLEAR_AND_START=0x474f|FREEZE=0x4e4f|RESUME=0xaaaa
GPIO,XTERN_STATUSA, (GPIO_BASE_ADDRESS + 0x8),32,RSVD1:8,GPIO_PM_MODE:1:NORMAL=0x0|VALIDATION=0x1,FLUSH_FLASH:1,INFO_SECURE_BOOT:1,INFO_PRESERVE_FLASH:1,INFO_PRESERVE_SRAM:1,INFO_DEBUG_ENABLE:1,INFO_CUST_UNLOCK:1,INFO_ETA_UNLOCK:1,DSP_FREQ_TOG:1,M3_FREQ_TOG:1,RTC_TMR_INT:1,RTC_FLAG:1,UART1_RX_EMPTY:1,UART1_TX_FULL:1,UART0_RX_EMPTY:1,UART0_TX_FULL:1,WARM_START_MODE:8:NORMAL_COLD_START=0x0|FORCE_COLD_START_IN_FLASH=0x1
GPIO,DATA_IN, (GPIO_BASE_ADDRESS + 0xc),32,IO31:1,IO30:1,IO29:1,IO28:1,IO27:1,IO26:1,IO25:1,IO24:1,IO23:1,IO22:1,IO21:1,IO20:1,IO19:1,IO18:1,IO17:1,IO16:1,IO15:1,IO14:1,IO13:1,IO12:1,IO11:1,IO10:1,IO9:1,IO8:1,IO7:1,IO6:1,IO5:1,IO4:1,IO3:1,IO2:1,IO1:1,IO0:1
GPIO,DATA_OUT, (GPIO_BASE_ADDRESS + 0x10),32,IO31:1,IO30:1,IO29:1,IO28:1,IO27:1,IO26:1,IO25:1,IO24:1,IO23:1,IO22:1,IO21:1,IO20:1,IO19:1,IO18:1,IO17:1,IO16:1,IO15:1,IO14:1,IO13:1,IO12:1,IO11:1,IO10:1,IO9:1,IO8:1,IO7:1,IO6:1,IO5:1,IO4:1,IO3:1,IO2:1,IO1:1,IO0:1
GPIO,DATA_OUT_SET, (GPIO_BASE_ADDRESS + 0x14),32,IO31:1,IO30:1,IO29:1,IO28:1,IO27:1,IO26:1,IO25:1,IO24:1,IO23:1,IO22:1,IO21:1,IO20:1,IO19:1,IO18:1,IO17:1,IO16:1,IO15:1,IO14:1,IO13:1,IO12:1,IO11:1,IO10:1,IO9:1,IO8:1,IO7:1,IO6:1,IO5:1,IO4:1,IO3:1,IO2:1,IO1:1,IO0:1
GPIO,DATA_OUT_CLR, (GPIO_BASE_ADDRESS + 0x18),32,IO31:1,IO30:1,IO29:1,IO28:1,IO27:1,IO26:1,IO25:1,IO24:1,IO23:1,IO22:1,IO21:1,IO20:1,IO19:1,IO18:1,IO17:1,IO16:1,IO15:1,IO14:1,IO13:1,IO12:1,IO11:1,IO10:1,IO9:1,IO8:1,IO7:1,IO6:1,IO5:1,IO4:1,IO3:1,IO2:1,IO1:1,IO0:1
GPIO,DATA_OUT_TOG, (GPIO_BASE_ADDRESS + 0x1c),32,IO31:1,IO30:1,IO29:1,IO28:1,IO27:1,IO26:1,IO25:1,IO24:1,IO23:1,IO22:1,IO21:1,IO20:1,IO19:1,IO18:1,IO17:1,IO16:1,IO15:1,IO14:1,IO13:1,IO12:1,IO11:1,IO10:1,IO9:1,IO8:1,IO7:1,IO6:1,IO5:1,IO4:1,IO3:1,IO2:1,IO1:1,IO0:1
GPIO,DATA_ENABLE, (GPIO_BASE_ADDRESS + 0x20),32,IO31:1,IO30:1,IO29:1,IO28:1,IO27:1,IO26:1,IO25:1,IO24:1,IO23:1,IO22:1,IO21:1,IO20:1,IO19:1,IO18:1,IO17:1,IO16:1,IO15:1,IO14:1,IO13:1,IO12:1,IO11:1,IO10:1,IO9:1,IO8:1,IO7:1,IO6:1,IO5:1,IO4:1,IO3:1,IO2:1,IO1:1,IO0:1
GPIO,DATA_ENABLE_SET, (GPIO_BASE_ADDRESS + 0x24),32,IO31:1,IO30:1,IO29:1,IO28:1,IO27:1,IO26:1,IO25:1,IO24:1,IO23:1,IO22:1,IO21:1,IO20:1,IO19:1,IO18:1,IO17:1,IO16:1,IO15:1,IO14:1,IO13:1,IO12:1,IO11:1,IO10:1,IO9:1,IO8:1,IO7:1,IO6:1,IO5:1,IO4:1,IO3:1,IO2:1,IO1:1,IO0:1
GPIO,DATA_ENABLE_CLR, (GPIO_BASE_ADDRESS + 0x28),32,IO31:1,IO30:1,IO29:1,IO28:1,IO27:1,IO26:1,IO25:1,IO24:1,IO23:1,IO22:1,IO21:1,IO20:1,IO19:1,IO18:1,IO17:1,IO16:1,IO15:1,IO14:1,IO13:1,IO12:1,IO11:1,IO10:1,IO9:1,IO8:1,IO7:1,IO6:1,IO5:1,IO4:1,IO3:1,IO2:1,IO1:1,IO0:1
GPIO,DATA_ENABLE_TOG, (GPIO_BASE_ADDRESS + 0x2c),32,IO31:1,IO30:1,IO29:1,IO28:1,IO27:1,IO26:1,IO25:1,IO24:1,IO23:1,IO22:1,IO21:1,IO20:1,IO19:1,IO18:1,IO17:1,IO16:1,IO15:1,IO14:1,IO13:1,IO12:1,IO11:1,IO10:1,IO9:1,IO8:1,IO7:1,IO6:1,IO5:1,IO4:1,IO3:1,IO2:1,IO1:1,IO0:1
GPIO,SPEC_READ_A, (GPIO_BASE_ADDRESS + 0x30),32,VALUE:32
GPIO,SPEC_READ_B, (GPIO_BASE_ADDRESS + 0x34),32,VALUE:32
GPIO,SPEC_READ_C, (GPIO_BASE_ADDRESS + 0x38),32,VALUE:32
GPIO,SPEC_READ_D, (GPIO_BASE_ADDRESS + 0x3c),32,VALUE:32
GPIO,SPEC_READ_STAT, (GPIO_BASE_ADDRESS + 0x40),32,RSVD:28,SPEC_D:1:READY=0x1,SPEC_C:1:READY=0x1,SPEC_B:1:READY=0x1,SPEC_A:1:READY=0x1
GPIO,ASYNC_BUS, (GPIO_BASE_ADDRESS + 0x44),32,RST_AHB2PERIPH:1:RESET=0x1,RSVD2:17,RST_STATE_PWM:1:RESET=0x0|ACTIVE=0x1,RST_STATE_RTC:1:RESET=0x0|ACTIVE=0x1,RST_STATE_UST:1:RESET=0x0|ACTIVE=0x1,RST_STATE_GPIO_SOCCTRL:1:RESET=0x0|ACTIVE=0x1,RST_STATE_I2C:1:RESET=0x0|ACTIVE=0x1,RST_STATE_ADC:1:RESET=0x0|ACTIVE=0x1,RSVD1:2,RST_REQ_PWM:1:RESET=0x1,RST_REQ_RTC:1:RESET=0x1,RST_REQ_UST:1:RESET=0x1,RST_REQ_GPIO_SOCCTRL:1:RESET=0x1,RST_REQ_I2C:1:RESET=0x1,RST_REQ_ADC:1:RESET=0x1
GPIO,HFO_FREQ, (GPIO_BASE_ADDRESS + 0x48),32,RSVD2:7,FLAG:1,RSVD1:14,COUNT:10
GPIO,FLASH_INFO_RD_ENABLE, (GPIO_BASE_ADDRESS + 0x4c),32,VALUE:32
GPIO,FLASH_INFO_WRT_ENABLE, (GPIO_BASE_ADDRESS + 0x50),32,VALUE:32
GPIO,DEBUG0_READ_ONLY, (GPIO_BASE_ADDRESS + 0x54),32,VALUE:32
GPIO,DEBUG1_READ_ONLY, (GPIO_BASE_ADDRESS + 0x58),32,VALUE:32

#define PWM_BASE_ADDRESS 0x50000000

PWM,CTRL, (PWM_BASE_ADDRESS + 0x0),32,SFTRST:1:RST=0x1,RSVD3:6,CLKSRC:1:32KHZ=0x0|2MHZ=0x1,CLK_EN_OVR:1:ENABLE=0x1|DISABLE=0x0,RSVD2:10,CFIFO_INT:1:EN=0x1|DIS=0x0,CFIFO_LOW:4,DFLT3:1:HI=0x1|LO=0x0,DFLT2:1:HI=0x1|LO=0x0,DFLT1:1:HI=0x1|LO=0x0,DFLT0:1:HI=0x1|LO=0x0,RSVD1:4
PWM,MODE, (PWM_BASE_ADDRESS + 0x4),32,RSVD:20,SET3:1:SET=0x1,SET2:1:SET=0x1,SET1:1:SET=0x1,SET0:1:SET=0x1,MODE3:2:START=0x3|PSTOP=0x2|CSTOP=0x1|ISTOP=0x0,MODE2:2:START=0x3|PSTOP=0x2|CSTOP=0x1|ISTOP=0x0,MODE1:2:START=0x3|PSTOP=0x2|CSTOP=0x1|ISTOP=0x0,MODE0:2:START=0x3|PSTOP=0x2|CSTOP=0x1|ISTOP=0x0
PWM,STAT, (PWM_BASE_ADDRESS + 0x8),32,RSVD2:10,CFIFO_EMPTY:1:EMPTY=0x1,CFIFO_FULL:1:FULL=0x1,CFIFO_SIZE:4,STATE3:2:RUN=0x3|PSTOP=0x2|CSTOP=0x1|STOP=0x0,STATE2:2:RUN=0x3|PSTOP=0x2|CSTOP=0x1|STOP=0x0,STATE1:2:RUN=0x3|PSTOP=0x2|CSTOP=0x1|STOP=0x0,STATE0:2:RUN=0x3|PSTOP=0x2|CSTOP=0x1|STOP=0x0,RSVD1:4,VAL3:1:HI=0x1|LO=0x0,VAL2:1:HI=0x1|LO=0x0,VAL1:1:HI=0x1|LO=0x0,VAL0:1:HI=0x1|LO=0x0
PWM,INT_STAT, (PWM_BASE_ADDRESS + 0xc),32,RSVD:23,CFIFO_INT:1:INT=0x1,CYCLE_INT3:1:INT=0x1,CYCLE_INT2:1:INT=0x1,CYCLE_INT1:1:INT=0x1,CYCLE_INT0:1:INT=0x1,PROG_INT3:1:INT=0x1,PROG_INT2:1:INT=0x1,PROG_INT1:1:INT=0x1,PROG_INT0:1:INT=0x1
PWM,CHAN_CFG, (PWM_BASE_ADDRESS + 0x10),32,RSVD:16,SYNC7:1:EN=0x1|DIS=0x0,SYNC6:1:EN=0x1|DIS=0x0,SYNC5:1:EN=0x1|DIS=0x0,SYNC4:1:EN=0x1|DIS=0x0,SYNC3:1:EN=0x1|DIS=0x0,SYNC2:1:EN=0x1|DIS=0x0,SYNC1:1:EN=0x1|DIS=0x0,SYNC0:1:EN=0x1|DIS=0x0,DFLT7:1:HI=0x1|LO=0x0,DFLT6:1:HI=0x1|LO=0x0,DFLT5:1:HI=0x1|LO=0x0,DFLT4:1:HI=0x1|LO=0x0,DFLT3:1:HI=0x1|LO=0x0,DFLT2:1:HI=0x1|LO=0x0,DFLT1:1:HI=0x1|LO=0x0,DFLT0:1:HI=0x1|LO=0x0
PWM,CHAN_MUX, (PWM_BASE_ADDRESS + 0x14),32,RSVD:8,EN7:1:EN=0x1|DIS=0x0,EN6:1:EN=0x1|DIS=0x0,EN5:1:EN=0x1|DIS=0x0,EN4:1:EN=0x1|DIS=0x0,EN3:1:EN=0x1|DIS=0x0,EN2:1:EN=0x1|DIS=0x0,EN1:1:EN=0x1|DIS=0x0,EN0:1:EN=0x1|DIS=0x0,SEL7:2:PWM3=0x3|PWM2=0x2|PWM1=0x1|PWM0=0x0,SEL6:2:PWM3=0x3|PWM2=0x2|PWM1=0x1|PWM0=0x0,SEL5:2:PWM3=0x3|PWM2=0x2|PWM1=0x1|PWM0=0x0,SEL4:2:PWM3=0x3|PWM2=0x2|PWM1=0x1|PWM0=0x0,SEL3:2:PWM3=0x3|PWM2=0x2|PWM1=0x1|PWM0=0x0,SEL2:2:PWM3=0x3|PWM2=0x2|PWM1=0x1|PWM0=0x0,SEL1:2:PWM3=0x3|PWM2=0x2|PWM1=0x1|PWM0=0x0,SEL0:2:PWM3=0x3|PWM2=0x2|PWM1=0x1|PWM0=0x0
PWM,CFIFO, (PWM_BASE_ADDRESS + 0x18),32,SEL:2:PWM0=0x0|PWM1=0x1|PWM2=0x2|PWM3=0x3,REG:2:CFG=0x0|PER=0x1|PSTRT=0x2|PEND=0x3,RSVD:3,WAIT:1:EN=0x1|DIS=0x0,DATA:24:CYCLE_INT=0x80000|PROG_INT=0x40000|PULSE_DRIVE=0x20000|ONESHOT=0x10000
PWM,CFG0, (PWM_BASE_ADDRESS + 0x1c),32,RSVD:12,CYCLE_INT:1:EN=0x1|DIS=0x0,PROG_INT:1:EN=0x1|DIS=0x0,PULSE_DRIVE:1:HI=0x1|LO=0x0,ONESHOT:1:EN=0x1|DIS=0x0,COUNT:16
PWM,CFG1, (PWM_BASE_ADDRESS + 0x20),32,RSVD:12,CYCLE_INT:1:EN=0x1|DIS=0x0,PROG_INT:1:EN=0x1|DIS=0x0,PULSE_DRIVE:1:HI=0x1|LO=0x0,ONESHOT:1:EN=0x1|DIS=0x0,COUNT:16
PWM,CFG2, (PWM_BASE_ADDRESS + 0x24),32,RSVD:12,CYCLE_INT:1:EN=0x1|DIS=0x0,PROG_INT:1:EN=0x1|DIS=0x0,PULSE_DRIVE:1:HI=0x1|LO=0x0,ONESHOT:1:EN=0x1|DIS=0x0,COUNT:16
PWM,CFG3, (PWM_BASE_ADDRESS + 0x28),32,RSVD:12,CYCLE_INT:1:EN=0x1|DIS=0x0,PROG_INT:1:EN=0x1|DIS=0x0,PULSE_DRIVE:1:HI=0x1|LO=0x0,ONESHOT:1:EN=0x1|DIS=0x0,COUNT:16
PWM,PER0, (PWM_BASE_ADDRESS + 0x2c),32,RSVD:8,PER:24
PWM,PER1, (PWM_BASE_ADDRESS + 0x30),32,RSVD:8,PER:24
PWM,PER2, (PWM_BASE_ADDRESS + 0x34),32,RSVD:8,PER:24
PWM,PER3, (PWM_BASE_ADDRESS + 0x38),32,RSVD:8,PER:24
PWM,PSTRT0, (PWM_BASE_ADDRESS + 0x3c),32,RSVD:8,PSTRT:24
PWM,PSTRT1, (PWM_BASE_ADDRESS + 0x40),32,RSVD:8,PSTRT:24
PWM,PSTRT2, (PWM_BASE_ADDRESS + 0x44),32,RSVD:8,PSTRT:24
PWM,PSTRT3, (PWM_BASE_ADDRESS + 0x48),32,RSVD:8,PSTRT:24
PWM,PEND0, (PWM_BASE_ADDRESS + 0x4c),32,RSVD:8,PEND:24
PWM,PEND1, (PWM_BASE_ADDRESS + 0x50),32,RSVD:8,PEND:24
PWM,PEND2, (PWM_BASE_ADDRESS + 0x54),32,RSVD:8,PEND:24
PWM,PEND3, (PWM_BASE_ADDRESS + 0x58),32,RSVD:8,PEND:24
PWM,DBG_READ_ONLY, (PWM_BASE_ADDRESS + 0x5c),32,VALUE:32

#define RTC_BASE_ADDRESS 0x50010000

RTC,AO_CSR, (RTC_BASE_ADDRESS + 0x0),32,RSVD2:16,RSVD1:8,WARM_START_MODE:8
RTC,AO_REVID, (RTC_BASE_ADDRESS + 0x4),32,REV_ALL_LAYER:4,REV_POLY:4,REV_M6:4,REV_M5:4,REV_M4:4,REV_M3:4,REV_M2:4,REV_M1:4
RTC,CSRA, (RTC_BASE_ADDRESS + 0x20),32,RSVD2:17,PER_MINUTE:1,PER_SECOND:1,MATCH_DAY_DATE:1,MATCH_MONTHS:1,MATCH_HOURS:1,MATCH_MINUTES:1,MATCH_SECONDS:1,RSVD1:6,INT_ENABLE:1,INT_STAT:1
RTC,CSRB, (RTC_BASE_ADDRESS + 0x24),32,RSVD2:17,PER_MINUTE:1,PER_SECOND:1,MATCH_DAY_DATE:1,MATCH_MONTHS:1,MATCH_HOURS:1,MATCH_MINUTES:1,MATCH_SECONDS:1,RSVD1:6,INT_ENABLE:1,INT_STAT:1
RTC,TODA, (RTC_BASE_ADDRESS + 0x28),32,MONTH:5,DATE:6,HOURS:6,MINUTES:7,RSVD1:1,SECONDS:7
RTC,TODB, (RTC_BASE_ADDRESS + 0x2c),32,RSVD3:7,TWELVE_HOUR:1,RSVD2:7,CENTURY:1,RSVD1:5,DAY:3,YEAR:8
RTC,ALARMA, (RTC_BASE_ADDRESS + 0x30),32,MONTH:5,DATE:6,DAY:1,HOURS:6,MINUTES:7,SECONDS:7
RTC,ALARMB, (RTC_BASE_ADDRESS + 0x34),32,MONTH:5,DATE:6,DAY:1,HOURS:6,MINUTES:7,SECONDS:7
RTC,WDT_COUNTER, (RTC_BASE_ADDRESS + 0x40),32,RSVD:12,COUNT:20
RTC,WDT_ALARM, (RTC_BASE_ADDRESS + 0x44),32,INT_STAT:1:CLEAR=0x1,RESET_REQ:1:CLEAR=0x0|SET=0x1,RUNNING:1,RSVD2:3,PWRACK:1,PWRREQ:1,IRQ_EN:1:ENABLE=0x1|DISABLE=0x0,POR:1:ENABLE=0x1|DISABLE=0x0,RESET:1:ENABLE=0x1|DISABLE=0x0,WDT_RUN:1:ENABLE=0x1|DISABLE=0x0,VALUE:20
RTC,WDT_RELOAD, (RTC_BASE_ADDRESS + 0x48),32,RSVD:12,VALUE:20
RTC,TMR, (RTC_BASE_ADDRESS + 0x50),32,RSVD2:3,TESTMODE:1:DECREMENT=0x0|RIGHT_SHIFT=0x1,PERIODIC:1:ONESHOT=0x0|RUN=0x1,TIMER:1:STOP=0x0|RUN=0x1,INT_ENABLE:1,INT_STAT:1,RSVD1:4,COUNT:20
RTC,TMR_RELOAD, (RTC_BASE_ADDRESS + 0x54),32,RSVD:12,COUNT:20
RTC,SEND_POR, (RTC_BASE_ADDRESS + 0x58),32,KEY:32
RTC,UNLOCK_DEBUG, (RTC_BASE_ADDRESS + 0x5c),32,KEY:32
RTC,PWR, (RTC_BASE_ADDRESS + 0x60),32,POWER_DOWN:1,FLASH_PWR_UP_CMPLT:1,WAKE_PIN_STATE:1,ADC_PWR_STATE:1,DSP_PWR_STATE:1,FLASH_V25:1,FLASH_PDM:1,FLASH_VREF:1,MEM_BUCK_FORCE:1,M3_BUCK_FORCE:1,M3_FLASH_FORCE:1,M3_SRAM4567_FORCE:1,M3_SRAM23_FORCE:1,M3_SRAM1_FORCE:1,M3_SRAM0_FORCE:1,PERIPH_FORCE:1,RSVD2:2,GPIO_FROZEN:1,M3_FLASH:1,M3_SRAM4567:1,M3_SRAM23:1,M3_SRAM1:1,M3_SRAM0:1,RSVD1:1,DSP_BUCK:1,MEM_BUCK:1,M3_BUCK:1,ADC:1,DSP:1,M3:1,PERIPH:1
RTC,PWR_SET, (RTC_BASE_ADDRESS + 0x64),32,POWER_DOWN:1,RSVD3:4,FLASH_V25:1,FLASH_PDM:1,FLASH_VREF:1,MEM_BUCK_FORCE:1,M3_BUCK_FORCE:1,M3_FLASH_FORCE:1,M3_SRAM4567_FORCE:1,M3_SRAM23_FORCE:1,M3_SRAM1_FORCE:1,M3_SRAM0_FORCE:1,PERIPH_FORCE:1,RSVD2:2,GPIO_FROZEN:1,M3_FLASH:1,M3_SRAM4567:1,M3_SRAM23:1,M3_SRAM1:1,M3_SRAM0:1,RSVD1:1,DSP_BUCK:1,MEM_BUCK:1,M3_BUCK:1,ADC:1,DSP:1,M3:1,PERIPH:1
RTC,PWR_CLEAR, (RTC_BASE_ADDRESS + 0x68),32,POWER_DOWN:1,RSVD3:4,FLASH_V25:1,FLASH_PDM:1,FLASH_VREF:1,MEM_BUCK_FORCE:1,M3_BUCK_FORCE:1,M3_FLASH_FORCE:1,M3_SRAM4567_FORCE:1,M3_SRAM23_FORCE:1,M3_SRAM1_FORCE:1,M3_SRAM0_FORCE:1,PERIPH_FORCE:1,RSVD2:2,GPIO_FROZEN:1,M3_FLASH:1,M3_SRAM4567:1,M3_SRAM23:1,M3_SRAM1:1,M3_SRAM0:1,RSVD1:1,DSP_BUCK:1,MEM_BUCK:1,M3_BUCK:1,ADC:1,DSP:1,M3:1,PERIPH:1
RTC,OSC_CSR, (RTC_BASE_ADDRESS + 0x6c),32,HFO_CLK_GATE:1,RSVD2:2,BUCK_HF_CLK_SRC:1,DSP_OSC_DLY_SEL:2,M3_OSC_DLY_SEL:2,HFO_TRIM:8,RSVD1:3,LFO_3NA_DIS:1,LFO_36NA_DIS:1,LFO_36na_TRIM:3,LFO_TRIM:8
RTC,PMIC_AO_CSR, (RTC_BASE_ADDRESS + 0x70),32,RSVD2:2,WRITE:1,SEL_OSC:1:HFO=0x0|XTAL=0x1,SEL_OSC_DIV:3:1BY1=0x0|1BY2=0x1|1BY4=0x2|1BY8=0x3|1BY16=0x4|1BY32=0x5|1BY64=0x6|1BY128=0x7,RSVD1:1,BYPASS_PU:1:NORMAL=0x0|OVERRIDE=0x1,SEL_REF_EXT:1:INITIAL=0x0|NORMAL=0x1,OP_MODE:3:VOLTAGE_600MV=0x0|VOLTAGE_700MV=0x1|VOLTAGE_900MV=0x2|VOLTAGE_1200MV=0x3|FREQUENCY_MODE=0x4|FREQ_VMIN=0x5|FREQ_VMAX=0x6|FREQUENCY_NO_VLIM=0x7,VREG_TRIM:3,SEL_PD:8,PU_BYPASS:8
RTC,PMIC_MEM_CSR, (RTC_BASE_ADDRESS + 0x74),32,READY:1,STABLE:1,WRITE:1,SEL_OSC:1:HFO=0x0|XTAL=0x1,SEL_OSC_DIV:3:1BY1=0x0|1BY2=0x1|1BY4=0x2|1BY8=0x3|1BY16=0x4|1BY32=0x5|1BY64=0x6|1BY128=0x7,RSVD1:1,BYPASS_PU:1:NORMAL=0x0|OVERRIDE=0x1,SEL_REF_EXT:1:INITIAL=0x0|NORMAL=0x1,OP_MODE:3:VOLTAGE_600MV=0x0|VOLTAGE_700MV=0x1|VOLTAGE_900MV=0x2|VOLTAGE_1200MV=0x3|FREQUENCY_MODE=0x4|FREQ_VMIN=0x5|FREQ_VMAX=0x6|FREQUENCY_NO_VLIM=0x7,VREG_TRIM:3,SEL_PD:8,PU_BYPASS:8
RTC,PMIC_M3_CSR, (RTC_BASE_ADDRESS + 0x78),32,READY:1,STABLE:1,WRITE:1,SEL_OSC:1:HFO=0x0|XTAL=0x1,SEL_OSC_DIV:3:1BY1=0x0|1BY2=0x1|1BY4=0x2|1BY8=0x3|1BY16=0x4|1BY32=0x5|1BY64=0x6|1BY128=0x7,SEL_VREG:1:REG_OUTPUT=0x0|POST_SWITCH=0x1,FMODE_RST_L_N:1:RESET=0x1|NORMAL=0x0,SEL_REF_EXT:1:INITIAL=0x0|NORMAL=0x1,OP_MODE:3:VOLTAGE_600MV=0x0|VOLTAGE_700MV=0x1|VOLTAGE_900MV=0x2|VOLTAGE_1200MV=0x3|FREQUENCY_MODE=0x4|FREQ_VMIN=0x5|FREQ_VMAX=0x6|FREQUENCY_NO_VLIM=0x7,VREG_TRIM:3,SEL_PD:8,PU_BYPASS:8
RTC,PMIC_M3_CSR2, (RTC_BASE_ADDRESS + 0x7c),32,RSVD:24,FREQ_TARGET:8
RTC,LDO_CSR, (RTC_BASE_ADDRESS + 0x80),32,RSVD2:22,VREF_TRIM:6,RSVD1:3,LDO_BALLAST:1:DISABLE=0x0|ENABLE=0x1
RTC,PMIC_FREF_AO_CSR, (RTC_BASE_ADDRESS + 0x84),32,RSVD4:4,PMIC_DSP_CLK_SRC:1:XTAL=0x0|HFO=0x1,BUCK_DSP_SEL_LOW:3:1BY1=0x0|1BY2=0x1|1BY4=0x2|1BY8=0x3|1BY16=0x4|1BY32=0x5|1BY64=0x6|1BY128=0x7,RSVD3:4,PMIC_M3_CLK_SRC:1:XTAL=0x0|HFO=0x1,PMIC_M3_SEL_LOW:3:1BY1=0x0|1BY2=0x1|1BY4=0x2|1BY8=0x3|1BY16=0x4|1BY32=0x5|1BY64=0x6|1BY128=0x7,RSVD2:4,PMIC_MEM_CLK_SRC:1:XTAL=0x0|HFO=0x1,PMIC_MEM_SEL_LOW:3:1BY1=0x0|1BY2=0x1|1BY4=0x2|1BY8=0x3|1BY16=0x4|1BY32=0x5|1BY64=0x6|1BY128=0x7,RSVD1:4,PMIC_AO_CLK_SRC:1:XTAL=0x0|HFO=0x1,PMIC_AO_SEL_LOW:3:1BY1=0x0|1BY2=0x1|1BY4=0x2|1BY8=0x3|1BY16=0x4|1BY32=0x5|1BY64=0x6|1BY128=0x7
RTC,BUCK_DSP_CSR, (RTC_BASE_ADDRESS + 0x88),32,READY:1,STABLE:1,WRITE:1,SEL_OSC:1:HFO=0x0|XTAL=0x1,SEL_OSC_DIV:3:1BY1=0x0|1BY2=0x1|1BY4=0x2|1BY8=0x3|1BY16=0x4|1BY32=0x5|1BY64=0x6|1BY128=0x7,SEL_VREG:1:REG_OUTPUT=0x0|POST_SWITCH=0x1,FMODE_RST_L_N:1:RESET=0x1|NORMAL=0x0,SEL_REF_EXT:1:INITIAL=0x0|NORMAL=0x1,OP_MODE:3:VOLTAGE_600MV=0x0|VOLTAGE_700MV=0x1|VOLTAGE_900MV=0x2|VOLTAGE_1200MV=0x3|FREQUENCY_MODE=0x4|FREQ_VMIN=0x5|FREQ_VMAX=0x6|FREQUENCY_NO_VLIM=0x7,VREG_TRIM:3,SEL_PD:8,PU_BYPASS:8
RTC,BUCK_DSP_CSR2, (RTC_BASE_ADDRESS + 0x8c),32,RSVD:24,FREQ_TARGET:8
RTC,PULL_ENABLE, (RTC_BASE_ADDRESS + 0x90),32,VALUE:32
RTC,PULL_DIRECTION, (RTC_BASE_ADDRESS + 0x94),32,VALUE:32
RTC,SPI0_CTRL, (RTC_BASE_ADDRESS + 0x98),32,RSVD3:20,SPI2_DYNAMIC_MISO_PULL_DISABLE_ALT:1,SPI2_DYNAMIC_MISO_PULL_DISABLE:1,SPI1_DYNAMIC_MISO_PULL_DISABLE:1,SPI0_DYNAMIC_MISO_PULL_DISABLE:1,RSVD2:2,SPI0_MISO_RE:1,SPI0_MISO_PU:1,SPI0_MOSI_RE:1,SPI0_MOSI_PU:1,SPI0_SCLK_RE:1,SPI0_SCLK_PU:1
RTC,UART0_CTRL, (RTC_BASE_ADDRESS + 0x9c),32,RSVD2:28,UART0_CTS_RE:1,UART0_CTS_PU:1,UART0_RX_RE:1,UART0_RX_PU:1
RTC,AO_CSR2, (RTC_BASE_ADDRESS + 0xa0),32,TWO_INDUCTOR_MODE:1:FOUR_INDUCTOR=0x0|TWO_INDUCTOR=0x1,RSVD2:21,WDT_CLK_DIS:1,TMR_CLK_DIS:1,RSVD1:3,OVRD_CLK_GATE_HFO2PMIC:1,PM_PD_DISABLE:1,WAKE_POLARITY:1,WAKE_RE:1,WAKE_PU:1
RTC,BROWNOUT, (RTC_BASE_ADDRESS + 0xa4),32,RSVD1:25,BOD_STATE:1,FLIP:1,TEST:1,IRQ_ENABLE_UP:1,IRQ_UP:1:ABSENT=0x0|PRESENT=0x1,IRQ_ENABLE_DOWN:1,IRQ_DOWN:1:ABSENT=0x0|PRESENT=0x1
RTC,OSC_CSR2, (RTC_BASE_ADDRESS + 0xb0),32,RSVD:23,VHFO_TRIM_CL:5,VHFO_TRIM_GM:3,VHFO_PD_N:1:OFF=0x0|ON=0x1
RTC,CLKOUT_CFG, (RTC_BASE_ADDRESS + 0xc0),32,RSVD:31,EN:1:DISABLED=0x0|ENABLED=0x1
RTC,CLKOUT_CTRL, (RTC_BASE_ADDRESS + 0xc4),32,RSVD:23,SEL:9:NONE=0x0|32KHZ=0x1|16KHZ=0x2|8KHZ=0x4|4KHZ=0x8|2MHZ=0x10|1MHZ=0x20|512KHZ=0x40|256KHZ=0x80|ADC_TOGGLE=0x100
RTC,DRIFT_PPQ, (RTC_BASE_ADDRESS + 0xd0),32,VALUE:32
RTC,DRIFT_INTEG, (RTC_BASE_ADDRESS + 0xd4),32,VALUE:32
RTC,DRIFT_STAT, (RTC_BASE_ADDRESS + 0xd8),32,RSVD3:23,ENABLE:1,RSVD2:3,SKIP_TOG:1,RSVD1:3,ADD_TOG:1
RTC,NVRAMA, (RTC_BASE_ADDRESS + 0xe0),32,VALUE:32
RTC,NVRAMB, (RTC_BASE_ADDRESS + 0xe4),32,VALUE:32
RTC,NVRAMC, (RTC_BASE_ADDRESS + 0xe8),32,VALUE:32
RTC,NVRAMD, (RTC_BASE_ADDRESS + 0xec),32,VALUE:32
RTC,DEBUG, (RTC_BASE_ADDRESS + 0xf0),32,FPANEL_FRAME:1,WEIRD:1,RSVD3:11,BUCK_DSP_BYPASS_PU:1:NORMAL=0x0|OVERRIDE=0x1,PMIC_M3_BYPASS_PU:1:NORMAL=0x0|OVERRIDE=0x1,FORCE_MEM_CLKS:1,RSVD2:7,FAST_CLOCK:1,RSVD1:3,MONTHS_SKIP:1,DAYS_SKIP:1,HOURS_SKIP:1,MINUTES_SKIP:1,SECONDS_SKIP:1
RTC,DEBUG_READ_WRITE, (RTC_BASE_ADDRESS + 0xf4),32,VALUE:32
RTC,DEBUG0_READ_ONLY, (RTC_BASE_ADDRESS + 0xf8),32,VALUE:32
RTC,DEBUG1_READ_ONLY, (RTC_BASE_ADDRESS + 0xfc),32,VALUE:32

#define SPI_BASE_ADDRESS 0x50020000
#define SPI_OFFSET(n) (n * 0x100)

SPI,CONFIG:n, (SPI_BASE_ADDRESS + SPI_OFFSET(n) + 0x0),32,RSVD32:17,SPIRDY_ACT_LOW:1,DIS_RX_FIFO:1,FIFO_LEVEL_TRIG:5,EN_SLVRDY:1,RSVD7:1,RX_OVFLW_DROPHEAD:1,SLVRDY_IS_MISO:1,END:1,CPHA:1,CPOL:1,RD_PUSHES_TX_FIFO:1
SPI,TXRX_1BYTE_FIFO_DATA:n, (SPI_BASE_ADDRESS + SPI_OFFSET(n) + 0x4),32,RSVD32:24,DATA:8
SPI,CLKDIV:n, (SPI_BASE_ADDRESS + SPI_OFFSET(n) + 0x8),32,RSVD32:20,ICG:4,IBG:4,CLKDIV:4
SPI,STATUS:n, (SPI_BASE_ADDRESS + SPI_OFFSET(n) + 0xc),32,RSVD32:16,RX_FIFO_HIT_LEVEL_DUP:1,RSVD14:1,RXFIFO_HAS_1DATA_DUP:1,RSVD12:1,NE_BUSY_STICKY:1,PE_BUSY_STICKY:1,CMD_IS_DONE:1,XMIT_COMPLETE:1,RX_FIFO_HIT_LEVEL:1,TXFIFO_HAS_LEVEL_SPACE:1,RXFIFO_HAS_1DATA:1,TXFIFO_HAS_1SPACE:1,CS_SEL:2,HOLD_CS:1,START_BUSY:1
SPI,TX_FIFO_DEBUG:n, (SPI_BASE_ADDRESS + SPI_OFFSET(n) + 0x10),32,RSVD32:19,MAX_ENTRIES:5,UFLOW:1,OFLOW:1,RSVD1:1,ENTRIES:5
SPI,RX_FIFO_DEBUG:n, (SPI_BASE_ADDRESS + SPI_OFFSET(n) + 0x14),32,RSVD32:19,MAX_ENTRIES:5,UFLOW:1,OFLOW:1,SPI_RDY:1,ENTRIES:5
SPI,RXDROP_CNT:n, (SPI_BASE_ADDRESS + SPI_OFFSET(n) + 0x18),32,RSVD32:16,COUNT:16
SPI,GENERAL_DEBUG:n, (SPI_BASE_ADDRESS + SPI_OFFSET(n) + 0x1c),32,RSVD32:20,EN_BIT_BANG:1,BB_SPI_MOSI:1,BB_SPI_CS_N:1,BB_SPI_CLK:1,SPI_MISO:1,SPI_MOSI:1,SPI_CS_N:1,SPI_CLK:1,STATE_REG:4
SPI,INT_EN:n, (SPI_BASE_ADDRESS + SPI_OFFSET(n) + 0x20),32,RSVD32:16,RX_FIFO_HIT_LEVEL_EN1:1,TXFIFO_HAS_LEVEL_SPACE_EN2:1,RX_DATA_EN1:1,TX_DATA_EN2:1,NE_BUSY_STICKY_EN0:1,PE_BUSY_STICKY_EN0:1,CMD_IS_DONE_EN0:1,XMIT_COMPLETE_EN0:1,RX_FIFO_HIT_LEVEL_EN0:1,TXFIFO_HAS_LEVEL_SPACE_EN0:1,RX_DATA_EN0:1,TX_DATA_EN0:1,RSVD1:4
SPI,TXRX_2BYTE_FIFO_DATA:n, (SPI_BASE_ADDRESS + SPI_OFFSET(n) + 0x24),32,RSVD32:16,DATA:16
SPI,CONFIG2:n, (SPI_BASE_ADDRESS + SPI_OFFSET(n) + 0x28),32,RSVD32:20,RX_BYTE2_END:1,TX_BYTE2_END:1,AGGR_CLK_GATING:1,CLK_ON:1,SOFT_RST:1,CLR_STICKY:1,STALL_IF_RXFULL:1,DISABLE_MISO_METAFLOP:1,EN_LOOPBACK:1,RSVD2:1,RX_SAMPLE_TIME:2
SPI,TX_DUMMY_BYTE_CNT:n, (SPI_BASE_ADDRESS + SPI_OFFSET(n) + 0x2c),32,RSVD32:16,COUNT:16
SPI,CS_CONFIG:n, (SPI_BASE_ADDRESS + SPI_OFFSET(n) + 0x30),32,RSVD32:28,CS3_POL:1,CS2_POL:1,CS1_POL:1,CS0_POL:1
SPI,RX_4BYTE_FIFO_DATA:n, (SPI_BASE_ADDRESS + SPI_OFFSET(n) + 0x34),32,DATA:32
SPI,INT_ACT:n, (SPI_BASE_ADDRESS + SPI_OFFSET(n) + 0x38),32,RSVD32:20,NE_BUSY_STICKY_ACT:1,PE_BUSY_STICKY_ACT:1,CMD_IS_DONE_ACT:1,XMIT_COMPLETE_ACT:1,RX_FIFO_HIT_LEVEL_ACT:1,TXFIFO_HAS_LEVEL_SPACE_ACT:1,RX_DATA_ACT:1,TX_DATA_ACT:1,RSVD1:4
SPI,SLAVE_MODE:n, (SPI_BASE_ADDRESS + SPI_OFFSET(n) + 0x3c),32,RSVD32:28,DISABLED_TX_FIFO_DATA:1,DISABLE_TX_FIFO:1,DISABLE_ALL:1,SLAVE_EN:1

#define UART_BASE_ADDRESS 0x50020200
#define UART_OFFSET(n) (n * 0x100)

UART,CFG_STATUS:n, (UART_BASE_ADDRESS + UART_OFFSET(n) + 0x0),32,RSVD3:6,TX_ONE_STOP:1:SET=0x1|CLEAR=0x0,TX_FIFO_FULL:1,TX_PARITY_TYPE:1:EVEN=0x1|ODD=0x0,TX_SHIFT_DIR:1:MSB=0x1|LSB=0x0,TX_POLARITY:1:INVERTED=0x1|NORMAL=0x0,BREAK:1:ENABLE=0x1|STOP=0x0,CTS_POLARITY:1:INVERTED=0x1|NORMAL=0x0,CTS_PIN:1,CTS:1:ENABLE=0x1|STOP=0x0,TX_EN:1:RUN=0x1|STOP=0x0,RSVD1:6,RX_FIFO_EMPTY:1,RX_SHIFT_DIR:1:MSB=0x1|LSB=0x0,RTS_AUTO:1:ENABLE=0x1|DISABLE=0x0,RTS_POLARITY:1:INVERTED=0x1|NORMAL=0x0,RX_POLARITY:1:INVERTED=0x1|NORMAL=0x0,RX_PARITY_TYPE:1:EVEN=0x1|ODD=0x0,RX_TX_PARITY:1:ENABLE=0x1|DISABLE=0x0,RTS_STATE:1:RUN=0x1|STOP=0x0,RTS_CONTROL:1:FORCE=0x1|FREE=0x0,RX_EN:1:RUN=0x1|STOP=0x0
UART,RX_FIFO:n, (UART_BASE_ADDRESS + UART_OFFSET(n) + 0x4),32,RSVD:14,TIMEOUT:1,HWM:1,EMPTY:1,RX_FRAME_ERROR:1:PRESENT=0x1|ABSENT=0x0,RX_PARITY_ERROR:1:PRESENT=0x1|ABSENT=0x0,DEPTH:5,DATA:8
UART,TX_FIFO:n, (UART_BASE_ADDRESS + UART_OFFSET(n) + 0x8),32,RSVD:16,FIFO_LWM:1,FIFO_EMPTY:1,TX_BUSY:1,COUNT:5,DATA:8
UART,PHASE:n, (UART_BASE_ADDRESS + UART_OFFSET(n) + 0xc),32,RSVD2:8,SHIFT_TX:8,RSVD1:8,SHIFT_RX:8
UART,INT_STAT:n, (UART_BASE_ADDRESS + UART_OFFSET(n) + 0x10),32,RSVD:26,RX_ERROR:1:PRESENT=0x1|ABSENT=0x0,TX_IDLE:1:PRESENT=0x1|ABSENT=0x0,TX_FIFO_LWM:1:PRESENT=0x1|ABSENT=0x0,EOB:1:PRESENT=0x1|ABSENT=0x0,RX_FIFO_TO:1:PRESENT=0x1|ABSENT=0x0,RX_FIFO_HWM:1:PRESENT=0x1|ABSENT=0x0
UART,INT_STAT_CLEAR:n, (UART_BASE_ADDRESS + UART_OFFSET(n) + 0x14),32,RSVD:26,RX_ERROR:1,TX_IDLE:1,TX_FIFO_LWM:1,EOB:1,RX_FIFO_TO:1,RX_FIFO_HWM:1
UART,INT_ENABLE:n, (UART_BASE_ADDRESS + UART_OFFSET(n) + 0x18),32,RSVD:26,RX_ERROR:1:ENABLE=0x1|DISABLE=0x0,TX_IDLE:1:ENABLE=0x1|DISABLE=0x0,TX_FIFO_LWM:1:ENABLE=0x1|DISABLE=0x0,EOB:1:ENABLE=0x1|DISABLE=0x0,RX_FIFO_TO:1:ENABLE=0x1|DISABLE=0x0,RX_FIFO_HWM:1:ENABLE=0x1|DISABLE=0x0
UART,INT_ENABLE_SET:n, (UART_BASE_ADDRESS + UART_OFFSET(n) + 0x1c),32,RSVD:26,RX_ERROR:1,TX_IDLE:1,TX_FIFO_LWM:1,EOB:1,RX_FIFO_TO:1,RX_FIFO_HWM:1
UART,INT_ENABLE_CLEAR:n, (UART_BASE_ADDRESS + UART_OFFSET(n) + 0x20),32,RSVD:26,RX_ERROR:1,TX_IDLE:1,TX_FIFO_LWM:1,EOB:1,RX_FIFO_TO:1,RX_FIFO_HWM:1
UART,BAUDRATE:n, (UART_BASE_ADDRESS + UART_OFFSET(n) + 0x24),32,RSVD2:21,DIVISOR:11
UART,CONFIG2:n, (UART_BASE_ADDRESS + UART_OFFSET(n) + 0x28),32,RSVD2:31,CLK_ON:1
UART,DEBUG:n, (UART_BASE_ADDRESS + UART_OFFSET(n) + 0x30),32,UART_RX:1,RX_BREAK_DETECT:1,RSVD2:21,TWIN_LOOPBACK:1:ENABLE=0x1|STOP=0x0,SELF_LOOPBACK:1:ENABLE=0x1|STOP=0x0,RSVD1:1,DBG_PIN_C:2:RX_DATA=0x0|TX_STEP=0x1|TX_FIFO_LWM=0x2|RX_FIFO_EMPTY=0x3,DBG_PIN_B:2:RX_STEP=0x0|TX_STOP=0x1|TX_FIFO_FULL=0x2|RX_FIFO_HWM=0x3,DBG_PIN_A:2:RX_START=0x0|TX_START=0x1|TX_FIFO_EMPTY=0x2|RX_FIFO_TIMEOUT=0x3
UART,DEBUG_READ_ONLY:n, (UART_BASE_ADDRESS + UART_OFFSET(n) + 0x34),32,VALUE:32

#define TIMER_BASE_ADDRESS 0x50020400

TIMER,CFG_STATUS, (TIMER_BASE_ADDRESS + 0x0),32,RSVD2:26,FLAG:1,RSVD1:2,ENABLE_CAPTURE:1:ENABLE=0x1|DISABLE=0x0,CLK_EN_OVR:1:ENABLE=0x1|DISABLE=0x0,SFTRST:1:NOW=0x1
TIMER,COUNTER_LO, (TIMER_BASE_ADDRESS + 0x8),32,VALUE:32
TIMER,COUNTER_HI, (TIMER_BASE_ADDRESS + 0xc),32,VALUE:32
TIMER,DEBUG_CTL, (TIMER_BASE_ADDRESS + 0x10),32,RSVD1:25,COLLECTOR:1,IRQ2NVICB:1,IRQ2NVICA:1,SET2MAX_HI:1,SET2MAX_LO:1,MODE:1:ENABLE=0x1|DISABLE=0x0,OPERATION:1:RUN=0x1|STOP=0x0
TIMER,DEBUG_READ_ONLY, (TIMER_BASE_ADDRESS + 0x14),32,VALUE:32
TIMER,CAPTURE_LO, (TIMER_BASE_ADDRESS + 0x18),32,VALUE:32
TIMER,CAPTURE_HI, (TIMER_BASE_ADDRESS + 0x1c),32,VALUE:32
TIMER,COMPAREA, (TIMER_BASE_ADDRESS + 0x20),32,VALUE:32
TIMER,COMPAREB, (TIMER_BASE_ADDRESS + 0x24),32,VALUE:32
TIMER,COMPAREC, (TIMER_BASE_ADDRESS + 0x28),32,VALUE:32
TIMER,COMPARED, (TIMER_BASE_ADDRESS + 0x2c),32,VALUE:32
TIMER,0_INT_ENABLE, (TIMER_BASE_ADDRESS + 0x30),32,RSVD:25,HI_OVERFLOW:1,LO_OVERFLOW:1,CAPTURED:1,CMPD:1,CMPC:1,CMPB:1,CMPA:1
TIMER,0_INT_ENABLE_SET, (TIMER_BASE_ADDRESS + 0x34),32,RSVD:25,HI_OVERFLOW:1,LO_OVERFLOW:1,CAPTURED:1,CMPD:1,CMPC:1,CMPB:1,CMPA:1
TIMER,0_INT_ENABLE_CLR, (TIMER_BASE_ADDRESS + 0x38),32,RSVD:25,HI_OVERFLOW:1,LO_OVERFLOW:1,CAPTURED:1,CMPD:1,CMPC:1,CMPB:1,CMPA:1
TIMER,0_INT_ENABLE_TOG, (TIMER_BASE_ADDRESS + 0x3c),32,RSVD:25,HI_OVERFLOW:1,LO_OVERFLOW:1,CAPTURED:1,CMPD:1,CMPC:1,CMPB:1,CMPA:1
TIMER,1_INT_ENABLE, (TIMER_BASE_ADDRESS + 0x40),32,RSVD:25,HI_OVERFLOW:1,LO_OVERFLOW:1,CAPTURED:1,CMPD:1,CMPC:1,CMPB:1,CMPA:1
TIMER,1_INT_ENABLE_SET, (TIMER_BASE_ADDRESS + 0x44),32,RSVD:25,HI_OVERFLOW:1,LO_OVERFLOW:1,CAPTURED:1,CMPD:1,CMPC:1,CMPB:1,CMPA:1
TIMER,1_INT_ENABLE_CLR, (TIMER_BASE_ADDRESS + 0x48),32,RSVD:25,HI_OVERFLOW:1,LO_OVERFLOW:1,CAPTURED:1,CMPD:1,CMPC:1,CMPB:1,CMPA:1
TIMER,1_INT_ENABLE_TOG, (TIMER_BASE_ADDRESS + 0x4c),32,RSVD:25,HI_OVERFLOW:1,LO_OVERFLOW:1,CAPTURED:1,CMPD:1,CMPC:1,CMPB:1,CMPA:1
TIMER,INT_STATUS, (TIMER_BASE_ADDRESS + 0x50),32,RSVD:25,HI_OVERFLOW:1,LO_OVERFLOW:1,CAPTURED:1,CMPD:1,CMPC:1,CMPB:1,CMPA:1
TIMER,INT_STATUS_SET, (TIMER_BASE_ADDRESS + 0x54),32,RSVD:25,HI_OVERFLOW:1,LO_OVERFLOW:1,CAPTURED:1,CMPD:1,CMPC:1,CMPB:1,CMPA:1
TIMER,INT_STATUS_CLR, (TIMER_BASE_ADDRESS + 0x58),32,RSVD:25,HI_OVERFLOW:1,LO_OVERFLOW:1,CAPTURED:1,CMPD:1,CMPC:1,CMPB:1,CMPA:1
TIMER,INT_STATUS_TOG, (TIMER_BASE_ADDRESS + 0x5c),32,RSVD:25,HI_OVERFLOW:1,LO_OVERFLOW:1,CAPTURED:1,CMPD:1,CMPC:1,CMPB:1,CMPA:1

#define GPIO8_BASE_ADDRESS 0x50030000

GPIO8,CFG_STATUS, (GPIO8_BASE_ADDRESS + 0x0),32,RSVD:13,CLK_EN_OVR:1:ENABLE=0x1|DISABLE=0x0,IRQ2NVICB:1,IRQ2NVICA:1,RSVD1:15,SFTRST:1:RESET=0x1
GPIO8,DEBUG0_READ_ONLY, (GPIO8_BASE_ADDRESS + 0x4),32,VALUE:32
GPIO8,DEBUG1_READ_ONLY, (GPIO8_BASE_ADDRESS + 0x8),32,VALUE:32
GPIO8,POLARITYA, (GPIO8_BASE_ADDRESS + 0xc),32,VALUE:32
GPIO8,POLARITYA_SET, (GPIO8_BASE_ADDRESS + 0x10),32,VALUE:32
GPIO8,POLARITYA_CLR, (GPIO8_BASE_ADDRESS + 0x14),32,VALUE:32
GPIO8,POLARITYA_TOG, (GPIO8_BASE_ADDRESS + 0x18),32,VALUE:32
GPIO8,INT_ENABLEA, (GPIO8_BASE_ADDRESS + 0x1c),32,VALUE:32
GPIO8,INT_ENABLEA_SET, (GPIO8_BASE_ADDRESS + 0x20),32,VALUE:32
GPIO8,INT_ENABLEA_CLR, (GPIO8_BASE_ADDRESS + 0x24),32,VALUE:32
GPIO8,INT_STATUSA, (GPIO8_BASE_ADDRESS + 0x28),32,VALUE:32
GPIO8,INT_STATUSA_SET, (GPIO8_BASE_ADDRESS + 0x2c),32,VALUE:32
GPIO8,INT_STATUSA_CLR, (GPIO8_BASE_ADDRESS + 0x30),32,VALUE:32
GPIO8,POLARITYB, (GPIO8_BASE_ADDRESS + 0x34),32,VALUE:32
GPIO8,POLARITYB_SET, (GPIO8_BASE_ADDRESS + 0x38),32,VALUE:32
GPIO8,POLARITYB_CLR, (GPIO8_BASE_ADDRESS + 0x3c),32,VALUE:32
GPIO8,POLARITYB_TOG, (GPIO8_BASE_ADDRESS + 0x40),32,VALUE:32
GPIO8,INT_ENABLEB, (GPIO8_BASE_ADDRESS + 0x44),32,VALUE:32
GPIO8,INT_ENABLEB_SET, (GPIO8_BASE_ADDRESS + 0x48),32,VALUE:32
GPIO8,INT_ENABLEB_CLR, (GPIO8_BASE_ADDRESS + 0x4c),32,VALUE:32
GPIO8,INT_STATUSB, (GPIO8_BASE_ADDRESS + 0x50),32,VALUE:32
GPIO8,INT_STATUSB_SET, (GPIO8_BASE_ADDRESS + 0x54),32,VALUE:32
GPIO8,INT_STATUSB_CLR, (GPIO8_BASE_ADDRESS + 0x58),32,VALUE:32
GPIO8,INPUT_ENABLE, (GPIO8_BASE_ADDRESS + 0x5c),32,VALUE:32
GPIO8,DRIVE_HIGH, (GPIO8_BASE_ADDRESS + 0x68),32,VALUE:32
GPIO8,CAPTURE_SEL, (GPIO8_BASE_ADDRESS + 0x6c),32,COLLECTOR:1,RSVD:24,POLARITY:1,ENABLE:1,BIT:5
GPIO8,SPI0_CTRL, (GPIO8_BASE_ADDRESS + 0x70),32,RSVD2:27,SPI0_MISO_IE:1,SPI0_MOSI_DRIVE:1,SPI0_MOSI_OEN:1,SPI0_CLK_DRIVE:1,SPI0_CLK_OEN:1
GPIO8,UART0_CTRL, (GPIO8_BASE_ADDRESS + 0x74),32,RSVD2:26,UART0_CTS_IE:1,UART0_RX_IE:1,UART0_RTS_DRIVE:1,UART0_RTS_OEN:1,UART0_TX_DRIVE:1,UART0_TX_OEN:1

#define SOCCTRL_BASE_ADDRESS 0x50030080

SOCCTRL,CFG_STATUS, (SOCCTRL_BASE_ADDRESS + 0x0),32,RSVD3:2,GPIO_PM_STATE:1:NORMAL=0x0|ABNORMAL=0x1,COLLECTOR:1,RSVD2:23,WFI_STALL:1:ENABLE=0x1|DISABLE=0x0,RSVD1:2,CLK_EN_OVR:1:ENABLE=0x1|DISABLE=0x0,M3DSEN:1:ENABLE=0x1|DISABLE=0x0
SOCCTRL,FLASH_CFG_STATUS, (SOCCTRL_BASE_ADDRESS + 0x4),32,RSVD1:29,NUM_WS:3
SOCCTRL,M3_FREQUENCY, (SOCCTRL_BASE_ADDRESS + 0x8),32,COUNT:32
SOCCTRL,DSP_FREQUENCY, (SOCCTRL_BASE_ADDRESS + 0xc),32,COUNT:32
SOCCTRL,DSP_CSR, (SOCCTRL_BASE_ADDRESS + 0x10),32,RSVD2:19,DSP_TDO:1,DSP_TRST_N:1,DSP_TDI:1,DSP_TMS:1,DSP_TCLK:1,RSVD1:6,DSP_COMPLEX_STALL:1:FORCE=0x1|RELEASE=0x0,DSP_COMPLEX_RESET_N:1:FORCE=0x0|RELEASE=0x1
SOCCTRL,M3_DIAL_STALL_CSR, (SOCCTRL_BASE_ADDRESS + 0x14),32,STALL:1,RSVD1:13,AO_BOD:1,RTC_TMR:1,WDT:1,PWM:1,ADC:1,DSP:1,RTC1:1,RTC0:1,I2C1:1,I2C0:1,SPI1:1,SPI0:1,UART1:1,UART0:1,TIMER1:1,TIMER0:1,GPIO1:1,GPIO0:1
SOCCTRL,M3_DIAL_STALL_SET, (SOCCTRL_BASE_ADDRESS + 0x18),32,STALL:1,RSVD1:13,AO_BOD:1,RTC_TMR:1,WDT:1,PWM:1,ADC:1,DSP:1,RTC1:1,RTC0:1,I2C1:1,I2C0:1,SPI1:1,SPI0:1,UART1:1,UART0:1,TIMER1:1,TIMER0:1,GPIO1:1,GPIO0:1
SOCCTRL,M3_DIAL_STALL_CLR, (SOCCTRL_BASE_ADDRESS + 0x1c),32,STALL:1,RSVD1:13,AO_BOD:1,RTC_TMR:1,WDT:1,PWM:1,ADC:1,DSP:1,RTC1:1,RTC0:1,I2C1:1,I2C0:1,SPI1:1,SPI0:1,UART1:1,UART0:1,TIMER1:1,TIMER0:1,GPIO1:1,GPIO0:1
SOCCTRL,RESET_STATUS, (SOCCTRL_BASE_ADDRESS + 0x20),32,RSVD1:25,BROWN:1,PIN:1,WDT:1,M3_DAP:1,M3_AIRCR_SYS:1,M3_AIRCR_VECT:1,POR:1
SOCCTRL,FWTRACEA, (SOCCTRL_BASE_ADDRESS + 0x28),32,VALUE:32
SOCCTRL,FWTRACEB, (SOCCTRL_BASE_ADDRESS + 0x2c),32,VALUE:32
SOCCTRL,PMUXA, (SOCCTRL_BASE_ADDRESS + 0x30),32,RSVD7:2,GPIO7:2:GPIO7=0x0|PWMCH7=0x1|DSP_UART_TX=0x2|UART1TX=0x3,RSVD6:2,GPIO6:2:GPIO6=0x0|PWMCH6=0x1|FPANEL=0x2|CLKOUT=0x3,RSVD5:2,GPIO5:2:GPIO5=0x0|PWMCH5=0x1|UART1DBGA=0x2|UART1CTS=0x3,RSVD4:2,GPIO4:2:GPIO4=0x0|PWMCH4=0x1|UART1DBGB=0x2|UART1RTS=0x3,RSVD3:2,GPIO3:2:GPIO3=0x0|PWMCH3=0x1|UART1DBGC=0x2|UART1RX=0x3,RSVD2:1,GPIO2:3:GPIO2=0x0|PWMCH2=0x1|UART0DBGA=0x2|SPI2CLK=0x3|SPISLV2CLK=0x4,RSVD1:1,GPIO1:3:GPIO1=0x0|PWMCH1=0x1|UART0DBGB=0x2|SPI2MOSI=0x3|SPISLV2MISO=0x4,RSVD0:1,GPIO0:3:GPIO0=0x0|PWMCH0=0x1|UART0DBGC=0x2|SPI2MISO=0x3|SPISLV2MOSI=0x4
SOCCTRL,PMUXB, (SOCCTRL_BASE_ADDRESS + 0x34),32,RSVD7:2,GPIO15:2:GPIO15=0x0|I2S_DATA_IN=0x1|PDM1DATA=0x2,RSVD6:2,GPIO14:2:GPIO14=0x0|I2S_LRCLK=0x1|PDM1CLK=0x2,RSVD5:3,GPIO13:1:GPIO13=0x0|I2S_BCLK=0x1,RSVD4:3,GPIO12:1:GPIO12=0x0|I2S_ACLK=0x1,RSVD3:1,GPIO11:3:GPIO11=0x0|SPI2RDY=0x2|SPI2CS3=0x3|SPISLV2CS=0x4,RSVD2:2,GPIO10:2:GPIO10=0x0|SPI2CS2=0x3,RSVD1:2,GPIO9:2:GPIO9=0x0|I2C1SCK=0x1|PDM0DATA=0x2|I2C2SCK=0x3,RSVD0:2,GPIO8:2:GPIO8=0x0|I2C1SDA=0x1|PDM0CLK=0x2|I2C2SDA=0x3
SOCCTRL,PMUXC, (SOCCTRL_BASE_ADDRESS + 0x38),32,RSVD7:2,GPIO23:2:GPIO23=0x0|SPI0CS0=0x1|SPISLV0CS=0x2,RSVD6:2,GPIO22:2:GPIO22=0x0|UART1RTS=0x1|DSP_JTAG_TDO=0x2|CLKOUT=0x3,RSVD5:2,GPIO21:2:GPIO21=0x0|UART1CTS=0x1|DSP_JTAG_TCLK=0x2,RSVD4:2,GPIO20:2:GPIO20=0x0|UART1TX=0x1|DSP_UART_TX=0x2|FPANEL=0x3,RSVD3:2,GPIO19:2:GPIO19=0x0|UART1RX=0x1|DSP_JTAG_TRST_N=0x2,RSVD2:2,GPIO18:2:GPIO18=0x0|I2C0SCK=0x1|DSP_JTAG_TDI=0x2|PDM0DATA=0x3,RSVD1:2,GPIO17:2:GPIO17=0x0|I2C0SDA=0x1|DSP_JTAG_TMS=0x2|PDM0CLK=0x3,RSVD0:3,GPIO16:1:GPIO16=0x0|I2S_DATA_OUT=0x1
SOCCTRL,PMUXD, (SOCCTRL_BASE_ADDRESS + 0x3c),32,RSVD8:2,GPIO31:2:GPIO31=0x0|SPI1CS1=0x1|SPI1RDY=0x2|SPI2CS1=0x3,RSVD7:1,GPIO30:3:GPIO30=0x0|SPI1CS0=0x1|SPI2RDY=0x2|SPI2CS0=0x3|SPISLV1CS=0x4|SPISLV2CS=0x5,RSVD6:1,GPIO29:3:GPIO29=0x0|SPI1CLK=0x1|I2C1SCK=0x2|SPI2CLK=0x3|SPISLV1CLK=0x4|SPISLV2CLK=0x5,RSVD5:1,GPIO28:3:GPIO28=0x0|SPI1MOSI=0x1|I2C1SDA=0x2|SPI2MOSI=0x3|SPISLV1MISO=0x4|SPISLV2MISO=0x5,RSVD4:1,GPIO27:3:GPIO27=0x0|SPI1MISO=0x1|SPI2MISO=0x3|SPISLV1MOSI=0x4|SPISLV2MOSI=0x5,RSVD3:2,GPIO26:2:GPIO26=0x0|SPI0CS3=0x1|SPI0RDY=0x2,RSVD2:3,GPIO25:1:GPIO25=0x0|SPI0CS2=0x1,RSVD1:3,GPIO24:1:GPIO24=0x0|SPI0CS1=0x1
SOCCTRL,PMUXE, (SOCCTRL_BASE_ADDRESS + 0x40),32,RSVD3:23,SPI0MISO:1:SPI0MISO=0x0|SPISLV0MOSI=0x1,RSVD2:2,SPI0MOSI:2:MOSI=0x0|I2C0SDA=0x1|SPISLV0MISO=0x2,RSVD1:2,SPI0CLK:2:SPI0CLK=0x0|I2C0SCK=0x1|SPISLV0SCK=0x2
SOCCTRL,CLK_CFG, (SOCCTRL_BASE_ADDRESS + 0x50),32,RSVD4:19,I2C_CLK_SEL:1:2MHZ=0x0|4MHZ=0x1,RSVD3:2,DSP_CLK_SEL:2:4MHZ=0x0|8MHZ=0x1|2MHZ=0x2,RSVD2:2,UST_CLK_SEL:2:4MHZ=0x0|8MHZ=0x1|2MHZ=0x2,RSVD1:2,ADC_CLK_SEL:2:1MHZ_HFO=0x0|2MHZ_HFO=0x1|2MHZ_XTAL=0x2|2MHZ_PAD=0x3
SOCCTRL,TSENSE_CTRL, (SOCCTRL_BASE_ADDRESS + 0x60),32,RSVD2:26,SATURATED:1:NORMAL=0x0|SATURATED=0x1,READY:1:WAITING=0x0|READY=0x1,RSVD1:3,RST_N:1:RESET=0x0|RUN=0x1
SOCCTRL,TSENSE_FREQ, (SOCCTRL_BASE_ADDRESS + 0x64),32,RSVD:16,VALUE:16
SOCCTRL,FPANEL, (SOCCTRL_BASE_ADDRESS + 0x74),32,RSVD2:20,DSP_OSC_DIV:3:DIV_BY_1=0x0|DIV_BY_2=0x1|DIV_BY_4=0x2|DIV_BY_8=0x3|DIV_BY_16=0x4,M3_OSC_DIV:3:DIV_BY_1=0x0|DIV_BY_2=0x1|DIV_BY_4=0x2|DIV_BY_8=0x3|DIV_BY_16=0x4,CLK_DISABLE:1,OEN:1,DSP_OSC:1:ENABLE=0x1|DISABLE=0x0,M3_OSC:1:ENABLE=0x1|DISABLE=0x0,CONTINUOUS:1:ALWAYS=0x1|LAUNCHED=0x0,RUN_STATE:1:HALT=0x0|RUN=0x1
SOCCTRL,DEBUG_READ_ONLY, (SOCCTRL_BASE_ADDRESS + 0x7c),32,VALUE:32

#define I2C_BASE_ADDRESS 0x50040000
#define I2C_OFFSET(n) (n * 0x80)

I2C,CONFIG:n, (I2C_BASE_ADDRESS + I2C_OFFSET(n) + 0x0),32,RSVD32:18,HOLD_AT_ACK:1,RX_FIFO_INT_LEVEL:5,EN_RXFIFO_AT_START:1,BYTE2_END:1,RSVD4:2,END:1,STALL_IF_RXFULL:1,IGNORE_NACK:1,RD_PUSHES_TX_FIFO:1
I2C,TXRX_1BYTE_FIFO_DATA:n, (I2C_BASE_ADDRESS + I2C_OFFSET(n) + 0x4),32,RSVD32:24,DATA:8
I2C,STATUS:n, (I2C_BASE_ADDRESS + I2C_OFFSET(n) + 0xc),32,RSVD32:23,CMD_DONE:1,RX_FIFO_HIT_LEVEL:1,XMIT_COMPLETE:1,RXFIFO_HAS_1DATA:1,TXFIFO_HAS_1SPACE:1,TXFIFO_HAS_LEVEL_SPACE:1,SM_IN_NACK_HOLD:1,NACK_ESCAPE:1,START_BUSY:1
I2C,TX_FIFO_DEBUG:n, (I2C_BASE_ADDRESS + I2C_OFFSET(n) + 0x10),32,RSVD32:19,MAX_ENTRIES:5,UFLOW:1,OFLOW:1,RSVD1:1,ENTRIES:5
I2C,RX_FIFO_DEBUG:n, (I2C_BASE_ADDRESS + I2C_OFFSET(n) + 0x14),32,RSVD32:19,MAX_ENTRIES:5,UFLOW:1,OFLOW:1,RSVD5:1,ENTRIES:5
I2C,GENERAL_DEBUG:n, (I2C_BASE_ADDRESS + I2C_OFFSET(n) + 0x1c),32,RSVD32:16,LAST_BYTE_HAD_NACK:1,MONITOR_SDA:1,MONITOR_EN:1,EN_BIT_BANG:1,BB_SDA_OEN:1,BB_SCL_OEN:1,STRETCH_ACTIVE:1,I2C_SDA_LOCAL:1,I2C_SDA_OEN:1,I2C_SCL_LOCAL:1,I2C_SCL_OEN:1,STATE_REG:5
I2C,INT_EN:n, (I2C_BASE_ADDRESS + I2C_OFFSET(n) + 0x20),32,RSVD32:16,RX_HIT_LEVEL_EN_SRCRDY:1,RSVD14:1,RX_DATA_EN_SRCRDY:1,TX_DATA_EN_DSTRDY:1,TXFIFO_HAS_LEVEL_SPACE_EN_DSTRDY:1,RSVD9:2,CMD_DONE:1,RX_HIT_LEVEL_EN:1,TX_COMPLETE_EN:1,RX_DATA_EN:1,TX_DATA_EN:1,TXFIFO_HAS_LEVEL_SPACE_EN:1,UNACK_EN:1,RSVD0:2
I2C,CMD_FIFO_DATA:n, (I2C_BASE_ADDRESS + I2C_OFFSET(n) + 0x24),32,RSVD32:24,CMD_RXFIFO:2:NOTHING=0x0|DISABLE_RXFIFO=0x1|ENABLE_RXFIFO=0x3,CMD_NACK:2:NOTHING=0x0|DRIVE_NACK_LOW=0x1|DRIVE_NACK_HIGH=0x3,RSVD3:1,EXP_1NACK:1,CMD_SRD:2:NOTHING=0x0|RESTART=0x1|STOP=0x2|DUMMYBYTE=0x3
I2C,CONFIG2:n, (I2C_BASE_ADDRESS + I2C_OFFSET(n) + 0x28),32,RSVD32:17,DISABLE_SCL_HYSTERSIS:1,SCL_HYSTERISIS_LEVEL:4,AGGR_CLK_GATING:1,CLK_ON:1,SOFT_RST:1,CLR_STICKY:1,DISABLE_METAFLOP:1,DISABLE_SDA_HYSTERSIS:1,SDA_HYSTERISIS_LEVEL:4
I2C,CLK_CONFIG1:n, (I2C_BASE_ADDRESS + I2C_OFFSET(n) + 0x30),32,RSVD32:16,IBG_TIME:8,CYCLE_TIME:8
I2C,CLK_CONFIG2:n, (I2C_BASE_ADDRESS + I2C_OFFSET(n) + 0x34),32,RSVD32:16,RX_TIME:8,TX_TIME:8
I2C,CLK_CONFIG3:n, (I2C_BASE_ADDRESS + I2C_OFFSET(n) + 0x38),32,RSVD32:16,NE_TIME:8,PE_TIME:8
I2C,SCL_CONFIG:n, (I2C_BASE_ADDRESS + I2C_OFFSET(n) + 0x3c),32,RSVD32:21,DISABLE_FULL_STRETCH_SUPPORT:1,DISABLE_SCL_HIGH_CHK:1,HARD_DRIVE_SCL:1,RSVD7:1,MIN_SCL_HIGH:7
I2C,RX_2BYTE_FIFO_DATA:n, (I2C_BASE_ADDRESS + I2C_OFFSET(n) + 0x40),32,RSVD32:16,DATA:16
I2C,RX_4BYTE_FIFO_DATA:n, (I2C_BASE_ADDRESS + I2C_OFFSET(n) + 0x44),32,DATA:32
I2C,RISE_TIME_DEBUG:n, (I2C_BASE_ADDRESS + I2C_OFFSET(n) + 0x48),32,RSVD32:24,VALUE:8
I2C,DUMMY_BYTES:n, (I2C_BASE_ADDRESS + I2C_OFFSET(n) + 0x4c),32,RSVD32:16,VALUE:16
I2C,TX_1BYTE_DATA_CMD_FIFO:n, (I2C_BASE_ADDRESS + I2C_OFFSET(n) + 0x50),32,RSVD32:16,CMD:8,DATA:8
I2C,INT_ACT:n, (I2C_BASE_ADDRESS + I2C_OFFSET(n) + 0x54),32,RSVD9:23,CMD_DONE_ACT:1,RX_HIT_LEVEL_ACT:1,TX_COMPLETE_ACT:1,RX_DATA_ACT:1,TX_DATA_ACT:1,TXFIFO_HAS_LEVEL_SPACE_ACT:1,UNACK_ACT:1,RSVD0:2

#define I2S_BASE_ADDRESS 0x50050100

I2S,CSR, (I2S_BASE_ADDRESS + 0x0),32,RSVD:31,I2S_EN:1
I2S,CSR2, (I2S_BASE_ADDRESS + 0x4),32,RSVD:28,SFTRST:1:RST=0x1,BIT64_MODE:1,SAMPLE_FREQ:2

#define PDM_BASE_ADDRESS 0x50050200
#define PDM_OFFSET(n) (n * 0x100)

PDM,PCMA_CTRL:n, (PDM_BASE_ADDRESS + PDM_OFFSET(n) + 0x0),32,RSVD1:30,SFTRST:1:RST=0x1,EN:1:DISABLE=0x0|ENABLE=0x1
PDM,PDM_CORE_CONF:n, (PDM_BASE_ADDRESS + PDM_OFFSET(n) + 0x4),32,RSVD1:1,PGA_R:5:m12dB=0x0|m10p5dB=0x1|34p5dB=0x1f,PGA_L:5:m12dB=0x0|m10p5dB=0x1|34p5dB=0x1f,SINC_RATE:7,MCLKDIV:4,ADCHPD:1,HPGAIN:4,S_CYCLES:3,SOFT_MUTE:1:DISABLE=0x0|ENABLE=0x1,LRSWAP:1:NORMAL=0x0|SWAP=0x1
PDM,PDM_CORE2_CONF:n, (PDM_BASE_ADDRESS + PDM_OFFSET(n) + 0x8),32,RSVD1:24,SEL_STEP:1:LOW=0x0|HIGH=0x1,PDMCKO_DLY:3:NONE=0x0|ONE=0x1|SEVEN=0x7,DIV_MCLKQ:2:BYPASS=0x0|DIV_BY_1=0x1|DIV_BY_2=0x2|DIV_BY_3=0x3,PCM_CHSET:2:DISABLE=0x0|MONO_L=0x1|MONO_R=0x2|STEREO=0x3
PDM,PDM_CTRL_CONF:n, (PDM_BASE_ADDRESS + PDM_OFFSET(n) + 0xc),32,PDM_CNTL:32
PDM,DEBUG0:n, (PDM_BASE_ADDRESS + PDM_OFFSET(n) + 0x10),32,RSVD:28,ONE_SHOT:1,DBG_RESET:1,SELECT:1,ENABLE:1
PDM,DEBUG1:n, (PDM_BASE_ADDRESS + PDM_OFFSET(n) + 0x14),32,TOGGLE:1,DATA:31

#define ADC_BASE_ADDRESS 0x50050000

ADC,CNTRL, (ADC_BASE_ADDRESS + 0x0),32,RSVD:16,CAPTURE_CNT:8,SFTRST:1,GRAB_DELAY:2:IMMED=0x0|1CLK=0x1|2CLK=0x2|3CLK=0x3,DMA:1:DISABLE=0x0|ENABLE=0x1,PERIODIC:1:DISABLE=0x0|ENABLE=0x1,CALIBRATE:1:OFF=0x0|ON=0x1,MODE:1:SLEEP=0x0|RUN=0x1,INT_EN:1:DISABLE=0x0|ENABLE=0x1
ADC,CLOCK_DIV, (ADC_BASE_ADDRESS + 0x4),32,RSVD:12,VALUE:20
ADC,SRC, (ADC_BASE_ADDRESS + 0x8),32,RSVD2:27,SEL:1:CHAN0=0x0|CHAN1=0x1,RSVD1:2,TOGGLE:1:TOGGLE=0x1|REGISTER=0x0,DIFF:1:ENABLE=0x1|DISABLE=0x0
ADC,INT_STAT, (ADC_BASE_ADDRESS + 0xc),32,RSVD2:27,SFIFO:1,RSVD1:3,READY:1
ADC,START, (ADC_BASE_ADDRESS + 0x10),32,RSVD:24,NOW:8
ADC,SAMPLE, (ADC_BASE_ADDRESS + 0x14),32,RSVD2:16,OFLOW:1,RSVD1:3,DATA:12
ADC,OFFSET, (ADC_BASE_ADDRESS + 0x18),32,RSVD:19,VALUE:13
ADC,DEBUGA, (ADC_BASE_ADDRESS + 0x1c),32,COLLECTOR:1,RSVD:27,POSTPROC:1,READY_TOG:1,DONE:1,TRIGGER:1
ADC,DEBUGB, (ADC_BASE_ADDRESS + 0x20),32,FINAL_VALUE:12,RAW_VALUE:20
ADC,DEBUGC, (ADC_BASE_ADDRESS + 0x24),32,RSVD:12,PERIODIC_CNT:20
ADC,DBG_READ_ONLY, (ADC_BASE_ADDRESS + 0x28),32,VALUE:32
ADC,SFIFO_CFG, (ADC_BASE_ADDRESS + 0x2c),32,RSVD2:24,FULL:4,RSVD1:1,CLR:1,INT_EN:1,ENABLE:1
ADC,SFIFO, (ADC_BASE_ADDRESS + 0x30),32,RSVD3:1,VALID1:1,RSVD2:1,OFLOW1:1,SAMP1:12,LOST:1,VALID0:1,RSVD1:1,OFLOW0:1,SAMP0:12
ADC,SFIFO_STAT, (ADC_BASE_ADDRESS + 0x34),32,RSVD:25,LOW:1:LOW=0x1,EMPTY:1:EMPTY=0x1,FULL:1:FULL=0x1,SIZE:4
ADC,TOGGLE, (ADC_BASE_ADDRESS + 0x38),32,RSVD:31,STATE:1

#define NVIC_BASE_ADDRESS 0xE000E000

NVIC,EISER0, (NVIC_BASE_ADDRESS + 0x100),32,RSVD1:10,SW3:1,SW2:1,SW1:1,SW0:1,AO_BOD:1,RTC_TMR:1,WDT:1,PWM:1,ADC:1,DSP:1,RTC1:1,RTC0:1,I2C1:1,I2C0:1,SPI1:1,SPI0:1,UART1:1,UART0:1,TIMER1:1,TIMER0:1,GPIO1:1,GPIO0:1
NVIC,EICER0, (NVIC_BASE_ADDRESS + 0x180),32,RSVD1:10,SW3:1,SW2:1,SW1:1,SW0:1,AO_BOD:1,RTC_TMR:1,WDT:1,PWM:1,ADC:1,DSP:1,RTC1:1,RTC0:1,I2C1:1,I2C0:1,SPI1:1,SPI0:1,UART1:1,UART0:1,TIMER1:1,TIMER0:1,GPIO1:1,GPIO0:1
NVIC,EISPR0, (NVIC_BASE_ADDRESS + 0x200),32,RSVD1:10,SW3:1,SW2:1,SW1:1,SW0:1,AO_BOD:1,RTC_TMR:1,WDT:1,PWM:1,ADC:1,DSP:1,RTC1:1,RTC0:1,I2C1:1,I2C0:1,SPI1:1,SPI0:1,UART1:1,UART0:1,TIMER1:1,TIMER0:1,GPIO1:1,GPIO0:1
NVIC,EICPR0, (NVIC_BASE_ADDRESS + 0x280),32,RSVD1:10,SW3:1,SW2:1,SW1:1,SW0:1,AO_BOD:1,RTC_TMR:1,WDT:1,PWM:1,ADC:1,DSP:1,RTC1:1,RTC0:1,I2C1:1,I2C0:1,SPI1:1,SPI0:1,UART1:1,UART0:1,TIMER1:1,TIMER0:1,GPIO1:1,GPIO0:1
NVIC,EIABR0, (NVIC_BASE_ADDRESS + 0x300),32,RSVD1:10,SW3:1,SW2:1,SW1:1,SW0:1,AO_BOD:1,RTC_TMR:1,WDT:1,PWM:1,ADC:1,DSP:1,RTC1:1,RTC0:1,I2C1:1,I2C0:1,SPI1:1,SPI0:1,UART1:1,UART0:1,TIMER1:1,TIMER0:1,GPIO1:1,GPIO0:1
NVIC,EIPLR0, (NVIC_BASE_ADDRESS + 0x400),32,PRI_V3:8,PRI_V2:8,PRI_V1:8,PRI_V0:8
NVIC,EIPLR1, (NVIC_BASE_ADDRESS + 0x404),32,PRI_V7:8,PRI_V6:8,PRI_V5:8,PRI_V4:8
NVIC,EIPLR2, (NVIC_BASE_ADDRESS + 0x408),32,PRI_V11:8,PRI_V10:8,PRI_V9:8,PRI_V8:8
NVIC,EIPLR3, (NVIC_BASE_ADDRESS + 0x40c),32,PRI_V15:8,PRI_V14:8,PRI_V13:8,PRI_V12:8
NVIC,EIPLR4, (NVIC_BASE_ADDRESS + 0x410),32,PRI_V19:8,PRI_V18:8,PRI_V17:8,PRI_V16:8
NVIC,EIPLR5, (NVIC_BASE_ADDRESS + 0x414),32,PRI_V23:8,PRI_V22:8,PRI_V21:8,PRI_V20:8
NVIC,EIPLR6, (NVIC_BASE_ADDRESS + 0x418),32,PRI_V27:8,PRI_V26:8,PRI_V25:8,PRI_V24:8
NVIC,EIPLR7, (NVIC_BASE_ADDRESS + 0x41c),32,PRI_V31:8,PRI_V30:8,PRI_V29:8,PRI_V28:8
NVIC,ICSR, (NVIC_BASE_ADDRESS + 0xd04),32,NMIPENDSET:1,RSVD1:2,PENDSVSET:1,PENDSVCLR:1,PENDSTSET:1,PENDSTCLR:1,RSVD2:1,ISRPREEMPT:1,ISRPENDING:1,VECTPENDING:10,RETTOBASE:1,RSVD3:2,VECTACTIVE:9
NVIC,AIRCR, (NVIC_BASE_ADDRESS + 0xd0c),32,VECTKEY:16,ENDIANESS:1,RSVD1:4,PRIGROUP:3,RSVD2:5,SYSRESETREQ:1,VECTCLRACTIVE:1,VECTRESET:1
NVIC,SCR, (NVIC_BASE_ADDRESS + 0xd10),32,RSVD1:27,SEVONPEND:1,RSVD2:1,SLEEPDEEP:1,SLEEPONEXIT:1,RSVD3:1
NVIC,CCR, (NVIC_BASE_ADDRESS + 0xd14),32,RSVD1:22,STKALIGN:1,BFHFNMIGN:1,RSVD2:3,DIV_0_TRP:1,UNALIGN_TRP:1,RSVD3:1,USERSETMPEND:1,NONBASETHRDENA:1
NVIC,SEPLR0, (NVIC_BASE_ADDRESS + 0xd18),32,RSVD1:8,PRI_6:8,PRI_5:8,PRI_4:8
NVIC,SEPLR1, (NVIC_BASE_ADDRESS + 0xd1c),32,PRI_11:8,RSVD1:24
NVIC,SEPLR2, (NVIC_BASE_ADDRESS + 0xd20),32,PRI_15:8,PRI_14:8,RSVD1:8,PRI_12:8
NVIC,SHCSR, (NVIC_BASE_ADDRESS + 0xd24),32,RSVD1:13,USGFAULTENA:1,BUSFAULTENA:1,MEMFAULTENA:1,SVCALLPENDED:1,BUSFAULTPENDED:1,MEMFAULTPENDED:1,USGFAULTPENDED:1,SYSTICKACT:1,PENDSVACT:1,RSVD2:1,MONITORACT:1,SVCALLACT:1,RSVD3:3,USGFAULTACT:1,RSVD4:1,BUSFAULTACT:1,MEMFAULTACT:1
NVIC,CFSR, (NVIC_BASE_ADDRESS + 0xd28),32,RSVD1:6,DIVBYZERO:1,UNALIGNED:1,RSVD2:4,NOCP:1,INVPC:1,INVSTATE:1,UNDEFINSTR:1,BFARVALID:1,RSVD3:2,STKERR:1,UNSTKERR:1,IMPREISERR:1,PREISERR:1,IBUSERR:1,MMARVALID:1,RSVD4:2,MSTKERR:1,MUNSTKERR:1,RSVD5:1,DACCVIOL:1,IACCVIOL:1
NVIC,HFSR, (NVIC_BASE_ADDRESS + 0xd2c),32,DEBUGEVT:1,FORCED:1,RSVD1:28,VECTBL:1,RSVD2:1
NVIC,DFSR, (NVIC_BASE_ADDRESS + 0xd30),32,RSVD1:27,EXTERNAL:1,VCATCH:1,DWTTRAP:1,BKPT:1,HALTED:1
NVIC,MMAR, (NVIC_BASE_ADDRESS + 0xd34),32,MMAR:32
NVIC,BFAR, (NVIC_BASE_ADDRESS + 0xd38),32,BFAR:32
NVIC,STIR, (NVIC_BASE_ADDRESS + 0xf00),32,RSVD1:23,INTID:9

#define FLASH_CTLR_BASE_ADDRESS 0xE0080000

FLASH_CTLR,STATUS, (FLASH_CTLR_BASE_ADDRESS + 0x0),32,RSVD:31,READY:1:READY=0x1|NOT_READY=0x0
FLASH_CTLR,CONTROLEN, (FLASH_CTLR_BASE_ADDRESS + 0x4),32,KEY:32
FLASH_CTLR,CONTROL0, (FLASH_CTLR_BASE_ADDRESS + 0x10),32,RSVD0:31,LVEN:1:LOWV=0x1|HIGHV=0x0
FLASH_CTLR,CONTROL1, (FLASH_CTLR_BASE_ADDRESS + 0x14),32,RSVD6:3,PROT_REF_CELL_ERASE:1,PROT_MASS_ERASE:1,PROT_ERASE:1,PROT_PROGRAM:1,PROT_INFO:1,RSVD5:3,TIMEREN:1,RSVD4:3,TMR:1,RSVD3:2,NVSTR:1,PROG:1,RSVD2:2,MAS1:1,ERASE:1,RSVD1:3,IFREN:1,RSVD0:1,SE:1,YE:1,XE:1
FLASH_CTLR,CONTROL2, (FLASH_CTLR_BASE_ADDRESS + 0x18),32,RSVD:29,IFREN1:1:ENABLE=0x1|DISABLE=0x0,REDEN:2:NORMAL=0x0|PAGE0=0x1|PAGE1=0x2
FLASH_CTLR,TIMER, (FLASH_CTLR_BASE_ADDRESS + 0x20),32,RSVD:12,COUNT:20
FLASH_CTLR,ADDR, (FLASH_CTLR_BASE_ADDRESS + 0x30),32,ADDR:32
FLASH_CTLR,DATA0, (FLASH_CTLR_BASE_ADDRESS + 0x40),32,DATA:32
FLASH_CTLR,DATA1, (FLASH_CTLR_BASE_ADDRESS + 0x44),32,DATA:32
FLASH_CTLR,DATA2, (FLASH_CTLR_BASE_ADDRESS + 0x48),32,DATA:32
FLASH_CTLR,DATA3, (FLASH_CTLR_BASE_ADDRESS + 0x4c),32,DATA:32

#define DSPCTRL_M3_BASE_ADDRESS 0x40800000

DSPCTRL_M3,DSP_CTRL, (DSPCTRL_M3_BASE_ADDRESS + 0x0),32,RSVD:27,HOLD_TOGGLE_EN:1,DMS_HOLD_EN:1,DMA_INV_PRIO:1,CORE_HOLD:1,RESET_DSP:1
DSPCTRL_M3,DSP_STATUS, (DSPCTRL_M3_BASE_ADDRESS + 0x4),32,RSVD:28,AHB_RELEASE2_HOLD:1,AHB_RELEASE_HOLD:1,DSP_INIT_HOLD:1,CORE_HOLD_ACK:1
DSPCTRL_M3,RELEASE_HOLD_PULSE, (DSPCTRL_M3_BASE_ADDRESS + 0x8),32,DATA:32
DSPCTRL_M3,DMA_SRCRDY_12, (DSPCTRL_M3_BASE_ADDRESS + 0x20),32,RSVD:31,READY:1
DSPCTRL_M3,DMA_SRCRDY_13, (DSPCTRL_M3_BASE_ADDRESS + 0x24),32,RSVD:31,READY:1
DSPCTRL_M3,DMA_SRCRDY_14, (DSPCTRL_M3_BASE_ADDRESS + 0x28),32,RSVD:31,READY:1
DSPCTRL_M3,DMA_SRCRDY_15, (DSPCTRL_M3_BASE_ADDRESS + 0x2c),32,RSVD:31,READY:1
DSPCTRL_M3,DMA_DSTRDY_12, (DSPCTRL_M3_BASE_ADDRESS + 0x30),32,RSVD:31,READY:1
DSPCTRL_M3,DMA_DSTRDY_13, (DSPCTRL_M3_BASE_ADDRESS + 0x34),32,RSVD:31,READY:1
DSPCTRL_M3,DMA_DSTRDY_14, (DSPCTRL_M3_BASE_ADDRESS + 0x38),32,RSVD:31,READY:1
DSPCTRL_M3,DMA_DSTRDY_15, (DSPCTRL_M3_BASE_ADDRESS + 0x3c),32,RSVD:31,READY:1
DSPCTRL_M3,DSP_LOCKUP_DEBUG, (DSPCTRL_M3_BASE_ADDRESS + 0x40),32,RSVD:4,core_hold_dmatimeout:1,loop_en:1,break_out:1,loop_overflow:1,halt_ack:1,dms_hold_en:1,pmem_cs_cf:1,garbage:1,io_data_rddata_spi_hold:1,io_data_rddata_i2c_hold:1,io_i2s_hold:1,io_data_rddata_ahb_window_hold:1,stop_ack_reg:1,core_hold_ack:1,io_slave_hold:1,pmem_a_cf:13
DSPCTRL_M3,DSP_STACK_DEBUG1, (DSPCTRL_M3_BASE_ADDRESS + 0x44),32,RSVD:17,MAX_STACK_ADDR:15
DSPCTRL_M3,DSP_HOLD_DEBUG0, (DSPCTRL_M3_BASE_ADDRESS + 0x48),32,RSVD2:16,RESET:1,RSVD1:7,HOLD_COUNT:8
DSPCTRL_M3,READONLY_DSP_CONFIG_STATUS, (DSPCTRL_M3_BASE_ADDRESS + 0x4c),32,RSVD3:16,IO_CMD_IN_PROG:1,WARN_BAD_AHB_RESP:1,WARN_DSP2AHB_OOO:1,NESTED_LOOP_OFLOW:1,RSVD2:2,DSP_SPI_CLK_ON:1,DSP_I2C_CLK_ON:1,ANY_WR_INV_CACHE:1,MODULO_FIX_DISABLE:1,DMA_BYTE_ACC_DISABLE:1,RSVD1:1,START_HALFWORD:1,CACHE_DISABLE:1,DONT_WAIT:1,HALFWORD_ENDIAN:1
DSPCTRL_M3,SEMAPHORE0, (DSPCTRL_M3_BASE_ADDRESS + 0x21030),32,RSVD:31,SEMAPHORE:1
DSPCTRL_M3,SEMAPHORE1, (DSPCTRL_M3_BASE_ADDRESS + 0x21034),32,RSVD:31,SEMAPHORE:1
DSPCTRL_M3,SEMAPHORE2, (DSPCTRL_M3_BASE_ADDRESS + 0x21038),32,RSVD:31,SEMAPHORE:1
DSPCTRL_M3,SEMAPHORE3, (DSPCTRL_M3_BASE_ADDRESS + 0x2103c),32,RSVD:31,SEMAPHORE:1

#define MBOX_M3_BASE_ADDRESS 0x40800100

MBOX_M3,M32DSP_LOWER, (MBOX_M3_BASE_ADDRESS + 0x0),32,ODD:16,DATA:16
MBOX_M3,M32DSP_STATUS, (MBOX_M3_BASE_ADDRESS + 0x4),32,RSVD:31,BUSY:1
MBOX_M3,DSP2M3_MBOX_LOWER, (MBOX_M3_BASE_ADDRESS + 0x8),32,ODD:16,DATA:16
MBOX_M3,M32DSP_EXTEND, (MBOX_M3_BASE_ADDRESS + 0xc),32,DATA:32
MBOX_M3,DSP2M3_MBOX_EXTEND, (MBOX_M3_BASE_ADDRESS + 0x10),32,DATA:32

*/

#define GPIO_BASE_ADDRESS 0x40010000


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_csr_u
{
  uint32_t V;
  struct reg_gpio_csr_s
  {
    uint32_t TICK2GPIOIN         :1;
    uint32_t RSVD0               :15;
    uint32_t M3_TICK_HI          :4;
    uint32_t RSVD1               :12;
  }BF;
} reg_gpio_csr_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for GPIO_CSR_TICK2GPIOIN
//-------------------------------------------------------------------------
#define BFV_GPIO_CSR_TICK2GPIOIN_ENABLE                                 0x1
#define BFV_GPIO_CSR_TICK2GPIOIN_DISABLE                                0x0

#define REG_GPIO_CSR           (*(volatile reg_gpio_csr_t*)((GPIO_BASE_ADDRESS + 0x0)))
#define REG_GPIO_CSR_ADDR      (GPIO_BASE_ADDRESS + 0x0)
#define BP_GPIO_CSR_RSVD0                                                20
#define BM_GPIO_CSR_RSVD0                                        0xFFF00000
#define BP_GPIO_CSR_M3_TICK_HI                                           16
#define BM_GPIO_CSR_M3_TICK_HI                                   0x000F0000
#define BP_GPIO_CSR_RSVD1                                                 1
#define BM_GPIO_CSR_RSVD1                                        0x0000FFFE
#define BP_GPIO_CSR_TICK2GPIOIN                                           0
#define BM_GPIO_CSR_TICK2GPIOIN                                  0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_m3_tick_u
{
  uint32_t V;
  struct reg_gpio_m3_tick_s
  {
    uint32_t COUNT               :32;
  }BF;
} reg_gpio_m3_tick_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for GPIO_M3_TICK_COUNT
//-------------------------------------------------------------------------
#define BFV_GPIO_M3_TICK_COUNT_CLEAR_AND_START                       0x474F
#define BFV_GPIO_M3_TICK_COUNT_FREEZE                                0x4E4F
#define BFV_GPIO_M3_TICK_COUNT_RESUME                                0xAAAA

#define REG_GPIO_M3_TICK           (*(volatile reg_gpio_m3_tick_t*)((GPIO_BASE_ADDRESS + 0x4)))
#define REG_GPIO_M3_TICK_ADDR      (GPIO_BASE_ADDRESS + 0x4)
#define BP_GPIO_M3_TICK_COUNT                                             0
#define BM_GPIO_M3_TICK_COUNT                                    0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_xtern_statusa_u
{
  uint32_t V;
  struct reg_gpio_xtern_statusa_s
  {
    uint32_t WARM_START_MODE     :8;
    uint32_t UART0_TX_FULL       :1;
    uint32_t UART0_RX_EMPTY      :1;
    uint32_t UART1_TX_FULL       :1;
    uint32_t UART1_RX_EMPTY      :1;
    uint32_t RTC_FLAG            :1;
    uint32_t RTC_TMR_INT         :1;
    uint32_t M3_FREQ_TOG         :1;
    uint32_t DSP_FREQ_TOG        :1;
    uint32_t INFO_ETA_UNLOCK     :1;
    uint32_t INFO_CUST_UNLOCK    :1;
    uint32_t INFO_DEBUG_ENABLE   :1;
    uint32_t INFO_PRESERVE_SRAM  :1;
    uint32_t INFO_PRESERVE_FLASH :1;
    uint32_t INFO_SECURE_BOOT    :1;
    uint32_t FLUSH_FLASH         :1;
    uint32_t GPIO_PM_MODE        :1;
    uint32_t RSVD0               :8;
  }BF;
} reg_gpio_xtern_statusa_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for GPIO_XTERN_STATUSA_GPIO_PM_MODE
//-------------------------------------------------------------------------
#define BFV_GPIO_XTERN_STATUSA_GPIO_PM_MODE_NORMAL                      0x0
#define BFV_GPIO_XTERN_STATUSA_GPIO_PM_MODE_VALIDATION                  0x1

//-------------------------------------------------------------------------
// field value definitions for GPIO_XTERN_STATUSA_WARM_START_MODE
//-------------------------------------------------------------------------
#define BFV_GPIO_XTERN_STATUSA_WARM_START_MODE_NORMAL_COLD_START        0x0
#define BFV_GPIO_XTERN_STATUSA_WARM_START_MODE_FORCE_COLD_START_IN_FLASH        0x1

#define REG_GPIO_XTERN_STATUSA           (*(volatile reg_gpio_xtern_statusa_t*)((GPIO_BASE_ADDRESS + 0x8)))
#define REG_GPIO_XTERN_STATUSA_ADDR      (GPIO_BASE_ADDRESS + 0x8)
#define BP_GPIO_XTERN_STATUSA_RSVD0                                      24
#define BM_GPIO_XTERN_STATUSA_RSVD0                              0xFF000000
#define BP_GPIO_XTERN_STATUSA_GPIO_PM_MODE                               23
#define BM_GPIO_XTERN_STATUSA_GPIO_PM_MODE                       0x00800000
#define BP_GPIO_XTERN_STATUSA_FLUSH_FLASH                                22
#define BM_GPIO_XTERN_STATUSA_FLUSH_FLASH                        0x00400000
#define BP_GPIO_XTERN_STATUSA_INFO_SECURE_BOOT                           21
#define BM_GPIO_XTERN_STATUSA_INFO_SECURE_BOOT                   0x00200000
#define BP_GPIO_XTERN_STATUSA_INFO_PRESERVE_FLASH                        20
#define BM_GPIO_XTERN_STATUSA_INFO_PRESERVE_FLASH                0x00100000
#define BP_GPIO_XTERN_STATUSA_INFO_PRESERVE_SRAM                         19
#define BM_GPIO_XTERN_STATUSA_INFO_PRESERVE_SRAM                 0x00080000
#define BP_GPIO_XTERN_STATUSA_INFO_DEBUG_ENABLE                          18
#define BM_GPIO_XTERN_STATUSA_INFO_DEBUG_ENABLE                  0x00040000
#define BP_GPIO_XTERN_STATUSA_INFO_CUST_UNLOCK                           17
#define BM_GPIO_XTERN_STATUSA_INFO_CUST_UNLOCK                   0x00020000
#define BP_GPIO_XTERN_STATUSA_INFO_ETA_UNLOCK                            16
#define BM_GPIO_XTERN_STATUSA_INFO_ETA_UNLOCK                    0x00010000
#define BP_GPIO_XTERN_STATUSA_DSP_FREQ_TOG                               15
#define BM_GPIO_XTERN_STATUSA_DSP_FREQ_TOG                       0x00008000
#define BP_GPIO_XTERN_STATUSA_M3_FREQ_TOG                                14
#define BM_GPIO_XTERN_STATUSA_M3_FREQ_TOG                        0x00004000
#define BP_GPIO_XTERN_STATUSA_RTC_TMR_INT                                13
#define BM_GPIO_XTERN_STATUSA_RTC_TMR_INT                        0x00002000
#define BP_GPIO_XTERN_STATUSA_RTC_FLAG                                   12
#define BM_GPIO_XTERN_STATUSA_RTC_FLAG                           0x00001000
#define BP_GPIO_XTERN_STATUSA_UART1_RX_EMPTY                             11
#define BM_GPIO_XTERN_STATUSA_UART1_RX_EMPTY                     0x00000800
#define BP_GPIO_XTERN_STATUSA_UART1_TX_FULL                              10
#define BM_GPIO_XTERN_STATUSA_UART1_TX_FULL                      0x00000400
#define BP_GPIO_XTERN_STATUSA_UART0_RX_EMPTY                              9
#define BM_GPIO_XTERN_STATUSA_UART0_RX_EMPTY                     0x00000200
#define BP_GPIO_XTERN_STATUSA_UART0_TX_FULL                               8
#define BM_GPIO_XTERN_STATUSA_UART0_TX_FULL                      0x00000100
#define BP_GPIO_XTERN_STATUSA_WARM_START_MODE                             0
#define BM_GPIO_XTERN_STATUSA_WARM_START_MODE                    0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_data_in_u
{
  uint32_t V;
  struct reg_gpio_data_in_s
  {
    uint32_t IO0                 :1;
    uint32_t IO1                 :1;
    uint32_t IO2                 :1;
    uint32_t IO3                 :1;
    uint32_t IO4                 :1;
    uint32_t IO5                 :1;
    uint32_t IO6                 :1;
    uint32_t IO7                 :1;
    uint32_t IO8                 :1;
    uint32_t IO9                 :1;
    uint32_t IO10                :1;
    uint32_t IO11                :1;
    uint32_t IO12                :1;
    uint32_t IO13                :1;
    uint32_t IO14                :1;
    uint32_t IO15                :1;
    uint32_t IO16                :1;
    uint32_t IO17                :1;
    uint32_t IO18                :1;
    uint32_t IO19                :1;
    uint32_t IO20                :1;
    uint32_t IO21                :1;
    uint32_t IO22                :1;
    uint32_t IO23                :1;
    uint32_t IO24                :1;
    uint32_t IO25                :1;
    uint32_t IO26                :1;
    uint32_t IO27                :1;
    uint32_t IO28                :1;
    uint32_t IO29                :1;
    uint32_t IO30                :1;
    uint32_t IO31                :1;
  }BF;
} reg_gpio_data_in_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO_DATA_IN           (*(volatile reg_gpio_data_in_t*)((GPIO_BASE_ADDRESS + 0xC)))
#define REG_GPIO_DATA_IN_ADDR      (GPIO_BASE_ADDRESS + 0xC)
#define BP_GPIO_DATA_IN_IO31                                             31
#define BM_GPIO_DATA_IN_IO31                                     0x80000000
#define BP_GPIO_DATA_IN_IO30                                             30
#define BM_GPIO_DATA_IN_IO30                                     0x40000000
#define BP_GPIO_DATA_IN_IO29                                             29
#define BM_GPIO_DATA_IN_IO29                                     0x20000000
#define BP_GPIO_DATA_IN_IO28                                             28
#define BM_GPIO_DATA_IN_IO28                                     0x10000000
#define BP_GPIO_DATA_IN_IO27                                             27
#define BM_GPIO_DATA_IN_IO27                                     0x08000000
#define BP_GPIO_DATA_IN_IO26                                             26
#define BM_GPIO_DATA_IN_IO26                                     0x04000000
#define BP_GPIO_DATA_IN_IO25                                             25
#define BM_GPIO_DATA_IN_IO25                                     0x02000000
#define BP_GPIO_DATA_IN_IO24                                             24
#define BM_GPIO_DATA_IN_IO24                                     0x01000000
#define BP_GPIO_DATA_IN_IO23                                             23
#define BM_GPIO_DATA_IN_IO23                                     0x00800000
#define BP_GPIO_DATA_IN_IO22                                             22
#define BM_GPIO_DATA_IN_IO22                                     0x00400000
#define BP_GPIO_DATA_IN_IO21                                             21
#define BM_GPIO_DATA_IN_IO21                                     0x00200000
#define BP_GPIO_DATA_IN_IO20                                             20
#define BM_GPIO_DATA_IN_IO20                                     0x00100000
#define BP_GPIO_DATA_IN_IO19                                             19
#define BM_GPIO_DATA_IN_IO19                                     0x00080000
#define BP_GPIO_DATA_IN_IO18                                             18
#define BM_GPIO_DATA_IN_IO18                                     0x00040000
#define BP_GPIO_DATA_IN_IO17                                             17
#define BM_GPIO_DATA_IN_IO17                                     0x00020000
#define BP_GPIO_DATA_IN_IO16                                             16
#define BM_GPIO_DATA_IN_IO16                                     0x00010000
#define BP_GPIO_DATA_IN_IO15                                             15
#define BM_GPIO_DATA_IN_IO15                                     0x00008000
#define BP_GPIO_DATA_IN_IO14                                             14
#define BM_GPIO_DATA_IN_IO14                                     0x00004000
#define BP_GPIO_DATA_IN_IO13                                             13
#define BM_GPIO_DATA_IN_IO13                                     0x00002000
#define BP_GPIO_DATA_IN_IO12                                             12
#define BM_GPIO_DATA_IN_IO12                                     0x00001000
#define BP_GPIO_DATA_IN_IO11                                             11
#define BM_GPIO_DATA_IN_IO11                                     0x00000800
#define BP_GPIO_DATA_IN_IO10                                             10
#define BM_GPIO_DATA_IN_IO10                                     0x00000400
#define BP_GPIO_DATA_IN_IO9                                               9
#define BM_GPIO_DATA_IN_IO9                                      0x00000200
#define BP_GPIO_DATA_IN_IO8                                               8
#define BM_GPIO_DATA_IN_IO8                                      0x00000100
#define BP_GPIO_DATA_IN_IO7                                               7
#define BM_GPIO_DATA_IN_IO7                                      0x00000080
#define BP_GPIO_DATA_IN_IO6                                               6
#define BM_GPIO_DATA_IN_IO6                                      0x00000040
#define BP_GPIO_DATA_IN_IO5                                               5
#define BM_GPIO_DATA_IN_IO5                                      0x00000020
#define BP_GPIO_DATA_IN_IO4                                               4
#define BM_GPIO_DATA_IN_IO4                                      0x00000010
#define BP_GPIO_DATA_IN_IO3                                               3
#define BM_GPIO_DATA_IN_IO3                                      0x00000008
#define BP_GPIO_DATA_IN_IO2                                               2
#define BM_GPIO_DATA_IN_IO2                                      0x00000004
#define BP_GPIO_DATA_IN_IO1                                               1
#define BM_GPIO_DATA_IN_IO1                                      0x00000002
#define BP_GPIO_DATA_IN_IO0                                               0
#define BM_GPIO_DATA_IN_IO0                                      0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_data_out_u
{
  uint32_t V;
  struct reg_gpio_data_out_s
  {
    uint32_t IO0                 :1;
    uint32_t IO1                 :1;
    uint32_t IO2                 :1;
    uint32_t IO3                 :1;
    uint32_t IO4                 :1;
    uint32_t IO5                 :1;
    uint32_t IO6                 :1;
    uint32_t IO7                 :1;
    uint32_t IO8                 :1;
    uint32_t IO9                 :1;
    uint32_t IO10                :1;
    uint32_t IO11                :1;
    uint32_t IO12                :1;
    uint32_t IO13                :1;
    uint32_t IO14                :1;
    uint32_t IO15                :1;
    uint32_t IO16                :1;
    uint32_t IO17                :1;
    uint32_t IO18                :1;
    uint32_t IO19                :1;
    uint32_t IO20                :1;
    uint32_t IO21                :1;
    uint32_t IO22                :1;
    uint32_t IO23                :1;
    uint32_t IO24                :1;
    uint32_t IO25                :1;
    uint32_t IO26                :1;
    uint32_t IO27                :1;
    uint32_t IO28                :1;
    uint32_t IO29                :1;
    uint32_t IO30                :1;
    uint32_t IO31                :1;
  }BF;
} reg_gpio_data_out_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO_DATA_OUT           (*(volatile reg_gpio_data_out_t*)((GPIO_BASE_ADDRESS + 0x10)))
#define REG_GPIO_DATA_OUT_ADDR      (GPIO_BASE_ADDRESS + 0x10)
#define BP_GPIO_DATA_OUT_IO31                                            31
#define BM_GPIO_DATA_OUT_IO31                                    0x80000000
#define BP_GPIO_DATA_OUT_IO30                                            30
#define BM_GPIO_DATA_OUT_IO30                                    0x40000000
#define BP_GPIO_DATA_OUT_IO29                                            29
#define BM_GPIO_DATA_OUT_IO29                                    0x20000000
#define BP_GPIO_DATA_OUT_IO28                                            28
#define BM_GPIO_DATA_OUT_IO28                                    0x10000000
#define BP_GPIO_DATA_OUT_IO27                                            27
#define BM_GPIO_DATA_OUT_IO27                                    0x08000000
#define BP_GPIO_DATA_OUT_IO26                                            26
#define BM_GPIO_DATA_OUT_IO26                                    0x04000000
#define BP_GPIO_DATA_OUT_IO25                                            25
#define BM_GPIO_DATA_OUT_IO25                                    0x02000000
#define BP_GPIO_DATA_OUT_IO24                                            24
#define BM_GPIO_DATA_OUT_IO24                                    0x01000000
#define BP_GPIO_DATA_OUT_IO23                                            23
#define BM_GPIO_DATA_OUT_IO23                                    0x00800000
#define BP_GPIO_DATA_OUT_IO22                                            22
#define BM_GPIO_DATA_OUT_IO22                                    0x00400000
#define BP_GPIO_DATA_OUT_IO21                                            21
#define BM_GPIO_DATA_OUT_IO21                                    0x00200000
#define BP_GPIO_DATA_OUT_IO20                                            20
#define BM_GPIO_DATA_OUT_IO20                                    0x00100000
#define BP_GPIO_DATA_OUT_IO19                                            19
#define BM_GPIO_DATA_OUT_IO19                                    0x00080000
#define BP_GPIO_DATA_OUT_IO18                                            18
#define BM_GPIO_DATA_OUT_IO18                                    0x00040000
#define BP_GPIO_DATA_OUT_IO17                                            17
#define BM_GPIO_DATA_OUT_IO17                                    0x00020000
#define BP_GPIO_DATA_OUT_IO16                                            16
#define BM_GPIO_DATA_OUT_IO16                                    0x00010000
#define BP_GPIO_DATA_OUT_IO15                                            15
#define BM_GPIO_DATA_OUT_IO15                                    0x00008000
#define BP_GPIO_DATA_OUT_IO14                                            14
#define BM_GPIO_DATA_OUT_IO14                                    0x00004000
#define BP_GPIO_DATA_OUT_IO13                                            13
#define BM_GPIO_DATA_OUT_IO13                                    0x00002000
#define BP_GPIO_DATA_OUT_IO12                                            12
#define BM_GPIO_DATA_OUT_IO12                                    0x00001000
#define BP_GPIO_DATA_OUT_IO11                                            11
#define BM_GPIO_DATA_OUT_IO11                                    0x00000800
#define BP_GPIO_DATA_OUT_IO10                                            10
#define BM_GPIO_DATA_OUT_IO10                                    0x00000400
#define BP_GPIO_DATA_OUT_IO9                                              9
#define BM_GPIO_DATA_OUT_IO9                                     0x00000200
#define BP_GPIO_DATA_OUT_IO8                                              8
#define BM_GPIO_DATA_OUT_IO8                                     0x00000100
#define BP_GPIO_DATA_OUT_IO7                                              7
#define BM_GPIO_DATA_OUT_IO7                                     0x00000080
#define BP_GPIO_DATA_OUT_IO6                                              6
#define BM_GPIO_DATA_OUT_IO6                                     0x00000040
#define BP_GPIO_DATA_OUT_IO5                                              5
#define BM_GPIO_DATA_OUT_IO5                                     0x00000020
#define BP_GPIO_DATA_OUT_IO4                                              4
#define BM_GPIO_DATA_OUT_IO4                                     0x00000010
#define BP_GPIO_DATA_OUT_IO3                                              3
#define BM_GPIO_DATA_OUT_IO3                                     0x00000008
#define BP_GPIO_DATA_OUT_IO2                                              2
#define BM_GPIO_DATA_OUT_IO2                                     0x00000004
#define BP_GPIO_DATA_OUT_IO1                                              1
#define BM_GPIO_DATA_OUT_IO1                                     0x00000002
#define BP_GPIO_DATA_OUT_IO0                                              0
#define BM_GPIO_DATA_OUT_IO0                                     0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_data_out_set_u
{
  uint32_t V;
  struct reg_gpio_data_out_set_s
  {
    uint32_t IO0                 :1;
    uint32_t IO1                 :1;
    uint32_t IO2                 :1;
    uint32_t IO3                 :1;
    uint32_t IO4                 :1;
    uint32_t IO5                 :1;
    uint32_t IO6                 :1;
    uint32_t IO7                 :1;
    uint32_t IO8                 :1;
    uint32_t IO9                 :1;
    uint32_t IO10                :1;
    uint32_t IO11                :1;
    uint32_t IO12                :1;
    uint32_t IO13                :1;
    uint32_t IO14                :1;
    uint32_t IO15                :1;
    uint32_t IO16                :1;
    uint32_t IO17                :1;
    uint32_t IO18                :1;
    uint32_t IO19                :1;
    uint32_t IO20                :1;
    uint32_t IO21                :1;
    uint32_t IO22                :1;
    uint32_t IO23                :1;
    uint32_t IO24                :1;
    uint32_t IO25                :1;
    uint32_t IO26                :1;
    uint32_t IO27                :1;
    uint32_t IO28                :1;
    uint32_t IO29                :1;
    uint32_t IO30                :1;
    uint32_t IO31                :1;
  }BF;
} reg_gpio_data_out_set_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO_DATA_OUT_SET           (*(volatile reg_gpio_data_out_set_t*)((GPIO_BASE_ADDRESS + 0x14)))
#define REG_GPIO_DATA_OUT_SET_ADDR      (GPIO_BASE_ADDRESS + 0x14)
#define BP_GPIO_DATA_OUT_SET_IO31                                        31
#define BM_GPIO_DATA_OUT_SET_IO31                                0x80000000
#define BP_GPIO_DATA_OUT_SET_IO30                                        30
#define BM_GPIO_DATA_OUT_SET_IO30                                0x40000000
#define BP_GPIO_DATA_OUT_SET_IO29                                        29
#define BM_GPIO_DATA_OUT_SET_IO29                                0x20000000
#define BP_GPIO_DATA_OUT_SET_IO28                                        28
#define BM_GPIO_DATA_OUT_SET_IO28                                0x10000000
#define BP_GPIO_DATA_OUT_SET_IO27                                        27
#define BM_GPIO_DATA_OUT_SET_IO27                                0x08000000
#define BP_GPIO_DATA_OUT_SET_IO26                                        26
#define BM_GPIO_DATA_OUT_SET_IO26                                0x04000000
#define BP_GPIO_DATA_OUT_SET_IO25                                        25
#define BM_GPIO_DATA_OUT_SET_IO25                                0x02000000
#define BP_GPIO_DATA_OUT_SET_IO24                                        24
#define BM_GPIO_DATA_OUT_SET_IO24                                0x01000000
#define BP_GPIO_DATA_OUT_SET_IO23                                        23
#define BM_GPIO_DATA_OUT_SET_IO23                                0x00800000
#define BP_GPIO_DATA_OUT_SET_IO22                                        22
#define BM_GPIO_DATA_OUT_SET_IO22                                0x00400000
#define BP_GPIO_DATA_OUT_SET_IO21                                        21
#define BM_GPIO_DATA_OUT_SET_IO21                                0x00200000
#define BP_GPIO_DATA_OUT_SET_IO20                                        20
#define BM_GPIO_DATA_OUT_SET_IO20                                0x00100000
#define BP_GPIO_DATA_OUT_SET_IO19                                        19
#define BM_GPIO_DATA_OUT_SET_IO19                                0x00080000
#define BP_GPIO_DATA_OUT_SET_IO18                                        18
#define BM_GPIO_DATA_OUT_SET_IO18                                0x00040000
#define BP_GPIO_DATA_OUT_SET_IO17                                        17
#define BM_GPIO_DATA_OUT_SET_IO17                                0x00020000
#define BP_GPIO_DATA_OUT_SET_IO16                                        16
#define BM_GPIO_DATA_OUT_SET_IO16                                0x00010000
#define BP_GPIO_DATA_OUT_SET_IO15                                        15
#define BM_GPIO_DATA_OUT_SET_IO15                                0x00008000
#define BP_GPIO_DATA_OUT_SET_IO14                                        14
#define BM_GPIO_DATA_OUT_SET_IO14                                0x00004000
#define BP_GPIO_DATA_OUT_SET_IO13                                        13
#define BM_GPIO_DATA_OUT_SET_IO13                                0x00002000
#define BP_GPIO_DATA_OUT_SET_IO12                                        12
#define BM_GPIO_DATA_OUT_SET_IO12                                0x00001000
#define BP_GPIO_DATA_OUT_SET_IO11                                        11
#define BM_GPIO_DATA_OUT_SET_IO11                                0x00000800
#define BP_GPIO_DATA_OUT_SET_IO10                                        10
#define BM_GPIO_DATA_OUT_SET_IO10                                0x00000400
#define BP_GPIO_DATA_OUT_SET_IO9                                          9
#define BM_GPIO_DATA_OUT_SET_IO9                                 0x00000200
#define BP_GPIO_DATA_OUT_SET_IO8                                          8
#define BM_GPIO_DATA_OUT_SET_IO8                                 0x00000100
#define BP_GPIO_DATA_OUT_SET_IO7                                          7
#define BM_GPIO_DATA_OUT_SET_IO7                                 0x00000080
#define BP_GPIO_DATA_OUT_SET_IO6                                          6
#define BM_GPIO_DATA_OUT_SET_IO6                                 0x00000040
#define BP_GPIO_DATA_OUT_SET_IO5                                          5
#define BM_GPIO_DATA_OUT_SET_IO5                                 0x00000020
#define BP_GPIO_DATA_OUT_SET_IO4                                          4
#define BM_GPIO_DATA_OUT_SET_IO4                                 0x00000010
#define BP_GPIO_DATA_OUT_SET_IO3                                          3
#define BM_GPIO_DATA_OUT_SET_IO3                                 0x00000008
#define BP_GPIO_DATA_OUT_SET_IO2                                          2
#define BM_GPIO_DATA_OUT_SET_IO2                                 0x00000004
#define BP_GPIO_DATA_OUT_SET_IO1                                          1
#define BM_GPIO_DATA_OUT_SET_IO1                                 0x00000002
#define BP_GPIO_DATA_OUT_SET_IO0                                          0
#define BM_GPIO_DATA_OUT_SET_IO0                                 0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_data_out_clr_u
{
  uint32_t V;
  struct reg_gpio_data_out_clr_s
  {
    uint32_t IO0                 :1;
    uint32_t IO1                 :1;
    uint32_t IO2                 :1;
    uint32_t IO3                 :1;
    uint32_t IO4                 :1;
    uint32_t IO5                 :1;
    uint32_t IO6                 :1;
    uint32_t IO7                 :1;
    uint32_t IO8                 :1;
    uint32_t IO9                 :1;
    uint32_t IO10                :1;
    uint32_t IO11                :1;
    uint32_t IO12                :1;
    uint32_t IO13                :1;
    uint32_t IO14                :1;
    uint32_t IO15                :1;
    uint32_t IO16                :1;
    uint32_t IO17                :1;
    uint32_t IO18                :1;
    uint32_t IO19                :1;
    uint32_t IO20                :1;
    uint32_t IO21                :1;
    uint32_t IO22                :1;
    uint32_t IO23                :1;
    uint32_t IO24                :1;
    uint32_t IO25                :1;
    uint32_t IO26                :1;
    uint32_t IO27                :1;
    uint32_t IO28                :1;
    uint32_t IO29                :1;
    uint32_t IO30                :1;
    uint32_t IO31                :1;
  }BF;
} reg_gpio_data_out_clr_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO_DATA_OUT_CLR           (*(volatile reg_gpio_data_out_clr_t*)((GPIO_BASE_ADDRESS + 0x18)))
#define REG_GPIO_DATA_OUT_CLR_ADDR      (GPIO_BASE_ADDRESS + 0x18)
#define BP_GPIO_DATA_OUT_CLR_IO31                                        31
#define BM_GPIO_DATA_OUT_CLR_IO31                                0x80000000
#define BP_GPIO_DATA_OUT_CLR_IO30                                        30
#define BM_GPIO_DATA_OUT_CLR_IO30                                0x40000000
#define BP_GPIO_DATA_OUT_CLR_IO29                                        29
#define BM_GPIO_DATA_OUT_CLR_IO29                                0x20000000
#define BP_GPIO_DATA_OUT_CLR_IO28                                        28
#define BM_GPIO_DATA_OUT_CLR_IO28                                0x10000000
#define BP_GPIO_DATA_OUT_CLR_IO27                                        27
#define BM_GPIO_DATA_OUT_CLR_IO27                                0x08000000
#define BP_GPIO_DATA_OUT_CLR_IO26                                        26
#define BM_GPIO_DATA_OUT_CLR_IO26                                0x04000000
#define BP_GPIO_DATA_OUT_CLR_IO25                                        25
#define BM_GPIO_DATA_OUT_CLR_IO25                                0x02000000
#define BP_GPIO_DATA_OUT_CLR_IO24                                        24
#define BM_GPIO_DATA_OUT_CLR_IO24                                0x01000000
#define BP_GPIO_DATA_OUT_CLR_IO23                                        23
#define BM_GPIO_DATA_OUT_CLR_IO23                                0x00800000
#define BP_GPIO_DATA_OUT_CLR_IO22                                        22
#define BM_GPIO_DATA_OUT_CLR_IO22                                0x00400000
#define BP_GPIO_DATA_OUT_CLR_IO21                                        21
#define BM_GPIO_DATA_OUT_CLR_IO21                                0x00200000
#define BP_GPIO_DATA_OUT_CLR_IO20                                        20
#define BM_GPIO_DATA_OUT_CLR_IO20                                0x00100000
#define BP_GPIO_DATA_OUT_CLR_IO19                                        19
#define BM_GPIO_DATA_OUT_CLR_IO19                                0x00080000
#define BP_GPIO_DATA_OUT_CLR_IO18                                        18
#define BM_GPIO_DATA_OUT_CLR_IO18                                0x00040000
#define BP_GPIO_DATA_OUT_CLR_IO17                                        17
#define BM_GPIO_DATA_OUT_CLR_IO17                                0x00020000
#define BP_GPIO_DATA_OUT_CLR_IO16                                        16
#define BM_GPIO_DATA_OUT_CLR_IO16                                0x00010000
#define BP_GPIO_DATA_OUT_CLR_IO15                                        15
#define BM_GPIO_DATA_OUT_CLR_IO15                                0x00008000
#define BP_GPIO_DATA_OUT_CLR_IO14                                        14
#define BM_GPIO_DATA_OUT_CLR_IO14                                0x00004000
#define BP_GPIO_DATA_OUT_CLR_IO13                                        13
#define BM_GPIO_DATA_OUT_CLR_IO13                                0x00002000
#define BP_GPIO_DATA_OUT_CLR_IO12                                        12
#define BM_GPIO_DATA_OUT_CLR_IO12                                0x00001000
#define BP_GPIO_DATA_OUT_CLR_IO11                                        11
#define BM_GPIO_DATA_OUT_CLR_IO11                                0x00000800
#define BP_GPIO_DATA_OUT_CLR_IO10                                        10
#define BM_GPIO_DATA_OUT_CLR_IO10                                0x00000400
#define BP_GPIO_DATA_OUT_CLR_IO9                                          9
#define BM_GPIO_DATA_OUT_CLR_IO9                                 0x00000200
#define BP_GPIO_DATA_OUT_CLR_IO8                                          8
#define BM_GPIO_DATA_OUT_CLR_IO8                                 0x00000100
#define BP_GPIO_DATA_OUT_CLR_IO7                                          7
#define BM_GPIO_DATA_OUT_CLR_IO7                                 0x00000080
#define BP_GPIO_DATA_OUT_CLR_IO6                                          6
#define BM_GPIO_DATA_OUT_CLR_IO6                                 0x00000040
#define BP_GPIO_DATA_OUT_CLR_IO5                                          5
#define BM_GPIO_DATA_OUT_CLR_IO5                                 0x00000020
#define BP_GPIO_DATA_OUT_CLR_IO4                                          4
#define BM_GPIO_DATA_OUT_CLR_IO4                                 0x00000010
#define BP_GPIO_DATA_OUT_CLR_IO3                                          3
#define BM_GPIO_DATA_OUT_CLR_IO3                                 0x00000008
#define BP_GPIO_DATA_OUT_CLR_IO2                                          2
#define BM_GPIO_DATA_OUT_CLR_IO2                                 0x00000004
#define BP_GPIO_DATA_OUT_CLR_IO1                                          1
#define BM_GPIO_DATA_OUT_CLR_IO1                                 0x00000002
#define BP_GPIO_DATA_OUT_CLR_IO0                                          0
#define BM_GPIO_DATA_OUT_CLR_IO0                                 0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_data_out_tog_u
{
  uint32_t V;
  struct reg_gpio_data_out_tog_s
  {
    uint32_t IO0                 :1;
    uint32_t IO1                 :1;
    uint32_t IO2                 :1;
    uint32_t IO3                 :1;
    uint32_t IO4                 :1;
    uint32_t IO5                 :1;
    uint32_t IO6                 :1;
    uint32_t IO7                 :1;
    uint32_t IO8                 :1;
    uint32_t IO9                 :1;
    uint32_t IO10                :1;
    uint32_t IO11                :1;
    uint32_t IO12                :1;
    uint32_t IO13                :1;
    uint32_t IO14                :1;
    uint32_t IO15                :1;
    uint32_t IO16                :1;
    uint32_t IO17                :1;
    uint32_t IO18                :1;
    uint32_t IO19                :1;
    uint32_t IO20                :1;
    uint32_t IO21                :1;
    uint32_t IO22                :1;
    uint32_t IO23                :1;
    uint32_t IO24                :1;
    uint32_t IO25                :1;
    uint32_t IO26                :1;
    uint32_t IO27                :1;
    uint32_t IO28                :1;
    uint32_t IO29                :1;
    uint32_t IO30                :1;
    uint32_t IO31                :1;
  }BF;
} reg_gpio_data_out_tog_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO_DATA_OUT_TOG           (*(volatile reg_gpio_data_out_tog_t*)((GPIO_BASE_ADDRESS + 0x1C)))
#define REG_GPIO_DATA_OUT_TOG_ADDR      (GPIO_BASE_ADDRESS + 0x1C)
#define BP_GPIO_DATA_OUT_TOG_IO31                                        31
#define BM_GPIO_DATA_OUT_TOG_IO31                                0x80000000
#define BP_GPIO_DATA_OUT_TOG_IO30                                        30
#define BM_GPIO_DATA_OUT_TOG_IO30                                0x40000000
#define BP_GPIO_DATA_OUT_TOG_IO29                                        29
#define BM_GPIO_DATA_OUT_TOG_IO29                                0x20000000
#define BP_GPIO_DATA_OUT_TOG_IO28                                        28
#define BM_GPIO_DATA_OUT_TOG_IO28                                0x10000000
#define BP_GPIO_DATA_OUT_TOG_IO27                                        27
#define BM_GPIO_DATA_OUT_TOG_IO27                                0x08000000
#define BP_GPIO_DATA_OUT_TOG_IO26                                        26
#define BM_GPIO_DATA_OUT_TOG_IO26                                0x04000000
#define BP_GPIO_DATA_OUT_TOG_IO25                                        25
#define BM_GPIO_DATA_OUT_TOG_IO25                                0x02000000
#define BP_GPIO_DATA_OUT_TOG_IO24                                        24
#define BM_GPIO_DATA_OUT_TOG_IO24                                0x01000000
#define BP_GPIO_DATA_OUT_TOG_IO23                                        23
#define BM_GPIO_DATA_OUT_TOG_IO23                                0x00800000
#define BP_GPIO_DATA_OUT_TOG_IO22                                        22
#define BM_GPIO_DATA_OUT_TOG_IO22                                0x00400000
#define BP_GPIO_DATA_OUT_TOG_IO21                                        21
#define BM_GPIO_DATA_OUT_TOG_IO21                                0x00200000
#define BP_GPIO_DATA_OUT_TOG_IO20                                        20
#define BM_GPIO_DATA_OUT_TOG_IO20                                0x00100000
#define BP_GPIO_DATA_OUT_TOG_IO19                                        19
#define BM_GPIO_DATA_OUT_TOG_IO19                                0x00080000
#define BP_GPIO_DATA_OUT_TOG_IO18                                        18
#define BM_GPIO_DATA_OUT_TOG_IO18                                0x00040000
#define BP_GPIO_DATA_OUT_TOG_IO17                                        17
#define BM_GPIO_DATA_OUT_TOG_IO17                                0x00020000
#define BP_GPIO_DATA_OUT_TOG_IO16                                        16
#define BM_GPIO_DATA_OUT_TOG_IO16                                0x00010000
#define BP_GPIO_DATA_OUT_TOG_IO15                                        15
#define BM_GPIO_DATA_OUT_TOG_IO15                                0x00008000
#define BP_GPIO_DATA_OUT_TOG_IO14                                        14
#define BM_GPIO_DATA_OUT_TOG_IO14                                0x00004000
#define BP_GPIO_DATA_OUT_TOG_IO13                                        13
#define BM_GPIO_DATA_OUT_TOG_IO13                                0x00002000
#define BP_GPIO_DATA_OUT_TOG_IO12                                        12
#define BM_GPIO_DATA_OUT_TOG_IO12                                0x00001000
#define BP_GPIO_DATA_OUT_TOG_IO11                                        11
#define BM_GPIO_DATA_OUT_TOG_IO11                                0x00000800
#define BP_GPIO_DATA_OUT_TOG_IO10                                        10
#define BM_GPIO_DATA_OUT_TOG_IO10                                0x00000400
#define BP_GPIO_DATA_OUT_TOG_IO9                                          9
#define BM_GPIO_DATA_OUT_TOG_IO9                                 0x00000200
#define BP_GPIO_DATA_OUT_TOG_IO8                                          8
#define BM_GPIO_DATA_OUT_TOG_IO8                                 0x00000100
#define BP_GPIO_DATA_OUT_TOG_IO7                                          7
#define BM_GPIO_DATA_OUT_TOG_IO7                                 0x00000080
#define BP_GPIO_DATA_OUT_TOG_IO6                                          6
#define BM_GPIO_DATA_OUT_TOG_IO6                                 0x00000040
#define BP_GPIO_DATA_OUT_TOG_IO5                                          5
#define BM_GPIO_DATA_OUT_TOG_IO5                                 0x00000020
#define BP_GPIO_DATA_OUT_TOG_IO4                                          4
#define BM_GPIO_DATA_OUT_TOG_IO4                                 0x00000010
#define BP_GPIO_DATA_OUT_TOG_IO3                                          3
#define BM_GPIO_DATA_OUT_TOG_IO3                                 0x00000008
#define BP_GPIO_DATA_OUT_TOG_IO2                                          2
#define BM_GPIO_DATA_OUT_TOG_IO2                                 0x00000004
#define BP_GPIO_DATA_OUT_TOG_IO1                                          1
#define BM_GPIO_DATA_OUT_TOG_IO1                                 0x00000002
#define BP_GPIO_DATA_OUT_TOG_IO0                                          0
#define BM_GPIO_DATA_OUT_TOG_IO0                                 0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_data_enable_u
{
  uint32_t V;
  struct reg_gpio_data_enable_s
  {
    uint32_t IO0                 :1;
    uint32_t IO1                 :1;
    uint32_t IO2                 :1;
    uint32_t IO3                 :1;
    uint32_t IO4                 :1;
    uint32_t IO5                 :1;
    uint32_t IO6                 :1;
    uint32_t IO7                 :1;
    uint32_t IO8                 :1;
    uint32_t IO9                 :1;
    uint32_t IO10                :1;
    uint32_t IO11                :1;
    uint32_t IO12                :1;
    uint32_t IO13                :1;
    uint32_t IO14                :1;
    uint32_t IO15                :1;
    uint32_t IO16                :1;
    uint32_t IO17                :1;
    uint32_t IO18                :1;
    uint32_t IO19                :1;
    uint32_t IO20                :1;
    uint32_t IO21                :1;
    uint32_t IO22                :1;
    uint32_t IO23                :1;
    uint32_t IO24                :1;
    uint32_t IO25                :1;
    uint32_t IO26                :1;
    uint32_t IO27                :1;
    uint32_t IO28                :1;
    uint32_t IO29                :1;
    uint32_t IO30                :1;
    uint32_t IO31                :1;
  }BF;
} reg_gpio_data_enable_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO_DATA_ENABLE           (*(volatile reg_gpio_data_enable_t*)((GPIO_BASE_ADDRESS + 0x20)))
#define REG_GPIO_DATA_ENABLE_ADDR      (GPIO_BASE_ADDRESS + 0x20)
#define BP_GPIO_DATA_ENABLE_IO31                                         31
#define BM_GPIO_DATA_ENABLE_IO31                                 0x80000000
#define BP_GPIO_DATA_ENABLE_IO30                                         30
#define BM_GPIO_DATA_ENABLE_IO30                                 0x40000000
#define BP_GPIO_DATA_ENABLE_IO29                                         29
#define BM_GPIO_DATA_ENABLE_IO29                                 0x20000000
#define BP_GPIO_DATA_ENABLE_IO28                                         28
#define BM_GPIO_DATA_ENABLE_IO28                                 0x10000000
#define BP_GPIO_DATA_ENABLE_IO27                                         27
#define BM_GPIO_DATA_ENABLE_IO27                                 0x08000000
#define BP_GPIO_DATA_ENABLE_IO26                                         26
#define BM_GPIO_DATA_ENABLE_IO26                                 0x04000000
#define BP_GPIO_DATA_ENABLE_IO25                                         25
#define BM_GPIO_DATA_ENABLE_IO25                                 0x02000000
#define BP_GPIO_DATA_ENABLE_IO24                                         24
#define BM_GPIO_DATA_ENABLE_IO24                                 0x01000000
#define BP_GPIO_DATA_ENABLE_IO23                                         23
#define BM_GPIO_DATA_ENABLE_IO23                                 0x00800000
#define BP_GPIO_DATA_ENABLE_IO22                                         22
#define BM_GPIO_DATA_ENABLE_IO22                                 0x00400000
#define BP_GPIO_DATA_ENABLE_IO21                                         21
#define BM_GPIO_DATA_ENABLE_IO21                                 0x00200000
#define BP_GPIO_DATA_ENABLE_IO20                                         20
#define BM_GPIO_DATA_ENABLE_IO20                                 0x00100000
#define BP_GPIO_DATA_ENABLE_IO19                                         19
#define BM_GPIO_DATA_ENABLE_IO19                                 0x00080000
#define BP_GPIO_DATA_ENABLE_IO18                                         18
#define BM_GPIO_DATA_ENABLE_IO18                                 0x00040000
#define BP_GPIO_DATA_ENABLE_IO17                                         17
#define BM_GPIO_DATA_ENABLE_IO17                                 0x00020000
#define BP_GPIO_DATA_ENABLE_IO16                                         16
#define BM_GPIO_DATA_ENABLE_IO16                                 0x00010000
#define BP_GPIO_DATA_ENABLE_IO15                                         15
#define BM_GPIO_DATA_ENABLE_IO15                                 0x00008000
#define BP_GPIO_DATA_ENABLE_IO14                                         14
#define BM_GPIO_DATA_ENABLE_IO14                                 0x00004000
#define BP_GPIO_DATA_ENABLE_IO13                                         13
#define BM_GPIO_DATA_ENABLE_IO13                                 0x00002000
#define BP_GPIO_DATA_ENABLE_IO12                                         12
#define BM_GPIO_DATA_ENABLE_IO12                                 0x00001000
#define BP_GPIO_DATA_ENABLE_IO11                                         11
#define BM_GPIO_DATA_ENABLE_IO11                                 0x00000800
#define BP_GPIO_DATA_ENABLE_IO10                                         10
#define BM_GPIO_DATA_ENABLE_IO10                                 0x00000400
#define BP_GPIO_DATA_ENABLE_IO9                                           9
#define BM_GPIO_DATA_ENABLE_IO9                                  0x00000200
#define BP_GPIO_DATA_ENABLE_IO8                                           8
#define BM_GPIO_DATA_ENABLE_IO8                                  0x00000100
#define BP_GPIO_DATA_ENABLE_IO7                                           7
#define BM_GPIO_DATA_ENABLE_IO7                                  0x00000080
#define BP_GPIO_DATA_ENABLE_IO6                                           6
#define BM_GPIO_DATA_ENABLE_IO6                                  0x00000040
#define BP_GPIO_DATA_ENABLE_IO5                                           5
#define BM_GPIO_DATA_ENABLE_IO5                                  0x00000020
#define BP_GPIO_DATA_ENABLE_IO4                                           4
#define BM_GPIO_DATA_ENABLE_IO4                                  0x00000010
#define BP_GPIO_DATA_ENABLE_IO3                                           3
#define BM_GPIO_DATA_ENABLE_IO3                                  0x00000008
#define BP_GPIO_DATA_ENABLE_IO2                                           2
#define BM_GPIO_DATA_ENABLE_IO2                                  0x00000004
#define BP_GPIO_DATA_ENABLE_IO1                                           1
#define BM_GPIO_DATA_ENABLE_IO1                                  0x00000002
#define BP_GPIO_DATA_ENABLE_IO0                                           0
#define BM_GPIO_DATA_ENABLE_IO0                                  0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_data_enable_set_u
{
  uint32_t V;
  struct reg_gpio_data_enable_set_s
  {
    uint32_t IO0                 :1;
    uint32_t IO1                 :1;
    uint32_t IO2                 :1;
    uint32_t IO3                 :1;
    uint32_t IO4                 :1;
    uint32_t IO5                 :1;
    uint32_t IO6                 :1;
    uint32_t IO7                 :1;
    uint32_t IO8                 :1;
    uint32_t IO9                 :1;
    uint32_t IO10                :1;
    uint32_t IO11                :1;
    uint32_t IO12                :1;
    uint32_t IO13                :1;
    uint32_t IO14                :1;
    uint32_t IO15                :1;
    uint32_t IO16                :1;
    uint32_t IO17                :1;
    uint32_t IO18                :1;
    uint32_t IO19                :1;
    uint32_t IO20                :1;
    uint32_t IO21                :1;
    uint32_t IO22                :1;
    uint32_t IO23                :1;
    uint32_t IO24                :1;
    uint32_t IO25                :1;
    uint32_t IO26                :1;
    uint32_t IO27                :1;
    uint32_t IO28                :1;
    uint32_t IO29                :1;
    uint32_t IO30                :1;
    uint32_t IO31                :1;
  }BF;
} reg_gpio_data_enable_set_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO_DATA_ENABLE_SET           (*(volatile reg_gpio_data_enable_set_t*)((GPIO_BASE_ADDRESS + 0x24)))
#define REG_GPIO_DATA_ENABLE_SET_ADDR      (GPIO_BASE_ADDRESS + 0x24)
#define BP_GPIO_DATA_ENABLE_SET_IO31                                     31
#define BM_GPIO_DATA_ENABLE_SET_IO31                             0x80000000
#define BP_GPIO_DATA_ENABLE_SET_IO30                                     30
#define BM_GPIO_DATA_ENABLE_SET_IO30                             0x40000000
#define BP_GPIO_DATA_ENABLE_SET_IO29                                     29
#define BM_GPIO_DATA_ENABLE_SET_IO29                             0x20000000
#define BP_GPIO_DATA_ENABLE_SET_IO28                                     28
#define BM_GPIO_DATA_ENABLE_SET_IO28                             0x10000000
#define BP_GPIO_DATA_ENABLE_SET_IO27                                     27
#define BM_GPIO_DATA_ENABLE_SET_IO27                             0x08000000
#define BP_GPIO_DATA_ENABLE_SET_IO26                                     26
#define BM_GPIO_DATA_ENABLE_SET_IO26                             0x04000000
#define BP_GPIO_DATA_ENABLE_SET_IO25                                     25
#define BM_GPIO_DATA_ENABLE_SET_IO25                             0x02000000
#define BP_GPIO_DATA_ENABLE_SET_IO24                                     24
#define BM_GPIO_DATA_ENABLE_SET_IO24                             0x01000000
#define BP_GPIO_DATA_ENABLE_SET_IO23                                     23
#define BM_GPIO_DATA_ENABLE_SET_IO23                             0x00800000
#define BP_GPIO_DATA_ENABLE_SET_IO22                                     22
#define BM_GPIO_DATA_ENABLE_SET_IO22                             0x00400000
#define BP_GPIO_DATA_ENABLE_SET_IO21                                     21
#define BM_GPIO_DATA_ENABLE_SET_IO21                             0x00200000
#define BP_GPIO_DATA_ENABLE_SET_IO20                                     20
#define BM_GPIO_DATA_ENABLE_SET_IO20                             0x00100000
#define BP_GPIO_DATA_ENABLE_SET_IO19                                     19
#define BM_GPIO_DATA_ENABLE_SET_IO19                             0x00080000
#define BP_GPIO_DATA_ENABLE_SET_IO18                                     18
#define BM_GPIO_DATA_ENABLE_SET_IO18                             0x00040000
#define BP_GPIO_DATA_ENABLE_SET_IO17                                     17
#define BM_GPIO_DATA_ENABLE_SET_IO17                             0x00020000
#define BP_GPIO_DATA_ENABLE_SET_IO16                                     16
#define BM_GPIO_DATA_ENABLE_SET_IO16                             0x00010000
#define BP_GPIO_DATA_ENABLE_SET_IO15                                     15
#define BM_GPIO_DATA_ENABLE_SET_IO15                             0x00008000
#define BP_GPIO_DATA_ENABLE_SET_IO14                                     14
#define BM_GPIO_DATA_ENABLE_SET_IO14                             0x00004000
#define BP_GPIO_DATA_ENABLE_SET_IO13                                     13
#define BM_GPIO_DATA_ENABLE_SET_IO13                             0x00002000
#define BP_GPIO_DATA_ENABLE_SET_IO12                                     12
#define BM_GPIO_DATA_ENABLE_SET_IO12                             0x00001000
#define BP_GPIO_DATA_ENABLE_SET_IO11                                     11
#define BM_GPIO_DATA_ENABLE_SET_IO11                             0x00000800
#define BP_GPIO_DATA_ENABLE_SET_IO10                                     10
#define BM_GPIO_DATA_ENABLE_SET_IO10                             0x00000400
#define BP_GPIO_DATA_ENABLE_SET_IO9                                       9
#define BM_GPIO_DATA_ENABLE_SET_IO9                              0x00000200
#define BP_GPIO_DATA_ENABLE_SET_IO8                                       8
#define BM_GPIO_DATA_ENABLE_SET_IO8                              0x00000100
#define BP_GPIO_DATA_ENABLE_SET_IO7                                       7
#define BM_GPIO_DATA_ENABLE_SET_IO7                              0x00000080
#define BP_GPIO_DATA_ENABLE_SET_IO6                                       6
#define BM_GPIO_DATA_ENABLE_SET_IO6                              0x00000040
#define BP_GPIO_DATA_ENABLE_SET_IO5                                       5
#define BM_GPIO_DATA_ENABLE_SET_IO5                              0x00000020
#define BP_GPIO_DATA_ENABLE_SET_IO4                                       4
#define BM_GPIO_DATA_ENABLE_SET_IO4                              0x00000010
#define BP_GPIO_DATA_ENABLE_SET_IO3                                       3
#define BM_GPIO_DATA_ENABLE_SET_IO3                              0x00000008
#define BP_GPIO_DATA_ENABLE_SET_IO2                                       2
#define BM_GPIO_DATA_ENABLE_SET_IO2                              0x00000004
#define BP_GPIO_DATA_ENABLE_SET_IO1                                       1
#define BM_GPIO_DATA_ENABLE_SET_IO1                              0x00000002
#define BP_GPIO_DATA_ENABLE_SET_IO0                                       0
#define BM_GPIO_DATA_ENABLE_SET_IO0                              0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_data_enable_clr_u
{
  uint32_t V;
  struct reg_gpio_data_enable_clr_s
  {
    uint32_t IO0                 :1;
    uint32_t IO1                 :1;
    uint32_t IO2                 :1;
    uint32_t IO3                 :1;
    uint32_t IO4                 :1;
    uint32_t IO5                 :1;
    uint32_t IO6                 :1;
    uint32_t IO7                 :1;
    uint32_t IO8                 :1;
    uint32_t IO9                 :1;
    uint32_t IO10                :1;
    uint32_t IO11                :1;
    uint32_t IO12                :1;
    uint32_t IO13                :1;
    uint32_t IO14                :1;
    uint32_t IO15                :1;
    uint32_t IO16                :1;
    uint32_t IO17                :1;
    uint32_t IO18                :1;
    uint32_t IO19                :1;
    uint32_t IO20                :1;
    uint32_t IO21                :1;
    uint32_t IO22                :1;
    uint32_t IO23                :1;
    uint32_t IO24                :1;
    uint32_t IO25                :1;
    uint32_t IO26                :1;
    uint32_t IO27                :1;
    uint32_t IO28                :1;
    uint32_t IO29                :1;
    uint32_t IO30                :1;
    uint32_t IO31                :1;
  }BF;
} reg_gpio_data_enable_clr_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO_DATA_ENABLE_CLR           (*(volatile reg_gpio_data_enable_clr_t*)((GPIO_BASE_ADDRESS + 0x28)))
#define REG_GPIO_DATA_ENABLE_CLR_ADDR      (GPIO_BASE_ADDRESS + 0x28)
#define BP_GPIO_DATA_ENABLE_CLR_IO31                                     31
#define BM_GPIO_DATA_ENABLE_CLR_IO31                             0x80000000
#define BP_GPIO_DATA_ENABLE_CLR_IO30                                     30
#define BM_GPIO_DATA_ENABLE_CLR_IO30                             0x40000000
#define BP_GPIO_DATA_ENABLE_CLR_IO29                                     29
#define BM_GPIO_DATA_ENABLE_CLR_IO29                             0x20000000
#define BP_GPIO_DATA_ENABLE_CLR_IO28                                     28
#define BM_GPIO_DATA_ENABLE_CLR_IO28                             0x10000000
#define BP_GPIO_DATA_ENABLE_CLR_IO27                                     27
#define BM_GPIO_DATA_ENABLE_CLR_IO27                             0x08000000
#define BP_GPIO_DATA_ENABLE_CLR_IO26                                     26
#define BM_GPIO_DATA_ENABLE_CLR_IO26                             0x04000000
#define BP_GPIO_DATA_ENABLE_CLR_IO25                                     25
#define BM_GPIO_DATA_ENABLE_CLR_IO25                             0x02000000
#define BP_GPIO_DATA_ENABLE_CLR_IO24                                     24
#define BM_GPIO_DATA_ENABLE_CLR_IO24                             0x01000000
#define BP_GPIO_DATA_ENABLE_CLR_IO23                                     23
#define BM_GPIO_DATA_ENABLE_CLR_IO23                             0x00800000
#define BP_GPIO_DATA_ENABLE_CLR_IO22                                     22
#define BM_GPIO_DATA_ENABLE_CLR_IO22                             0x00400000
#define BP_GPIO_DATA_ENABLE_CLR_IO21                                     21
#define BM_GPIO_DATA_ENABLE_CLR_IO21                             0x00200000
#define BP_GPIO_DATA_ENABLE_CLR_IO20                                     20
#define BM_GPIO_DATA_ENABLE_CLR_IO20                             0x00100000
#define BP_GPIO_DATA_ENABLE_CLR_IO19                                     19
#define BM_GPIO_DATA_ENABLE_CLR_IO19                             0x00080000
#define BP_GPIO_DATA_ENABLE_CLR_IO18                                     18
#define BM_GPIO_DATA_ENABLE_CLR_IO18                             0x00040000
#define BP_GPIO_DATA_ENABLE_CLR_IO17                                     17
#define BM_GPIO_DATA_ENABLE_CLR_IO17                             0x00020000
#define BP_GPIO_DATA_ENABLE_CLR_IO16                                     16
#define BM_GPIO_DATA_ENABLE_CLR_IO16                             0x00010000
#define BP_GPIO_DATA_ENABLE_CLR_IO15                                     15
#define BM_GPIO_DATA_ENABLE_CLR_IO15                             0x00008000
#define BP_GPIO_DATA_ENABLE_CLR_IO14                                     14
#define BM_GPIO_DATA_ENABLE_CLR_IO14                             0x00004000
#define BP_GPIO_DATA_ENABLE_CLR_IO13                                     13
#define BM_GPIO_DATA_ENABLE_CLR_IO13                             0x00002000
#define BP_GPIO_DATA_ENABLE_CLR_IO12                                     12
#define BM_GPIO_DATA_ENABLE_CLR_IO12                             0x00001000
#define BP_GPIO_DATA_ENABLE_CLR_IO11                                     11
#define BM_GPIO_DATA_ENABLE_CLR_IO11                             0x00000800
#define BP_GPIO_DATA_ENABLE_CLR_IO10                                     10
#define BM_GPIO_DATA_ENABLE_CLR_IO10                             0x00000400
#define BP_GPIO_DATA_ENABLE_CLR_IO9                                       9
#define BM_GPIO_DATA_ENABLE_CLR_IO9                              0x00000200
#define BP_GPIO_DATA_ENABLE_CLR_IO8                                       8
#define BM_GPIO_DATA_ENABLE_CLR_IO8                              0x00000100
#define BP_GPIO_DATA_ENABLE_CLR_IO7                                       7
#define BM_GPIO_DATA_ENABLE_CLR_IO7                              0x00000080
#define BP_GPIO_DATA_ENABLE_CLR_IO6                                       6
#define BM_GPIO_DATA_ENABLE_CLR_IO6                              0x00000040
#define BP_GPIO_DATA_ENABLE_CLR_IO5                                       5
#define BM_GPIO_DATA_ENABLE_CLR_IO5                              0x00000020
#define BP_GPIO_DATA_ENABLE_CLR_IO4                                       4
#define BM_GPIO_DATA_ENABLE_CLR_IO4                              0x00000010
#define BP_GPIO_DATA_ENABLE_CLR_IO3                                       3
#define BM_GPIO_DATA_ENABLE_CLR_IO3                              0x00000008
#define BP_GPIO_DATA_ENABLE_CLR_IO2                                       2
#define BM_GPIO_DATA_ENABLE_CLR_IO2                              0x00000004
#define BP_GPIO_DATA_ENABLE_CLR_IO1                                       1
#define BM_GPIO_DATA_ENABLE_CLR_IO1                              0x00000002
#define BP_GPIO_DATA_ENABLE_CLR_IO0                                       0
#define BM_GPIO_DATA_ENABLE_CLR_IO0                              0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_data_enable_tog_u
{
  uint32_t V;
  struct reg_gpio_data_enable_tog_s
  {
    uint32_t IO0                 :1;
    uint32_t IO1                 :1;
    uint32_t IO2                 :1;
    uint32_t IO3                 :1;
    uint32_t IO4                 :1;
    uint32_t IO5                 :1;
    uint32_t IO6                 :1;
    uint32_t IO7                 :1;
    uint32_t IO8                 :1;
    uint32_t IO9                 :1;
    uint32_t IO10                :1;
    uint32_t IO11                :1;
    uint32_t IO12                :1;
    uint32_t IO13                :1;
    uint32_t IO14                :1;
    uint32_t IO15                :1;
    uint32_t IO16                :1;
    uint32_t IO17                :1;
    uint32_t IO18                :1;
    uint32_t IO19                :1;
    uint32_t IO20                :1;
    uint32_t IO21                :1;
    uint32_t IO22                :1;
    uint32_t IO23                :1;
    uint32_t IO24                :1;
    uint32_t IO25                :1;
    uint32_t IO26                :1;
    uint32_t IO27                :1;
    uint32_t IO28                :1;
    uint32_t IO29                :1;
    uint32_t IO30                :1;
    uint32_t IO31                :1;
  }BF;
} reg_gpio_data_enable_tog_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO_DATA_ENABLE_TOG           (*(volatile reg_gpio_data_enable_tog_t*)((GPIO_BASE_ADDRESS + 0x2C)))
#define REG_GPIO_DATA_ENABLE_TOG_ADDR      (GPIO_BASE_ADDRESS + 0x2C)
#define BP_GPIO_DATA_ENABLE_TOG_IO31                                     31
#define BM_GPIO_DATA_ENABLE_TOG_IO31                             0x80000000
#define BP_GPIO_DATA_ENABLE_TOG_IO30                                     30
#define BM_GPIO_DATA_ENABLE_TOG_IO30                             0x40000000
#define BP_GPIO_DATA_ENABLE_TOG_IO29                                     29
#define BM_GPIO_DATA_ENABLE_TOG_IO29                             0x20000000
#define BP_GPIO_DATA_ENABLE_TOG_IO28                                     28
#define BM_GPIO_DATA_ENABLE_TOG_IO28                             0x10000000
#define BP_GPIO_DATA_ENABLE_TOG_IO27                                     27
#define BM_GPIO_DATA_ENABLE_TOG_IO27                             0x08000000
#define BP_GPIO_DATA_ENABLE_TOG_IO26                                     26
#define BM_GPIO_DATA_ENABLE_TOG_IO26                             0x04000000
#define BP_GPIO_DATA_ENABLE_TOG_IO25                                     25
#define BM_GPIO_DATA_ENABLE_TOG_IO25                             0x02000000
#define BP_GPIO_DATA_ENABLE_TOG_IO24                                     24
#define BM_GPIO_DATA_ENABLE_TOG_IO24                             0x01000000
#define BP_GPIO_DATA_ENABLE_TOG_IO23                                     23
#define BM_GPIO_DATA_ENABLE_TOG_IO23                             0x00800000
#define BP_GPIO_DATA_ENABLE_TOG_IO22                                     22
#define BM_GPIO_DATA_ENABLE_TOG_IO22                             0x00400000
#define BP_GPIO_DATA_ENABLE_TOG_IO21                                     21
#define BM_GPIO_DATA_ENABLE_TOG_IO21                             0x00200000
#define BP_GPIO_DATA_ENABLE_TOG_IO20                                     20
#define BM_GPIO_DATA_ENABLE_TOG_IO20                             0x00100000
#define BP_GPIO_DATA_ENABLE_TOG_IO19                                     19
#define BM_GPIO_DATA_ENABLE_TOG_IO19                             0x00080000
#define BP_GPIO_DATA_ENABLE_TOG_IO18                                     18
#define BM_GPIO_DATA_ENABLE_TOG_IO18                             0x00040000
#define BP_GPIO_DATA_ENABLE_TOG_IO17                                     17
#define BM_GPIO_DATA_ENABLE_TOG_IO17                             0x00020000
#define BP_GPIO_DATA_ENABLE_TOG_IO16                                     16
#define BM_GPIO_DATA_ENABLE_TOG_IO16                             0x00010000
#define BP_GPIO_DATA_ENABLE_TOG_IO15                                     15
#define BM_GPIO_DATA_ENABLE_TOG_IO15                             0x00008000
#define BP_GPIO_DATA_ENABLE_TOG_IO14                                     14
#define BM_GPIO_DATA_ENABLE_TOG_IO14                             0x00004000
#define BP_GPIO_DATA_ENABLE_TOG_IO13                                     13
#define BM_GPIO_DATA_ENABLE_TOG_IO13                             0x00002000
#define BP_GPIO_DATA_ENABLE_TOG_IO12                                     12
#define BM_GPIO_DATA_ENABLE_TOG_IO12                             0x00001000
#define BP_GPIO_DATA_ENABLE_TOG_IO11                                     11
#define BM_GPIO_DATA_ENABLE_TOG_IO11                             0x00000800
#define BP_GPIO_DATA_ENABLE_TOG_IO10                                     10
#define BM_GPIO_DATA_ENABLE_TOG_IO10                             0x00000400
#define BP_GPIO_DATA_ENABLE_TOG_IO9                                       9
#define BM_GPIO_DATA_ENABLE_TOG_IO9                              0x00000200
#define BP_GPIO_DATA_ENABLE_TOG_IO8                                       8
#define BM_GPIO_DATA_ENABLE_TOG_IO8                              0x00000100
#define BP_GPIO_DATA_ENABLE_TOG_IO7                                       7
#define BM_GPIO_DATA_ENABLE_TOG_IO7                              0x00000080
#define BP_GPIO_DATA_ENABLE_TOG_IO6                                       6
#define BM_GPIO_DATA_ENABLE_TOG_IO6                              0x00000040
#define BP_GPIO_DATA_ENABLE_TOG_IO5                                       5
#define BM_GPIO_DATA_ENABLE_TOG_IO5                              0x00000020
#define BP_GPIO_DATA_ENABLE_TOG_IO4                                       4
#define BM_GPIO_DATA_ENABLE_TOG_IO4                              0x00000010
#define BP_GPIO_DATA_ENABLE_TOG_IO3                                       3
#define BM_GPIO_DATA_ENABLE_TOG_IO3                              0x00000008
#define BP_GPIO_DATA_ENABLE_TOG_IO2                                       2
#define BM_GPIO_DATA_ENABLE_TOG_IO2                              0x00000004
#define BP_GPIO_DATA_ENABLE_TOG_IO1                                       1
#define BM_GPIO_DATA_ENABLE_TOG_IO1                              0x00000002
#define BP_GPIO_DATA_ENABLE_TOG_IO0                                       0
#define BM_GPIO_DATA_ENABLE_TOG_IO0                              0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_spec_read_a_u
{
  uint32_t V;
  struct reg_gpio_spec_read_a_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio_spec_read_a_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO_SPEC_READ_A           (*(volatile reg_gpio_spec_read_a_t*)((GPIO_BASE_ADDRESS + 0x30)))
#define REG_GPIO_SPEC_READ_A_ADDR      (GPIO_BASE_ADDRESS + 0x30)
#define BP_GPIO_SPEC_READ_A_VALUE                                         0
#define BM_GPIO_SPEC_READ_A_VALUE                                0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_spec_read_b_u
{
  uint32_t V;
  struct reg_gpio_spec_read_b_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio_spec_read_b_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO_SPEC_READ_B           (*(volatile reg_gpio_spec_read_b_t*)((GPIO_BASE_ADDRESS + 0x34)))
#define REG_GPIO_SPEC_READ_B_ADDR      (GPIO_BASE_ADDRESS + 0x34)
#define BP_GPIO_SPEC_READ_B_VALUE                                         0
#define BM_GPIO_SPEC_READ_B_VALUE                                0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_spec_read_c_u
{
  uint32_t V;
  struct reg_gpio_spec_read_c_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio_spec_read_c_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO_SPEC_READ_C           (*(volatile reg_gpio_spec_read_c_t*)((GPIO_BASE_ADDRESS + 0x38)))
#define REG_GPIO_SPEC_READ_C_ADDR      (GPIO_BASE_ADDRESS + 0x38)
#define BP_GPIO_SPEC_READ_C_VALUE                                         0
#define BM_GPIO_SPEC_READ_C_VALUE                                0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_spec_read_d_u
{
  uint32_t V;
  struct reg_gpio_spec_read_d_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio_spec_read_d_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO_SPEC_READ_D           (*(volatile reg_gpio_spec_read_d_t*)((GPIO_BASE_ADDRESS + 0x3C)))
#define REG_GPIO_SPEC_READ_D_ADDR      (GPIO_BASE_ADDRESS + 0x3C)
#define BP_GPIO_SPEC_READ_D_VALUE                                         0
#define BM_GPIO_SPEC_READ_D_VALUE                                0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_spec_read_stat_u
{
  uint32_t V;
  struct reg_gpio_spec_read_stat_s
  {
    uint32_t SPEC_A              :1;
    uint32_t SPEC_B              :1;
    uint32_t SPEC_C              :1;
    uint32_t SPEC_D              :1;
    uint32_t RSVD0               :28;
  }BF;
} reg_gpio_spec_read_stat_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for GPIO_SPEC_READ_STAT_SPEC_D
//-------------------------------------------------------------------------
#define BFV_GPIO_SPEC_READ_STAT_SPEC_D_READY                            0x1

//-------------------------------------------------------------------------
// field value definitions for GPIO_SPEC_READ_STAT_SPEC_C
//-------------------------------------------------------------------------
#define BFV_GPIO_SPEC_READ_STAT_SPEC_C_READY                            0x1

//-------------------------------------------------------------------------
// field value definitions for GPIO_SPEC_READ_STAT_SPEC_B
//-------------------------------------------------------------------------
#define BFV_GPIO_SPEC_READ_STAT_SPEC_B_READY                            0x1

//-------------------------------------------------------------------------
// field value definitions for GPIO_SPEC_READ_STAT_SPEC_A
//-------------------------------------------------------------------------
#define BFV_GPIO_SPEC_READ_STAT_SPEC_A_READY                            0x1

#define REG_GPIO_SPEC_READ_STAT           (*(volatile reg_gpio_spec_read_stat_t*)((GPIO_BASE_ADDRESS + 0x40)))
#define REG_GPIO_SPEC_READ_STAT_ADDR      (GPIO_BASE_ADDRESS + 0x40)
#define BP_GPIO_SPEC_READ_STAT_RSVD0                                      4
#define BM_GPIO_SPEC_READ_STAT_RSVD0                             0xFFFFFFF0
#define BP_GPIO_SPEC_READ_STAT_SPEC_D                                     3
#define BM_GPIO_SPEC_READ_STAT_SPEC_D                            0x00000008
#define BP_GPIO_SPEC_READ_STAT_SPEC_C                                     2
#define BM_GPIO_SPEC_READ_STAT_SPEC_C                            0x00000004
#define BP_GPIO_SPEC_READ_STAT_SPEC_B                                     1
#define BM_GPIO_SPEC_READ_STAT_SPEC_B                            0x00000002
#define BP_GPIO_SPEC_READ_STAT_SPEC_A                                     0
#define BM_GPIO_SPEC_READ_STAT_SPEC_A                            0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_async_bus_u
{
  uint32_t V;
  struct reg_gpio_async_bus_s
  {
    uint32_t RST_REQ_ADC         :1;
    uint32_t RST_REQ_I2C         :1;
    uint32_t RST_REQ_GPIO_SOCCTRL:1;
    uint32_t RST_REQ_UST         :1;
    uint32_t RST_REQ_RTC         :1;
    uint32_t RST_REQ_PWM         :1;
    uint32_t RSVD0               :2;
    uint32_t RST_STATE_ADC       :1;
    uint32_t RST_STATE_I2C       :1;
    uint32_t RST_STATE_GPIO_SOCCTRL:1;
    uint32_t RST_STATE_UST       :1;
    uint32_t RST_STATE_RTC       :1;
    uint32_t RST_STATE_PWM       :1;
    uint32_t RSVD1               :17;
    uint32_t RST_AHB2PERIPH      :1;
  }BF;
} reg_gpio_async_bus_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for GPIO_ASYNC_BUS_RST_AHB2PERIPH
//-------------------------------------------------------------------------
#define BFV_GPIO_ASYNC_BUS_RST_AHB2PERIPH_RESET                         0x1

//-------------------------------------------------------------------------
// field value definitions for GPIO_ASYNC_BUS_RST_STATE_PWM
//-------------------------------------------------------------------------
#define BFV_GPIO_ASYNC_BUS_RST_STATE_PWM_RESET                          0x0
#define BFV_GPIO_ASYNC_BUS_RST_STATE_PWM_ACTIVE                         0x1

//-------------------------------------------------------------------------
// field value definitions for GPIO_ASYNC_BUS_RST_STATE_RTC
//-------------------------------------------------------------------------
#define BFV_GPIO_ASYNC_BUS_RST_STATE_RTC_RESET                          0x0
#define BFV_GPIO_ASYNC_BUS_RST_STATE_RTC_ACTIVE                         0x1

//-------------------------------------------------------------------------
// field value definitions for GPIO_ASYNC_BUS_RST_STATE_UST
//-------------------------------------------------------------------------
#define BFV_GPIO_ASYNC_BUS_RST_STATE_UST_RESET                          0x0
#define BFV_GPIO_ASYNC_BUS_RST_STATE_UST_ACTIVE                         0x1

//-------------------------------------------------------------------------
// field value definitions for GPIO_ASYNC_BUS_RST_STATE_GPIO_SOCCTRL
//-------------------------------------------------------------------------
#define BFV_GPIO_ASYNC_BUS_RST_STATE_GPIO_SOCCTRL_RESET                 0x0
#define BFV_GPIO_ASYNC_BUS_RST_STATE_GPIO_SOCCTRL_ACTIVE                0x1

//-------------------------------------------------------------------------
// field value definitions for GPIO_ASYNC_BUS_RST_STATE_I2C
//-------------------------------------------------------------------------
#define BFV_GPIO_ASYNC_BUS_RST_STATE_I2C_RESET                          0x0
#define BFV_GPIO_ASYNC_BUS_RST_STATE_I2C_ACTIVE                         0x1

//-------------------------------------------------------------------------
// field value definitions for GPIO_ASYNC_BUS_RST_STATE_ADC
//-------------------------------------------------------------------------
#define BFV_GPIO_ASYNC_BUS_RST_STATE_ADC_RESET                          0x0
#define BFV_GPIO_ASYNC_BUS_RST_STATE_ADC_ACTIVE                         0x1

//-------------------------------------------------------------------------
// field value definitions for GPIO_ASYNC_BUS_RST_REQ_PWM
//-------------------------------------------------------------------------
#define BFV_GPIO_ASYNC_BUS_RST_REQ_PWM_RESET                            0x1

//-------------------------------------------------------------------------
// field value definitions for GPIO_ASYNC_BUS_RST_REQ_RTC
//-------------------------------------------------------------------------
#define BFV_GPIO_ASYNC_BUS_RST_REQ_RTC_RESET                            0x1

//-------------------------------------------------------------------------
// field value definitions for GPIO_ASYNC_BUS_RST_REQ_UST
//-------------------------------------------------------------------------
#define BFV_GPIO_ASYNC_BUS_RST_REQ_UST_RESET                            0x1

//-------------------------------------------------------------------------
// field value definitions for GPIO_ASYNC_BUS_RST_REQ_GPIO_SOCCTRL
//-------------------------------------------------------------------------
#define BFV_GPIO_ASYNC_BUS_RST_REQ_GPIO_SOCCTRL_RESET                   0x1

//-------------------------------------------------------------------------
// field value definitions for GPIO_ASYNC_BUS_RST_REQ_I2C
//-------------------------------------------------------------------------
#define BFV_GPIO_ASYNC_BUS_RST_REQ_I2C_RESET                            0x1

//-------------------------------------------------------------------------
// field value definitions for GPIO_ASYNC_BUS_RST_REQ_ADC
//-------------------------------------------------------------------------
#define BFV_GPIO_ASYNC_BUS_RST_REQ_ADC_RESET                            0x1

#define REG_GPIO_ASYNC_BUS           (*(volatile reg_gpio_async_bus_t*)((GPIO_BASE_ADDRESS + 0x44)))
#define REG_GPIO_ASYNC_BUS_ADDR      (GPIO_BASE_ADDRESS + 0x44)
#define BP_GPIO_ASYNC_BUS_RST_AHB2PERIPH                                 31
#define BM_GPIO_ASYNC_BUS_RST_AHB2PERIPH                         0x80000000
#define BP_GPIO_ASYNC_BUS_RSVD0                                          14
#define BM_GPIO_ASYNC_BUS_RSVD0                                  0x7FFFC000
#define BP_GPIO_ASYNC_BUS_RST_STATE_PWM                                  13
#define BM_GPIO_ASYNC_BUS_RST_STATE_PWM                          0x00002000
#define BP_GPIO_ASYNC_BUS_RST_STATE_RTC                                  12
#define BM_GPIO_ASYNC_BUS_RST_STATE_RTC                          0x00001000
#define BP_GPIO_ASYNC_BUS_RST_STATE_UST                                  11
#define BM_GPIO_ASYNC_BUS_RST_STATE_UST                          0x00000800
#define BP_GPIO_ASYNC_BUS_RST_STATE_GPIO_SOCCTRL                         10
#define BM_GPIO_ASYNC_BUS_RST_STATE_GPIO_SOCCTRL                 0x00000400
#define BP_GPIO_ASYNC_BUS_RST_STATE_I2C                                   9
#define BM_GPIO_ASYNC_BUS_RST_STATE_I2C                          0x00000200
#define BP_GPIO_ASYNC_BUS_RST_STATE_ADC                                   8
#define BM_GPIO_ASYNC_BUS_RST_STATE_ADC                          0x00000100
#define BP_GPIO_ASYNC_BUS_RSVD1                                           6
#define BM_GPIO_ASYNC_BUS_RSVD1                                  0x000000C0
#define BP_GPIO_ASYNC_BUS_RST_REQ_PWM                                     5
#define BM_GPIO_ASYNC_BUS_RST_REQ_PWM                            0x00000020
#define BP_GPIO_ASYNC_BUS_RST_REQ_RTC                                     4
#define BM_GPIO_ASYNC_BUS_RST_REQ_RTC                            0x00000010
#define BP_GPIO_ASYNC_BUS_RST_REQ_UST                                     3
#define BM_GPIO_ASYNC_BUS_RST_REQ_UST                            0x00000008
#define BP_GPIO_ASYNC_BUS_RST_REQ_GPIO_SOCCTRL                            2
#define BM_GPIO_ASYNC_BUS_RST_REQ_GPIO_SOCCTRL                   0x00000004
#define BP_GPIO_ASYNC_BUS_RST_REQ_I2C                                     1
#define BM_GPIO_ASYNC_BUS_RST_REQ_I2C                            0x00000002
#define BP_GPIO_ASYNC_BUS_RST_REQ_ADC                                     0
#define BM_GPIO_ASYNC_BUS_RST_REQ_ADC                            0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_hfo_freq_u
{
  uint32_t V;
  struct reg_gpio_hfo_freq_s
  {
    uint32_t COUNT               :10;
    uint32_t RSVD0               :14;
    uint32_t FLAG                :1;
    uint32_t RSVD1               :7;
  }BF;
} reg_gpio_hfo_freq_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO_HFO_FREQ           (*(volatile reg_gpio_hfo_freq_t*)((GPIO_BASE_ADDRESS + 0x48)))
#define REG_GPIO_HFO_FREQ_ADDR      (GPIO_BASE_ADDRESS + 0x48)
#define BP_GPIO_HFO_FREQ_RSVD0                                           25
#define BM_GPIO_HFO_FREQ_RSVD0                                   0xFE000000
#define BP_GPIO_HFO_FREQ_FLAG                                            24
#define BM_GPIO_HFO_FREQ_FLAG                                    0x01000000
#define BP_GPIO_HFO_FREQ_RSVD1                                           10
#define BM_GPIO_HFO_FREQ_RSVD1                                   0x00FFFC00
#define BP_GPIO_HFO_FREQ_COUNT                                            0
#define BM_GPIO_HFO_FREQ_COUNT                                   0x000003FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_flash_info_rd_enable_u
{
  uint32_t V;
  struct reg_gpio_flash_info_rd_enable_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio_flash_info_rd_enable_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO_FLASH_INFO_RD_ENABLE           (*(volatile reg_gpio_flash_info_rd_enable_t*)((GPIO_BASE_ADDRESS + 0x4C)))
#define REG_GPIO_FLASH_INFO_RD_ENABLE_ADDR      (GPIO_BASE_ADDRESS + 0x4C)
#define BP_GPIO_FLASH_INFO_RD_ENABLE_VALUE                                0
#define BM_GPIO_FLASH_INFO_RD_ENABLE_VALUE                       0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_flash_info_wrt_enable_u
{
  uint32_t V;
  struct reg_gpio_flash_info_wrt_enable_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio_flash_info_wrt_enable_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO_FLASH_INFO_WRT_ENABLE           (*(volatile reg_gpio_flash_info_wrt_enable_t*)((GPIO_BASE_ADDRESS + 0x50)))
#define REG_GPIO_FLASH_INFO_WRT_ENABLE_ADDR      (GPIO_BASE_ADDRESS + 0x50)
#define BP_GPIO_FLASH_INFO_WRT_ENABLE_VALUE                               0
#define BM_GPIO_FLASH_INFO_WRT_ENABLE_VALUE                      0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_debug0_read_only_u
{
  uint32_t V;
  struct reg_gpio_debug0_read_only_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio_debug0_read_only_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO_DEBUG0_READ_ONLY           (*(volatile reg_gpio_debug0_read_only_t*)((GPIO_BASE_ADDRESS + 0x54)))
#define REG_GPIO_DEBUG0_READ_ONLY_ADDR      (GPIO_BASE_ADDRESS + 0x54)
#define BP_GPIO_DEBUG0_READ_ONLY_VALUE                                    0
#define BM_GPIO_DEBUG0_READ_ONLY_VALUE                           0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio_debug1_read_only_u
{
  uint32_t V;
  struct reg_gpio_debug1_read_only_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio_debug1_read_only_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO_DEBUG1_READ_ONLY           (*(volatile reg_gpio_debug1_read_only_t*)((GPIO_BASE_ADDRESS + 0x58)))
#define REG_GPIO_DEBUG1_READ_ONLY_ADDR      (GPIO_BASE_ADDRESS + 0x58)
#define BP_GPIO_DEBUG1_READ_ONLY_VALUE                                    0
#define BM_GPIO_DEBUG1_READ_ONLY_VALUE                           0xFFFFFFFF

#define PWM_BASE_ADDRESS 0x50000000


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_ctrl_u
{
  uint32_t V;
  struct reg_pwm_ctrl_s
  {
    uint32_t RSVD0               :4;
    uint32_t DFLT0               :1;
    uint32_t DFLT1               :1;
    uint32_t DFLT2               :1;
    uint32_t DFLT3               :1;
    uint32_t CFIFO_LOW           :4;
    uint32_t CFIFO_INT           :1;
    uint32_t RSVD1               :10;
    uint32_t CLK_EN_OVR          :1;
    uint32_t CLKSRC              :1;
    uint32_t RSVD2               :6;
    uint32_t SFTRST              :1;
  }BF;
} reg_pwm_ctrl_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for PWM_CTRL_SFTRST
//-------------------------------------------------------------------------
#define BFV_PWM_CTRL_SFTRST_RST                                         0x1

//-------------------------------------------------------------------------
// field value definitions for PWM_CTRL_CLKSRC
//-------------------------------------------------------------------------
#define BFV_PWM_CTRL_CLKSRC_32KHZ                                       0x0
#define BFV_PWM_CTRL_CLKSRC_2MHZ                                        0x1

//-------------------------------------------------------------------------
// field value definitions for PWM_CTRL_CLK_EN_OVR
//-------------------------------------------------------------------------
#define BFV_PWM_CTRL_CLK_EN_OVR_ENABLE                                  0x1
#define BFV_PWM_CTRL_CLK_EN_OVR_DISABLE                                 0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CTRL_CFIFO_INT
//-------------------------------------------------------------------------
#define BFV_PWM_CTRL_CFIFO_INT_EN                                       0x1
#define BFV_PWM_CTRL_CFIFO_INT_DIS                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CTRL_DFLT3
//-------------------------------------------------------------------------
#define BFV_PWM_CTRL_DFLT3_HI                                           0x1
#define BFV_PWM_CTRL_DFLT3_LO                                           0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CTRL_DFLT2
//-------------------------------------------------------------------------
#define BFV_PWM_CTRL_DFLT2_HI                                           0x1
#define BFV_PWM_CTRL_DFLT2_LO                                           0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CTRL_DFLT1
//-------------------------------------------------------------------------
#define BFV_PWM_CTRL_DFLT1_HI                                           0x1
#define BFV_PWM_CTRL_DFLT1_LO                                           0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CTRL_DFLT0
//-------------------------------------------------------------------------
#define BFV_PWM_CTRL_DFLT0_HI                                           0x1
#define BFV_PWM_CTRL_DFLT0_LO                                           0x0

#define REG_PWM_CTRL           (*(volatile reg_pwm_ctrl_t*)((PWM_BASE_ADDRESS + 0x0)))
#define REG_PWM_CTRL_ADDR      (PWM_BASE_ADDRESS + 0x0)
#define BP_PWM_CTRL_SFTRST                                               31
#define BM_PWM_CTRL_SFTRST                                       0x80000000
#define BP_PWM_CTRL_RSVD0                                                25
#define BM_PWM_CTRL_RSVD0                                        0x7E000000
#define BP_PWM_CTRL_CLKSRC                                               24
#define BM_PWM_CTRL_CLKSRC                                       0x01000000
#define BP_PWM_CTRL_CLK_EN_OVR                                           23
#define BM_PWM_CTRL_CLK_EN_OVR                                   0x00800000
#define BP_PWM_CTRL_RSVD1                                                13
#define BM_PWM_CTRL_RSVD1                                        0x007FE000
#define BP_PWM_CTRL_CFIFO_INT                                            12
#define BM_PWM_CTRL_CFIFO_INT                                    0x00001000
#define BP_PWM_CTRL_CFIFO_LOW                                             8
#define BM_PWM_CTRL_CFIFO_LOW                                    0x00000F00
#define BP_PWM_CTRL_DFLT3                                                 7
#define BM_PWM_CTRL_DFLT3                                        0x00000080
#define BP_PWM_CTRL_DFLT2                                                 6
#define BM_PWM_CTRL_DFLT2                                        0x00000040
#define BP_PWM_CTRL_DFLT1                                                 5
#define BM_PWM_CTRL_DFLT1                                        0x00000020
#define BP_PWM_CTRL_DFLT0                                                 4
#define BM_PWM_CTRL_DFLT0                                        0x00000010
#define BP_PWM_CTRL_RSVD2                                                 0
#define BM_PWM_CTRL_RSVD2                                        0x0000000F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_mode_u
{
  uint32_t V;
  struct reg_pwm_mode_s
  {
    uint32_t MODE0               :2;
    uint32_t MODE1               :2;
    uint32_t MODE2               :2;
    uint32_t MODE3               :2;
    uint32_t SET0                :1;
    uint32_t SET1                :1;
    uint32_t SET2                :1;
    uint32_t SET3                :1;
    uint32_t RSVD0               :20;
  }BF;
} reg_pwm_mode_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for PWM_MODE_SET3
//-------------------------------------------------------------------------
#define BFV_PWM_MODE_SET3_SET                                           0x1

//-------------------------------------------------------------------------
// field value definitions for PWM_MODE_SET2
//-------------------------------------------------------------------------
#define BFV_PWM_MODE_SET2_SET                                           0x1

//-------------------------------------------------------------------------
// field value definitions for PWM_MODE_SET1
//-------------------------------------------------------------------------
#define BFV_PWM_MODE_SET1_SET                                           0x1

//-------------------------------------------------------------------------
// field value definitions for PWM_MODE_SET0
//-------------------------------------------------------------------------
#define BFV_PWM_MODE_SET0_SET                                           0x1

//-------------------------------------------------------------------------
// field value definitions for PWM_MODE_MODE3
//-------------------------------------------------------------------------
#define BFV_PWM_MODE_MODE3_START                                        0x3
#define BFV_PWM_MODE_MODE3_PSTOP                                        0x2
#define BFV_PWM_MODE_MODE3_CSTOP                                        0x1
#define BFV_PWM_MODE_MODE3_ISTOP                                        0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_MODE_MODE2
//-------------------------------------------------------------------------
#define BFV_PWM_MODE_MODE2_START                                        0x3
#define BFV_PWM_MODE_MODE2_PSTOP                                        0x2
#define BFV_PWM_MODE_MODE2_CSTOP                                        0x1
#define BFV_PWM_MODE_MODE2_ISTOP                                        0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_MODE_MODE1
//-------------------------------------------------------------------------
#define BFV_PWM_MODE_MODE1_START                                        0x3
#define BFV_PWM_MODE_MODE1_PSTOP                                        0x2
#define BFV_PWM_MODE_MODE1_CSTOP                                        0x1
#define BFV_PWM_MODE_MODE1_ISTOP                                        0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_MODE_MODE0
//-------------------------------------------------------------------------
#define BFV_PWM_MODE_MODE0_START                                        0x3
#define BFV_PWM_MODE_MODE0_PSTOP                                        0x2
#define BFV_PWM_MODE_MODE0_CSTOP                                        0x1
#define BFV_PWM_MODE_MODE0_ISTOP                                        0x0

#define REG_PWM_MODE           (*(volatile reg_pwm_mode_t*)((PWM_BASE_ADDRESS + 0x4)))
#define REG_PWM_MODE_ADDR      (PWM_BASE_ADDRESS + 0x4)
#define BP_PWM_MODE_RSVD0                                                12
#define BM_PWM_MODE_RSVD0                                        0xFFFFF000
#define BP_PWM_MODE_SET3                                                 11
#define BM_PWM_MODE_SET3                                         0x00000800
#define BP_PWM_MODE_SET2                                                 10
#define BM_PWM_MODE_SET2                                         0x00000400
#define BP_PWM_MODE_SET1                                                  9
#define BM_PWM_MODE_SET1                                         0x00000200
#define BP_PWM_MODE_SET0                                                  8
#define BM_PWM_MODE_SET0                                         0x00000100
#define BP_PWM_MODE_MODE3                                                 6
#define BM_PWM_MODE_MODE3                                        0x000000C0
#define BP_PWM_MODE_MODE2                                                 4
#define BM_PWM_MODE_MODE2                                        0x00000030
#define BP_PWM_MODE_MODE1                                                 2
#define BM_PWM_MODE_MODE1                                        0x0000000C
#define BP_PWM_MODE_MODE0                                                 0
#define BM_PWM_MODE_MODE0                                        0x00000003

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_stat_u
{
  uint32_t V;
  struct reg_pwm_stat_s
  {
    uint32_t VAL0                :1;
    uint32_t VAL1                :1;
    uint32_t VAL2                :1;
    uint32_t VAL3                :1;
    uint32_t RSVD0               :4;
    uint32_t STATE0              :2;
    uint32_t STATE1              :2;
    uint32_t STATE2              :2;
    uint32_t STATE3              :2;
    uint32_t CFIFO_SIZE          :4;
    uint32_t CFIFO_FULL          :1;
    uint32_t CFIFO_EMPTY         :1;
    uint32_t RSVD1               :10;
  }BF;
} reg_pwm_stat_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for PWM_STAT_CFIFO_EMPTY
//-------------------------------------------------------------------------
#define BFV_PWM_STAT_CFIFO_EMPTY_EMPTY                                  0x1

//-------------------------------------------------------------------------
// field value definitions for PWM_STAT_CFIFO_FULL
//-------------------------------------------------------------------------
#define BFV_PWM_STAT_CFIFO_FULL_FULL                                    0x1

//-------------------------------------------------------------------------
// field value definitions for PWM_STAT_STATE3
//-------------------------------------------------------------------------
#define BFV_PWM_STAT_STATE3_RUN                                         0x3
#define BFV_PWM_STAT_STATE3_PSTOP                                       0x2
#define BFV_PWM_STAT_STATE3_CSTOP                                       0x1
#define BFV_PWM_STAT_STATE3_STOP                                        0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_STAT_STATE2
//-------------------------------------------------------------------------
#define BFV_PWM_STAT_STATE2_RUN                                         0x3
#define BFV_PWM_STAT_STATE2_PSTOP                                       0x2
#define BFV_PWM_STAT_STATE2_CSTOP                                       0x1
#define BFV_PWM_STAT_STATE2_STOP                                        0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_STAT_STATE1
//-------------------------------------------------------------------------
#define BFV_PWM_STAT_STATE1_RUN                                         0x3
#define BFV_PWM_STAT_STATE1_PSTOP                                       0x2
#define BFV_PWM_STAT_STATE1_CSTOP                                       0x1
#define BFV_PWM_STAT_STATE1_STOP                                        0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_STAT_STATE0
//-------------------------------------------------------------------------
#define BFV_PWM_STAT_STATE0_RUN                                         0x3
#define BFV_PWM_STAT_STATE0_PSTOP                                       0x2
#define BFV_PWM_STAT_STATE0_CSTOP                                       0x1
#define BFV_PWM_STAT_STATE0_STOP                                        0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_STAT_VAL3
//-------------------------------------------------------------------------
#define BFV_PWM_STAT_VAL3_HI                                            0x1
#define BFV_PWM_STAT_VAL3_LO                                            0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_STAT_VAL2
//-------------------------------------------------------------------------
#define BFV_PWM_STAT_VAL2_HI                                            0x1
#define BFV_PWM_STAT_VAL2_LO                                            0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_STAT_VAL1
//-------------------------------------------------------------------------
#define BFV_PWM_STAT_VAL1_HI                                            0x1
#define BFV_PWM_STAT_VAL1_LO                                            0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_STAT_VAL0
//-------------------------------------------------------------------------
#define BFV_PWM_STAT_VAL0_HI                                            0x1
#define BFV_PWM_STAT_VAL0_LO                                            0x0

#define REG_PWM_STAT           (*(volatile reg_pwm_stat_t*)((PWM_BASE_ADDRESS + 0x8)))
#define REG_PWM_STAT_ADDR      (PWM_BASE_ADDRESS + 0x8)
#define BP_PWM_STAT_RSVD0                                                22
#define BM_PWM_STAT_RSVD0                                        0xFFC00000
#define BP_PWM_STAT_CFIFO_EMPTY                                          21
#define BM_PWM_STAT_CFIFO_EMPTY                                  0x00200000
#define BP_PWM_STAT_CFIFO_FULL                                           20
#define BM_PWM_STAT_CFIFO_FULL                                   0x00100000
#define BP_PWM_STAT_CFIFO_SIZE                                           16
#define BM_PWM_STAT_CFIFO_SIZE                                   0x000F0000
#define BP_PWM_STAT_STATE3                                               14
#define BM_PWM_STAT_STATE3                                       0x0000C000
#define BP_PWM_STAT_STATE2                                               12
#define BM_PWM_STAT_STATE2                                       0x00003000
#define BP_PWM_STAT_STATE1                                               10
#define BM_PWM_STAT_STATE1                                       0x00000C00
#define BP_PWM_STAT_STATE0                                                8
#define BM_PWM_STAT_STATE0                                       0x00000300
#define BP_PWM_STAT_RSVD1                                                 4
#define BM_PWM_STAT_RSVD1                                        0x000000F0
#define BP_PWM_STAT_VAL3                                                  3
#define BM_PWM_STAT_VAL3                                         0x00000008
#define BP_PWM_STAT_VAL2                                                  2
#define BM_PWM_STAT_VAL2                                         0x00000004
#define BP_PWM_STAT_VAL1                                                  1
#define BM_PWM_STAT_VAL1                                         0x00000002
#define BP_PWM_STAT_VAL0                                                  0
#define BM_PWM_STAT_VAL0                                         0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_int_stat_u
{
  uint32_t V;
  struct reg_pwm_int_stat_s
  {
    uint32_t PROG_INT0           :1;
    uint32_t PROG_INT1           :1;
    uint32_t PROG_INT2           :1;
    uint32_t PROG_INT3           :1;
    uint32_t CYCLE_INT0          :1;
    uint32_t CYCLE_INT1          :1;
    uint32_t CYCLE_INT2          :1;
    uint32_t CYCLE_INT3          :1;
    uint32_t CFIFO_INT           :1;
    uint32_t RSVD0               :23;
  }BF;
} reg_pwm_int_stat_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for PWM_INT_STAT_CFIFO_INT
//-------------------------------------------------------------------------
#define BFV_PWM_INT_STAT_CFIFO_INT_INT                                  0x1

//-------------------------------------------------------------------------
// field value definitions for PWM_INT_STAT_CYCLE_INT3
//-------------------------------------------------------------------------
#define BFV_PWM_INT_STAT_CYCLE_INT3_INT                                 0x1

//-------------------------------------------------------------------------
// field value definitions for PWM_INT_STAT_CYCLE_INT2
//-------------------------------------------------------------------------
#define BFV_PWM_INT_STAT_CYCLE_INT2_INT                                 0x1

//-------------------------------------------------------------------------
// field value definitions for PWM_INT_STAT_CYCLE_INT1
//-------------------------------------------------------------------------
#define BFV_PWM_INT_STAT_CYCLE_INT1_INT                                 0x1

//-------------------------------------------------------------------------
// field value definitions for PWM_INT_STAT_CYCLE_INT0
//-------------------------------------------------------------------------
#define BFV_PWM_INT_STAT_CYCLE_INT0_INT                                 0x1

//-------------------------------------------------------------------------
// field value definitions for PWM_INT_STAT_PROG_INT3
//-------------------------------------------------------------------------
#define BFV_PWM_INT_STAT_PROG_INT3_INT                                  0x1

//-------------------------------------------------------------------------
// field value definitions for PWM_INT_STAT_PROG_INT2
//-------------------------------------------------------------------------
#define BFV_PWM_INT_STAT_PROG_INT2_INT                                  0x1

//-------------------------------------------------------------------------
// field value definitions for PWM_INT_STAT_PROG_INT1
//-------------------------------------------------------------------------
#define BFV_PWM_INT_STAT_PROG_INT1_INT                                  0x1

//-------------------------------------------------------------------------
// field value definitions for PWM_INT_STAT_PROG_INT0
//-------------------------------------------------------------------------
#define BFV_PWM_INT_STAT_PROG_INT0_INT                                  0x1

#define REG_PWM_INT_STAT           (*(volatile reg_pwm_int_stat_t*)((PWM_BASE_ADDRESS + 0xC)))
#define REG_PWM_INT_STAT_ADDR      (PWM_BASE_ADDRESS + 0xC)
#define BP_PWM_INT_STAT_RSVD0                                             9
#define BM_PWM_INT_STAT_RSVD0                                    0xFFFFFE00
#define BP_PWM_INT_STAT_CFIFO_INT                                         8
#define BM_PWM_INT_STAT_CFIFO_INT                                0x00000100
#define BP_PWM_INT_STAT_CYCLE_INT3                                        7
#define BM_PWM_INT_STAT_CYCLE_INT3                               0x00000080
#define BP_PWM_INT_STAT_CYCLE_INT2                                        6
#define BM_PWM_INT_STAT_CYCLE_INT2                               0x00000040
#define BP_PWM_INT_STAT_CYCLE_INT1                                        5
#define BM_PWM_INT_STAT_CYCLE_INT1                               0x00000020
#define BP_PWM_INT_STAT_CYCLE_INT0                                        4
#define BM_PWM_INT_STAT_CYCLE_INT0                               0x00000010
#define BP_PWM_INT_STAT_PROG_INT3                                         3
#define BM_PWM_INT_STAT_PROG_INT3                                0x00000008
#define BP_PWM_INT_STAT_PROG_INT2                                         2
#define BM_PWM_INT_STAT_PROG_INT2                                0x00000004
#define BP_PWM_INT_STAT_PROG_INT1                                         1
#define BM_PWM_INT_STAT_PROG_INT1                                0x00000002
#define BP_PWM_INT_STAT_PROG_INT0                                         0
#define BM_PWM_INT_STAT_PROG_INT0                                0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_chan_cfg_u
{
  uint32_t V;
  struct reg_pwm_chan_cfg_s
  {
    uint32_t DFLT0               :1;
    uint32_t DFLT1               :1;
    uint32_t DFLT2               :1;
    uint32_t DFLT3               :1;
    uint32_t DFLT4               :1;
    uint32_t DFLT5               :1;
    uint32_t DFLT6               :1;
    uint32_t DFLT7               :1;
    uint32_t SYNC0               :1;
    uint32_t SYNC1               :1;
    uint32_t SYNC2               :1;
    uint32_t SYNC3               :1;
    uint32_t SYNC4               :1;
    uint32_t SYNC5               :1;
    uint32_t SYNC6               :1;
    uint32_t SYNC7               :1;
    uint32_t RSVD0               :16;
  }BF;
} reg_pwm_chan_cfg_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_CFG_SYNC7
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_CFG_SYNC7_EN                                       0x1
#define BFV_PWM_CHAN_CFG_SYNC7_DIS                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_CFG_SYNC6
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_CFG_SYNC6_EN                                       0x1
#define BFV_PWM_CHAN_CFG_SYNC6_DIS                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_CFG_SYNC5
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_CFG_SYNC5_EN                                       0x1
#define BFV_PWM_CHAN_CFG_SYNC5_DIS                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_CFG_SYNC4
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_CFG_SYNC4_EN                                       0x1
#define BFV_PWM_CHAN_CFG_SYNC4_DIS                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_CFG_SYNC3
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_CFG_SYNC3_EN                                       0x1
#define BFV_PWM_CHAN_CFG_SYNC3_DIS                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_CFG_SYNC2
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_CFG_SYNC2_EN                                       0x1
#define BFV_PWM_CHAN_CFG_SYNC2_DIS                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_CFG_SYNC1
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_CFG_SYNC1_EN                                       0x1
#define BFV_PWM_CHAN_CFG_SYNC1_DIS                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_CFG_SYNC0
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_CFG_SYNC0_EN                                       0x1
#define BFV_PWM_CHAN_CFG_SYNC0_DIS                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_CFG_DFLT7
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_CFG_DFLT7_HI                                       0x1
#define BFV_PWM_CHAN_CFG_DFLT7_LO                                       0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_CFG_DFLT6
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_CFG_DFLT6_HI                                       0x1
#define BFV_PWM_CHAN_CFG_DFLT6_LO                                       0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_CFG_DFLT5
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_CFG_DFLT5_HI                                       0x1
#define BFV_PWM_CHAN_CFG_DFLT5_LO                                       0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_CFG_DFLT4
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_CFG_DFLT4_HI                                       0x1
#define BFV_PWM_CHAN_CFG_DFLT4_LO                                       0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_CFG_DFLT3
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_CFG_DFLT3_HI                                       0x1
#define BFV_PWM_CHAN_CFG_DFLT3_LO                                       0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_CFG_DFLT2
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_CFG_DFLT2_HI                                       0x1
#define BFV_PWM_CHAN_CFG_DFLT2_LO                                       0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_CFG_DFLT1
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_CFG_DFLT1_HI                                       0x1
#define BFV_PWM_CHAN_CFG_DFLT1_LO                                       0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_CFG_DFLT0
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_CFG_DFLT0_HI                                       0x1
#define BFV_PWM_CHAN_CFG_DFLT0_LO                                       0x0

#define REG_PWM_CHAN_CFG           (*(volatile reg_pwm_chan_cfg_t*)((PWM_BASE_ADDRESS + 0x10)))
#define REG_PWM_CHAN_CFG_ADDR      (PWM_BASE_ADDRESS + 0x10)
#define BP_PWM_CHAN_CFG_RSVD0                                            16
#define BM_PWM_CHAN_CFG_RSVD0                                    0xFFFF0000
#define BP_PWM_CHAN_CFG_SYNC7                                            15
#define BM_PWM_CHAN_CFG_SYNC7                                    0x00008000
#define BP_PWM_CHAN_CFG_SYNC6                                            14
#define BM_PWM_CHAN_CFG_SYNC6                                    0x00004000
#define BP_PWM_CHAN_CFG_SYNC5                                            13
#define BM_PWM_CHAN_CFG_SYNC5                                    0x00002000
#define BP_PWM_CHAN_CFG_SYNC4                                            12
#define BM_PWM_CHAN_CFG_SYNC4                                    0x00001000
#define BP_PWM_CHAN_CFG_SYNC3                                            11
#define BM_PWM_CHAN_CFG_SYNC3                                    0x00000800
#define BP_PWM_CHAN_CFG_SYNC2                                            10
#define BM_PWM_CHAN_CFG_SYNC2                                    0x00000400
#define BP_PWM_CHAN_CFG_SYNC1                                             9
#define BM_PWM_CHAN_CFG_SYNC1                                    0x00000200
#define BP_PWM_CHAN_CFG_SYNC0                                             8
#define BM_PWM_CHAN_CFG_SYNC0                                    0x00000100
#define BP_PWM_CHAN_CFG_DFLT7                                             7
#define BM_PWM_CHAN_CFG_DFLT7                                    0x00000080
#define BP_PWM_CHAN_CFG_DFLT6                                             6
#define BM_PWM_CHAN_CFG_DFLT6                                    0x00000040
#define BP_PWM_CHAN_CFG_DFLT5                                             5
#define BM_PWM_CHAN_CFG_DFLT5                                    0x00000020
#define BP_PWM_CHAN_CFG_DFLT4                                             4
#define BM_PWM_CHAN_CFG_DFLT4                                    0x00000010
#define BP_PWM_CHAN_CFG_DFLT3                                             3
#define BM_PWM_CHAN_CFG_DFLT3                                    0x00000008
#define BP_PWM_CHAN_CFG_DFLT2                                             2
#define BM_PWM_CHAN_CFG_DFLT2                                    0x00000004
#define BP_PWM_CHAN_CFG_DFLT1                                             1
#define BM_PWM_CHAN_CFG_DFLT1                                    0x00000002
#define BP_PWM_CHAN_CFG_DFLT0                                             0
#define BM_PWM_CHAN_CFG_DFLT0                                    0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_chan_mux_u
{
  uint32_t V;
  struct reg_pwm_chan_mux_s
  {
    uint32_t SEL0                :2;
    uint32_t SEL1                :2;
    uint32_t SEL2                :2;
    uint32_t SEL3                :2;
    uint32_t SEL4                :2;
    uint32_t SEL5                :2;
    uint32_t SEL6                :2;
    uint32_t SEL7                :2;
    uint32_t EN0                 :1;
    uint32_t EN1                 :1;
    uint32_t EN2                 :1;
    uint32_t EN3                 :1;
    uint32_t EN4                 :1;
    uint32_t EN5                 :1;
    uint32_t EN6                 :1;
    uint32_t EN7                 :1;
    uint32_t RSVD0               :8;
  }BF;
} reg_pwm_chan_mux_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_MUX_EN7
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_MUX_EN7_EN                                         0x1
#define BFV_PWM_CHAN_MUX_EN7_DIS                                        0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_MUX_EN6
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_MUX_EN6_EN                                         0x1
#define BFV_PWM_CHAN_MUX_EN6_DIS                                        0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_MUX_EN5
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_MUX_EN5_EN                                         0x1
#define BFV_PWM_CHAN_MUX_EN5_DIS                                        0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_MUX_EN4
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_MUX_EN4_EN                                         0x1
#define BFV_PWM_CHAN_MUX_EN4_DIS                                        0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_MUX_EN3
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_MUX_EN3_EN                                         0x1
#define BFV_PWM_CHAN_MUX_EN3_DIS                                        0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_MUX_EN2
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_MUX_EN2_EN                                         0x1
#define BFV_PWM_CHAN_MUX_EN2_DIS                                        0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_MUX_EN1
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_MUX_EN1_EN                                         0x1
#define BFV_PWM_CHAN_MUX_EN1_DIS                                        0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_MUX_EN0
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_MUX_EN0_EN                                         0x1
#define BFV_PWM_CHAN_MUX_EN0_DIS                                        0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_MUX_SEL7
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_MUX_SEL7_PWM3                                      0x3
#define BFV_PWM_CHAN_MUX_SEL7_PWM2                                      0x2
#define BFV_PWM_CHAN_MUX_SEL7_PWM1                                      0x1
#define BFV_PWM_CHAN_MUX_SEL7_PWM0                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_MUX_SEL6
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_MUX_SEL6_PWM3                                      0x3
#define BFV_PWM_CHAN_MUX_SEL6_PWM2                                      0x2
#define BFV_PWM_CHAN_MUX_SEL6_PWM1                                      0x1
#define BFV_PWM_CHAN_MUX_SEL6_PWM0                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_MUX_SEL5
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_MUX_SEL5_PWM3                                      0x3
#define BFV_PWM_CHAN_MUX_SEL5_PWM2                                      0x2
#define BFV_PWM_CHAN_MUX_SEL5_PWM1                                      0x1
#define BFV_PWM_CHAN_MUX_SEL5_PWM0                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_MUX_SEL4
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_MUX_SEL4_PWM3                                      0x3
#define BFV_PWM_CHAN_MUX_SEL4_PWM2                                      0x2
#define BFV_PWM_CHAN_MUX_SEL4_PWM1                                      0x1
#define BFV_PWM_CHAN_MUX_SEL4_PWM0                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_MUX_SEL3
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_MUX_SEL3_PWM3                                      0x3
#define BFV_PWM_CHAN_MUX_SEL3_PWM2                                      0x2
#define BFV_PWM_CHAN_MUX_SEL3_PWM1                                      0x1
#define BFV_PWM_CHAN_MUX_SEL3_PWM0                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_MUX_SEL2
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_MUX_SEL2_PWM3                                      0x3
#define BFV_PWM_CHAN_MUX_SEL2_PWM2                                      0x2
#define BFV_PWM_CHAN_MUX_SEL2_PWM1                                      0x1
#define BFV_PWM_CHAN_MUX_SEL2_PWM0                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_MUX_SEL1
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_MUX_SEL1_PWM3                                      0x3
#define BFV_PWM_CHAN_MUX_SEL1_PWM2                                      0x2
#define BFV_PWM_CHAN_MUX_SEL1_PWM1                                      0x1
#define BFV_PWM_CHAN_MUX_SEL1_PWM0                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CHAN_MUX_SEL0
//-------------------------------------------------------------------------
#define BFV_PWM_CHAN_MUX_SEL0_PWM3                                      0x3
#define BFV_PWM_CHAN_MUX_SEL0_PWM2                                      0x2
#define BFV_PWM_CHAN_MUX_SEL0_PWM1                                      0x1
#define BFV_PWM_CHAN_MUX_SEL0_PWM0                                      0x0

#define REG_PWM_CHAN_MUX           (*(volatile reg_pwm_chan_mux_t*)((PWM_BASE_ADDRESS + 0x14)))
#define REG_PWM_CHAN_MUX_ADDR      (PWM_BASE_ADDRESS + 0x14)
#define BP_PWM_CHAN_MUX_RSVD0                                            24
#define BM_PWM_CHAN_MUX_RSVD0                                    0xFF000000
#define BP_PWM_CHAN_MUX_EN7                                              23
#define BM_PWM_CHAN_MUX_EN7                                      0x00800000
#define BP_PWM_CHAN_MUX_EN6                                              22
#define BM_PWM_CHAN_MUX_EN6                                      0x00400000
#define BP_PWM_CHAN_MUX_EN5                                              21
#define BM_PWM_CHAN_MUX_EN5                                      0x00200000
#define BP_PWM_CHAN_MUX_EN4                                              20
#define BM_PWM_CHAN_MUX_EN4                                      0x00100000
#define BP_PWM_CHAN_MUX_EN3                                              19
#define BM_PWM_CHAN_MUX_EN3                                      0x00080000
#define BP_PWM_CHAN_MUX_EN2                                              18
#define BM_PWM_CHAN_MUX_EN2                                      0x00040000
#define BP_PWM_CHAN_MUX_EN1                                              17
#define BM_PWM_CHAN_MUX_EN1                                      0x00020000
#define BP_PWM_CHAN_MUX_EN0                                              16
#define BM_PWM_CHAN_MUX_EN0                                      0x00010000
#define BP_PWM_CHAN_MUX_SEL7                                             14
#define BM_PWM_CHAN_MUX_SEL7                                     0x0000C000
#define BP_PWM_CHAN_MUX_SEL6                                             12
#define BM_PWM_CHAN_MUX_SEL6                                     0x00003000
#define BP_PWM_CHAN_MUX_SEL5                                             10
#define BM_PWM_CHAN_MUX_SEL5                                     0x00000C00
#define BP_PWM_CHAN_MUX_SEL4                                              8
#define BM_PWM_CHAN_MUX_SEL4                                     0x00000300
#define BP_PWM_CHAN_MUX_SEL3                                              6
#define BM_PWM_CHAN_MUX_SEL3                                     0x000000C0
#define BP_PWM_CHAN_MUX_SEL2                                              4
#define BM_PWM_CHAN_MUX_SEL2                                     0x00000030
#define BP_PWM_CHAN_MUX_SEL1                                              2
#define BM_PWM_CHAN_MUX_SEL1                                     0x0000000C
#define BP_PWM_CHAN_MUX_SEL0                                              0
#define BM_PWM_CHAN_MUX_SEL0                                     0x00000003

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_cfifo_u
{
  uint32_t V;
  struct reg_pwm_cfifo_s
  {
    uint32_t DATA                :24;
    uint32_t WAIT                :1;
    uint32_t RSVD0               :3;
    uint32_t REG                 :2;
    uint32_t SEL                 :2;
  }BF;
} reg_pwm_cfifo_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for PWM_CFIFO_SEL
//-------------------------------------------------------------------------
#define BFV_PWM_CFIFO_SEL_PWM0                                          0x0
#define BFV_PWM_CFIFO_SEL_PWM1                                          0x1
#define BFV_PWM_CFIFO_SEL_PWM2                                          0x2
#define BFV_PWM_CFIFO_SEL_PWM3                                          0x3

//-------------------------------------------------------------------------
// field value definitions for PWM_CFIFO_REG
//-------------------------------------------------------------------------
#define BFV_PWM_CFIFO_REG_CFG                                           0x0
#define BFV_PWM_CFIFO_REG_PER                                           0x1
#define BFV_PWM_CFIFO_REG_PSTRT                                         0x2
#define BFV_PWM_CFIFO_REG_PEND                                          0x3

//-------------------------------------------------------------------------
// field value definitions for PWM_CFIFO_WAIT
//-------------------------------------------------------------------------
#define BFV_PWM_CFIFO_WAIT_EN                                           0x1
#define BFV_PWM_CFIFO_WAIT_DIS                                          0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CFIFO_DATA
//-------------------------------------------------------------------------
#define BFV_PWM_CFIFO_DATA_CYCLE_INT                                0x80000
#define BFV_PWM_CFIFO_DATA_PROG_INT                                 0x40000
#define BFV_PWM_CFIFO_DATA_PULSE_DRIVE                              0x20000
#define BFV_PWM_CFIFO_DATA_ONESHOT                                  0x10000

#define REG_PWM_CFIFO           (*(volatile reg_pwm_cfifo_t*)((PWM_BASE_ADDRESS + 0x18)))
#define REG_PWM_CFIFO_ADDR      (PWM_BASE_ADDRESS + 0x18)
#define BP_PWM_CFIFO_SEL                                                 30
#define BM_PWM_CFIFO_SEL                                         0xC0000000
#define BP_PWM_CFIFO_REG                                                 28
#define BM_PWM_CFIFO_REG                                         0x30000000
#define BP_PWM_CFIFO_RSVD0                                               25
#define BM_PWM_CFIFO_RSVD0                                       0x0E000000
#define BP_PWM_CFIFO_WAIT                                                24
#define BM_PWM_CFIFO_WAIT                                        0x01000000
#define BP_PWM_CFIFO_DATA                                                 0
#define BM_PWM_CFIFO_DATA                                        0x00FFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_cfg0_u
{
  uint32_t V;
  struct reg_pwm_cfg0_s
  {
    uint32_t COUNT               :16;
    uint32_t ONESHOT             :1;
    uint32_t PULSE_DRIVE         :1;
    uint32_t PROG_INT            :1;
    uint32_t CYCLE_INT           :1;
    uint32_t RSVD0               :12;
  }BF;
} reg_pwm_cfg0_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for PWM_CFG0_CYCLE_INT
//-------------------------------------------------------------------------
#define BFV_PWM_CFG0_CYCLE_INT_EN                                       0x1
#define BFV_PWM_CFG0_CYCLE_INT_DIS                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CFG0_PROG_INT
//-------------------------------------------------------------------------
#define BFV_PWM_CFG0_PROG_INT_EN                                        0x1
#define BFV_PWM_CFG0_PROG_INT_DIS                                       0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CFG0_PULSE_DRIVE
//-------------------------------------------------------------------------
#define BFV_PWM_CFG0_PULSE_DRIVE_HI                                     0x1
#define BFV_PWM_CFG0_PULSE_DRIVE_LO                                     0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CFG0_ONESHOT
//-------------------------------------------------------------------------
#define BFV_PWM_CFG0_ONESHOT_EN                                         0x1
#define BFV_PWM_CFG0_ONESHOT_DIS                                        0x0

#define REG_PWM_CFG0           (*(volatile reg_pwm_cfg0_t*)((PWM_BASE_ADDRESS + 0x1C)))
#define REG_PWM_CFG0_ADDR      (PWM_BASE_ADDRESS + 0x1C)
#define BP_PWM_CFG0_RSVD0                                                20
#define BM_PWM_CFG0_RSVD0                                        0xFFF00000
#define BP_PWM_CFG0_CYCLE_INT                                            19
#define BM_PWM_CFG0_CYCLE_INT                                    0x00080000
#define BP_PWM_CFG0_PROG_INT                                             18
#define BM_PWM_CFG0_PROG_INT                                     0x00040000
#define BP_PWM_CFG0_PULSE_DRIVE                                          17
#define BM_PWM_CFG0_PULSE_DRIVE                                  0x00020000
#define BP_PWM_CFG0_ONESHOT                                              16
#define BM_PWM_CFG0_ONESHOT                                      0x00010000
#define BP_PWM_CFG0_COUNT                                                 0
#define BM_PWM_CFG0_COUNT                                        0x0000FFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_cfg1_u
{
  uint32_t V;
  struct reg_pwm_cfg1_s
  {
    uint32_t COUNT               :16;
    uint32_t ONESHOT             :1;
    uint32_t PULSE_DRIVE         :1;
    uint32_t PROG_INT            :1;
    uint32_t CYCLE_INT           :1;
    uint32_t RSVD0               :12;
  }BF;
} reg_pwm_cfg1_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for PWM_CFG1_CYCLE_INT
//-------------------------------------------------------------------------
#define BFV_PWM_CFG1_CYCLE_INT_EN                                       0x1
#define BFV_PWM_CFG1_CYCLE_INT_DIS                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CFG1_PROG_INT
//-------------------------------------------------------------------------
#define BFV_PWM_CFG1_PROG_INT_EN                                        0x1
#define BFV_PWM_CFG1_PROG_INT_DIS                                       0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CFG1_PULSE_DRIVE
//-------------------------------------------------------------------------
#define BFV_PWM_CFG1_PULSE_DRIVE_HI                                     0x1
#define BFV_PWM_CFG1_PULSE_DRIVE_LO                                     0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CFG1_ONESHOT
//-------------------------------------------------------------------------
#define BFV_PWM_CFG1_ONESHOT_EN                                         0x1
#define BFV_PWM_CFG1_ONESHOT_DIS                                        0x0

#define REG_PWM_CFG1           (*(volatile reg_pwm_cfg1_t*)((PWM_BASE_ADDRESS + 0x20)))
#define REG_PWM_CFG1_ADDR      (PWM_BASE_ADDRESS + 0x20)
#define BP_PWM_CFG1_RSVD0                                                20
#define BM_PWM_CFG1_RSVD0                                        0xFFF00000
#define BP_PWM_CFG1_CYCLE_INT                                            19
#define BM_PWM_CFG1_CYCLE_INT                                    0x00080000
#define BP_PWM_CFG1_PROG_INT                                             18
#define BM_PWM_CFG1_PROG_INT                                     0x00040000
#define BP_PWM_CFG1_PULSE_DRIVE                                          17
#define BM_PWM_CFG1_PULSE_DRIVE                                  0x00020000
#define BP_PWM_CFG1_ONESHOT                                              16
#define BM_PWM_CFG1_ONESHOT                                      0x00010000
#define BP_PWM_CFG1_COUNT                                                 0
#define BM_PWM_CFG1_COUNT                                        0x0000FFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_cfg2_u
{
  uint32_t V;
  struct reg_pwm_cfg2_s
  {
    uint32_t COUNT               :16;
    uint32_t ONESHOT             :1;
    uint32_t PULSE_DRIVE         :1;
    uint32_t PROG_INT            :1;
    uint32_t CYCLE_INT           :1;
    uint32_t RSVD0               :12;
  }BF;
} reg_pwm_cfg2_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for PWM_CFG2_CYCLE_INT
//-------------------------------------------------------------------------
#define BFV_PWM_CFG2_CYCLE_INT_EN                                       0x1
#define BFV_PWM_CFG2_CYCLE_INT_DIS                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CFG2_PROG_INT
//-------------------------------------------------------------------------
#define BFV_PWM_CFG2_PROG_INT_EN                                        0x1
#define BFV_PWM_CFG2_PROG_INT_DIS                                       0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CFG2_PULSE_DRIVE
//-------------------------------------------------------------------------
#define BFV_PWM_CFG2_PULSE_DRIVE_HI                                     0x1
#define BFV_PWM_CFG2_PULSE_DRIVE_LO                                     0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CFG2_ONESHOT
//-------------------------------------------------------------------------
#define BFV_PWM_CFG2_ONESHOT_EN                                         0x1
#define BFV_PWM_CFG2_ONESHOT_DIS                                        0x0

#define REG_PWM_CFG2           (*(volatile reg_pwm_cfg2_t*)((PWM_BASE_ADDRESS + 0x24)))
#define REG_PWM_CFG2_ADDR      (PWM_BASE_ADDRESS + 0x24)
#define BP_PWM_CFG2_RSVD0                                                20
#define BM_PWM_CFG2_RSVD0                                        0xFFF00000
#define BP_PWM_CFG2_CYCLE_INT                                            19
#define BM_PWM_CFG2_CYCLE_INT                                    0x00080000
#define BP_PWM_CFG2_PROG_INT                                             18
#define BM_PWM_CFG2_PROG_INT                                     0x00040000
#define BP_PWM_CFG2_PULSE_DRIVE                                          17
#define BM_PWM_CFG2_PULSE_DRIVE                                  0x00020000
#define BP_PWM_CFG2_ONESHOT                                              16
#define BM_PWM_CFG2_ONESHOT                                      0x00010000
#define BP_PWM_CFG2_COUNT                                                 0
#define BM_PWM_CFG2_COUNT                                        0x0000FFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_cfg3_u
{
  uint32_t V;
  struct reg_pwm_cfg3_s
  {
    uint32_t COUNT               :16;
    uint32_t ONESHOT             :1;
    uint32_t PULSE_DRIVE         :1;
    uint32_t PROG_INT            :1;
    uint32_t CYCLE_INT           :1;
    uint32_t RSVD0               :12;
  }BF;
} reg_pwm_cfg3_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for PWM_CFG3_CYCLE_INT
//-------------------------------------------------------------------------
#define BFV_PWM_CFG3_CYCLE_INT_EN                                       0x1
#define BFV_PWM_CFG3_CYCLE_INT_DIS                                      0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CFG3_PROG_INT
//-------------------------------------------------------------------------
#define BFV_PWM_CFG3_PROG_INT_EN                                        0x1
#define BFV_PWM_CFG3_PROG_INT_DIS                                       0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CFG3_PULSE_DRIVE
//-------------------------------------------------------------------------
#define BFV_PWM_CFG3_PULSE_DRIVE_HI                                     0x1
#define BFV_PWM_CFG3_PULSE_DRIVE_LO                                     0x0

//-------------------------------------------------------------------------
// field value definitions for PWM_CFG3_ONESHOT
//-------------------------------------------------------------------------
#define BFV_PWM_CFG3_ONESHOT_EN                                         0x1
#define BFV_PWM_CFG3_ONESHOT_DIS                                        0x0

#define REG_PWM_CFG3           (*(volatile reg_pwm_cfg3_t*)((PWM_BASE_ADDRESS + 0x28)))
#define REG_PWM_CFG3_ADDR      (PWM_BASE_ADDRESS + 0x28)
#define BP_PWM_CFG3_RSVD0                                                20
#define BM_PWM_CFG3_RSVD0                                        0xFFF00000
#define BP_PWM_CFG3_CYCLE_INT                                            19
#define BM_PWM_CFG3_CYCLE_INT                                    0x00080000
#define BP_PWM_CFG3_PROG_INT                                             18
#define BM_PWM_CFG3_PROG_INT                                     0x00040000
#define BP_PWM_CFG3_PULSE_DRIVE                                          17
#define BM_PWM_CFG3_PULSE_DRIVE                                  0x00020000
#define BP_PWM_CFG3_ONESHOT                                              16
#define BM_PWM_CFG3_ONESHOT                                      0x00010000
#define BP_PWM_CFG3_COUNT                                                 0
#define BM_PWM_CFG3_COUNT                                        0x0000FFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_per0_u
{
  uint32_t V;
  struct reg_pwm_per0_s
  {
    uint32_t PER                 :24;
    uint32_t RSVD0               :8;
  }BF;
} reg_pwm_per0_t;

#endif  // __LANGUAGE_ASM__

#define REG_PWM_PER0           (*(volatile reg_pwm_per0_t*)((PWM_BASE_ADDRESS + 0x2C)))
#define REG_PWM_PER0_ADDR      (PWM_BASE_ADDRESS + 0x2C)
#define BP_PWM_PER0_RSVD0                                                24
#define BM_PWM_PER0_RSVD0                                        0xFF000000
#define BP_PWM_PER0_PER                                                   0
#define BM_PWM_PER0_PER                                          0x00FFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_per1_u
{
  uint32_t V;
  struct reg_pwm_per1_s
  {
    uint32_t PER                 :24;
    uint32_t RSVD0               :8;
  }BF;
} reg_pwm_per1_t;

#endif  // __LANGUAGE_ASM__

#define REG_PWM_PER1           (*(volatile reg_pwm_per1_t*)((PWM_BASE_ADDRESS + 0x30)))
#define REG_PWM_PER1_ADDR      (PWM_BASE_ADDRESS + 0x30)
#define BP_PWM_PER1_RSVD0                                                24
#define BM_PWM_PER1_RSVD0                                        0xFF000000
#define BP_PWM_PER1_PER                                                   0
#define BM_PWM_PER1_PER                                          0x00FFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_per2_u
{
  uint32_t V;
  struct reg_pwm_per2_s
  {
    uint32_t PER                 :24;
    uint32_t RSVD0               :8;
  }BF;
} reg_pwm_per2_t;

#endif  // __LANGUAGE_ASM__

#define REG_PWM_PER2           (*(volatile reg_pwm_per2_t*)((PWM_BASE_ADDRESS + 0x34)))
#define REG_PWM_PER2_ADDR      (PWM_BASE_ADDRESS + 0x34)
#define BP_PWM_PER2_RSVD0                                                24
#define BM_PWM_PER2_RSVD0                                        0xFF000000
#define BP_PWM_PER2_PER                                                   0
#define BM_PWM_PER2_PER                                          0x00FFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_per3_u
{
  uint32_t V;
  struct reg_pwm_per3_s
  {
    uint32_t PER                 :24;
    uint32_t RSVD0               :8;
  }BF;
} reg_pwm_per3_t;

#endif  // __LANGUAGE_ASM__

#define REG_PWM_PER3           (*(volatile reg_pwm_per3_t*)((PWM_BASE_ADDRESS + 0x38)))
#define REG_PWM_PER3_ADDR      (PWM_BASE_ADDRESS + 0x38)
#define BP_PWM_PER3_RSVD0                                                24
#define BM_PWM_PER3_RSVD0                                        0xFF000000
#define BP_PWM_PER3_PER                                                   0
#define BM_PWM_PER3_PER                                          0x00FFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_pstrt0_u
{
  uint32_t V;
  struct reg_pwm_pstrt0_s
  {
    uint32_t PSTRT               :24;
    uint32_t RSVD0               :8;
  }BF;
} reg_pwm_pstrt0_t;

#endif  // __LANGUAGE_ASM__

#define REG_PWM_PSTRT0           (*(volatile reg_pwm_pstrt0_t*)((PWM_BASE_ADDRESS + 0x3C)))
#define REG_PWM_PSTRT0_ADDR      (PWM_BASE_ADDRESS + 0x3C)
#define BP_PWM_PSTRT0_RSVD0                                              24
#define BM_PWM_PSTRT0_RSVD0                                      0xFF000000
#define BP_PWM_PSTRT0_PSTRT                                               0
#define BM_PWM_PSTRT0_PSTRT                                      0x00FFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_pstrt1_u
{
  uint32_t V;
  struct reg_pwm_pstrt1_s
  {
    uint32_t PSTRT               :24;
    uint32_t RSVD0               :8;
  }BF;
} reg_pwm_pstrt1_t;

#endif  // __LANGUAGE_ASM__

#define REG_PWM_PSTRT1           (*(volatile reg_pwm_pstrt1_t*)((PWM_BASE_ADDRESS + 0x40)))
#define REG_PWM_PSTRT1_ADDR      (PWM_BASE_ADDRESS + 0x40)
#define BP_PWM_PSTRT1_RSVD0                                              24
#define BM_PWM_PSTRT1_RSVD0                                      0xFF000000
#define BP_PWM_PSTRT1_PSTRT                                               0
#define BM_PWM_PSTRT1_PSTRT                                      0x00FFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_pstrt2_u
{
  uint32_t V;
  struct reg_pwm_pstrt2_s
  {
    uint32_t PSTRT               :24;
    uint32_t RSVD0               :8;
  }BF;
} reg_pwm_pstrt2_t;

#endif  // __LANGUAGE_ASM__

#define REG_PWM_PSTRT2           (*(volatile reg_pwm_pstrt2_t*)((PWM_BASE_ADDRESS + 0x44)))
#define REG_PWM_PSTRT2_ADDR      (PWM_BASE_ADDRESS + 0x44)
#define BP_PWM_PSTRT2_RSVD0                                              24
#define BM_PWM_PSTRT2_RSVD0                                      0xFF000000
#define BP_PWM_PSTRT2_PSTRT                                               0
#define BM_PWM_PSTRT2_PSTRT                                      0x00FFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_pstrt3_u
{
  uint32_t V;
  struct reg_pwm_pstrt3_s
  {
    uint32_t PSTRT               :24;
    uint32_t RSVD0               :8;
  }BF;
} reg_pwm_pstrt3_t;

#endif  // __LANGUAGE_ASM__

#define REG_PWM_PSTRT3           (*(volatile reg_pwm_pstrt3_t*)((PWM_BASE_ADDRESS + 0x48)))
#define REG_PWM_PSTRT3_ADDR      (PWM_BASE_ADDRESS + 0x48)
#define BP_PWM_PSTRT3_RSVD0                                              24
#define BM_PWM_PSTRT3_RSVD0                                      0xFF000000
#define BP_PWM_PSTRT3_PSTRT                                               0
#define BM_PWM_PSTRT3_PSTRT                                      0x00FFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_pend0_u
{
  uint32_t V;
  struct reg_pwm_pend0_s
  {
    uint32_t PEND                :24;
    uint32_t RSVD0               :8;
  }BF;
} reg_pwm_pend0_t;

#endif  // __LANGUAGE_ASM__

#define REG_PWM_PEND0           (*(volatile reg_pwm_pend0_t*)((PWM_BASE_ADDRESS + 0x4C)))
#define REG_PWM_PEND0_ADDR      (PWM_BASE_ADDRESS + 0x4C)
#define BP_PWM_PEND0_RSVD0                                               24
#define BM_PWM_PEND0_RSVD0                                       0xFF000000
#define BP_PWM_PEND0_PEND                                                 0
#define BM_PWM_PEND0_PEND                                        0x00FFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_pend1_u
{
  uint32_t V;
  struct reg_pwm_pend1_s
  {
    uint32_t PEND                :24;
    uint32_t RSVD0               :8;
  }BF;
} reg_pwm_pend1_t;

#endif  // __LANGUAGE_ASM__

#define REG_PWM_PEND1           (*(volatile reg_pwm_pend1_t*)((PWM_BASE_ADDRESS + 0x50)))
#define REG_PWM_PEND1_ADDR      (PWM_BASE_ADDRESS + 0x50)
#define BP_PWM_PEND1_RSVD0                                               24
#define BM_PWM_PEND1_RSVD0                                       0xFF000000
#define BP_PWM_PEND1_PEND                                                 0
#define BM_PWM_PEND1_PEND                                        0x00FFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_pend2_u
{
  uint32_t V;
  struct reg_pwm_pend2_s
  {
    uint32_t PEND                :24;
    uint32_t RSVD0               :8;
  }BF;
} reg_pwm_pend2_t;

#endif  // __LANGUAGE_ASM__

#define REG_PWM_PEND2           (*(volatile reg_pwm_pend2_t*)((PWM_BASE_ADDRESS + 0x54)))
#define REG_PWM_PEND2_ADDR      (PWM_BASE_ADDRESS + 0x54)
#define BP_PWM_PEND2_RSVD0                                               24
#define BM_PWM_PEND2_RSVD0                                       0xFF000000
#define BP_PWM_PEND2_PEND                                                 0
#define BM_PWM_PEND2_PEND                                        0x00FFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_pend3_u
{
  uint32_t V;
  struct reg_pwm_pend3_s
  {
    uint32_t PEND                :24;
    uint32_t RSVD0               :8;
  }BF;
} reg_pwm_pend3_t;

#endif  // __LANGUAGE_ASM__

#define REG_PWM_PEND3           (*(volatile reg_pwm_pend3_t*)((PWM_BASE_ADDRESS + 0x58)))
#define REG_PWM_PEND3_ADDR      (PWM_BASE_ADDRESS + 0x58)
#define BP_PWM_PEND3_RSVD0                                               24
#define BM_PWM_PEND3_RSVD0                                       0xFF000000
#define BP_PWM_PEND3_PEND                                                 0
#define BM_PWM_PEND3_PEND                                        0x00FFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pwm_dbg_read_only_u
{
  uint32_t V;
  struct reg_pwm_dbg_read_only_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_pwm_dbg_read_only_t;

#endif  // __LANGUAGE_ASM__

#define REG_PWM_DBG_READ_ONLY           (*(volatile reg_pwm_dbg_read_only_t*)((PWM_BASE_ADDRESS + 0x5C)))
#define REG_PWM_DBG_READ_ONLY_ADDR      (PWM_BASE_ADDRESS + 0x5C)
#define BP_PWM_DBG_READ_ONLY_VALUE                                        0
#define BM_PWM_DBG_READ_ONLY_VALUE                               0xFFFFFFFF

#define RTC_BASE_ADDRESS 0x50010000


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_ao_csr_u
{
  uint32_t V;
  struct reg_rtc_ao_csr_s
  {
    uint32_t WARM_START_MODE     :8;
    uint32_t RSVD0               :8;
    uint32_t RSVD1               :16;
  }BF;
} reg_rtc_ao_csr_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_AO_CSR           (*(volatile reg_rtc_ao_csr_t*)((RTC_BASE_ADDRESS + 0x0)))
#define REG_RTC_AO_CSR_ADDR      (RTC_BASE_ADDRESS + 0x0)
#define BP_RTC_AO_CSR_RSVD0                                              16
#define BM_RTC_AO_CSR_RSVD0                                      0xFFFF0000
#define BP_RTC_AO_CSR_RSVD1                                               8
#define BM_RTC_AO_CSR_RSVD1                                      0x0000FF00
#define BP_RTC_AO_CSR_WARM_START_MODE                                     0
#define BM_RTC_AO_CSR_WARM_START_MODE                            0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_ao_revid_u
{
  uint32_t V;
  struct reg_rtc_ao_revid_s
  {
    uint32_t REV_M1              :4;
    uint32_t REV_M2              :4;
    uint32_t REV_M3              :4;
    uint32_t REV_M4              :4;
    uint32_t REV_M5              :4;
    uint32_t REV_M6              :4;
    uint32_t REV_POLY            :4;
    uint32_t REV_ALL_LAYER       :4;
  }BF;
} reg_rtc_ao_revid_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_AO_REVID           (*(volatile reg_rtc_ao_revid_t*)((RTC_BASE_ADDRESS + 0x4)))
#define REG_RTC_AO_REVID_ADDR      (RTC_BASE_ADDRESS + 0x4)
#define BP_RTC_AO_REVID_REV_ALL_LAYER                                    28
#define BM_RTC_AO_REVID_REV_ALL_LAYER                            0xF0000000
#define BP_RTC_AO_REVID_REV_POLY                                         24
#define BM_RTC_AO_REVID_REV_POLY                                 0x0F000000
#define BP_RTC_AO_REVID_REV_M6                                           20
#define BM_RTC_AO_REVID_REV_M6                                   0x00F00000
#define BP_RTC_AO_REVID_REV_M5                                           16
#define BM_RTC_AO_REVID_REV_M5                                   0x000F0000
#define BP_RTC_AO_REVID_REV_M4                                           12
#define BM_RTC_AO_REVID_REV_M4                                   0x0000F000
#define BP_RTC_AO_REVID_REV_M3                                            8
#define BM_RTC_AO_REVID_REV_M3                                   0x00000F00
#define BP_RTC_AO_REVID_REV_M2                                            4
#define BM_RTC_AO_REVID_REV_M2                                   0x000000F0
#define BP_RTC_AO_REVID_REV_M1                                            0
#define BM_RTC_AO_REVID_REV_M1                                   0x0000000F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_csra_u
{
  uint32_t V;
  struct reg_rtc_csra_s
  {
    uint32_t INT_STAT            :1;
    uint32_t INT_ENABLE          :1;
    uint32_t RSVD0               :6;
    uint32_t MATCH_SECONDS       :1;
    uint32_t MATCH_MINUTES       :1;
    uint32_t MATCH_HOURS         :1;
    uint32_t MATCH_MONTHS        :1;
    uint32_t MATCH_DAY_DATE      :1;
    uint32_t PER_SECOND          :1;
    uint32_t PER_MINUTE          :1;
    uint32_t RSVD1               :17;
  }BF;
} reg_rtc_csra_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_CSRA           (*(volatile reg_rtc_csra_t*)((RTC_BASE_ADDRESS + 0x20)))
#define REG_RTC_CSRA_ADDR      (RTC_BASE_ADDRESS + 0x20)
#define BP_RTC_CSRA_RSVD0                                                15
#define BM_RTC_CSRA_RSVD0                                        0xFFFF8000
#define BP_RTC_CSRA_PER_MINUTE                                           14
#define BM_RTC_CSRA_PER_MINUTE                                   0x00004000
#define BP_RTC_CSRA_PER_SECOND                                           13
#define BM_RTC_CSRA_PER_SECOND                                   0x00002000
#define BP_RTC_CSRA_MATCH_DAY_DATE                                       12
#define BM_RTC_CSRA_MATCH_DAY_DATE                               0x00001000
#define BP_RTC_CSRA_MATCH_MONTHS                                         11
#define BM_RTC_CSRA_MATCH_MONTHS                                 0x00000800
#define BP_RTC_CSRA_MATCH_HOURS                                          10
#define BM_RTC_CSRA_MATCH_HOURS                                  0x00000400
#define BP_RTC_CSRA_MATCH_MINUTES                                         9
#define BM_RTC_CSRA_MATCH_MINUTES                                0x00000200
#define BP_RTC_CSRA_MATCH_SECONDS                                         8
#define BM_RTC_CSRA_MATCH_SECONDS                                0x00000100
#define BP_RTC_CSRA_RSVD1                                                 2
#define BM_RTC_CSRA_RSVD1                                        0x000000FC
#define BP_RTC_CSRA_INT_ENABLE                                            1
#define BM_RTC_CSRA_INT_ENABLE                                   0x00000002
#define BP_RTC_CSRA_INT_STAT                                              0
#define BM_RTC_CSRA_INT_STAT                                     0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_csrb_u
{
  uint32_t V;
  struct reg_rtc_csrb_s
  {
    uint32_t INT_STAT            :1;
    uint32_t INT_ENABLE          :1;
    uint32_t RSVD0               :6;
    uint32_t MATCH_SECONDS       :1;
    uint32_t MATCH_MINUTES       :1;
    uint32_t MATCH_HOURS         :1;
    uint32_t MATCH_MONTHS        :1;
    uint32_t MATCH_DAY_DATE      :1;
    uint32_t PER_SECOND          :1;
    uint32_t PER_MINUTE          :1;
    uint32_t RSVD1               :17;
  }BF;
} reg_rtc_csrb_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_CSRB           (*(volatile reg_rtc_csrb_t*)((RTC_BASE_ADDRESS + 0x24)))
#define REG_RTC_CSRB_ADDR      (RTC_BASE_ADDRESS + 0x24)
#define BP_RTC_CSRB_RSVD0                                                15
#define BM_RTC_CSRB_RSVD0                                        0xFFFF8000
#define BP_RTC_CSRB_PER_MINUTE                                           14
#define BM_RTC_CSRB_PER_MINUTE                                   0x00004000
#define BP_RTC_CSRB_PER_SECOND                                           13
#define BM_RTC_CSRB_PER_SECOND                                   0x00002000
#define BP_RTC_CSRB_MATCH_DAY_DATE                                       12
#define BM_RTC_CSRB_MATCH_DAY_DATE                               0x00001000
#define BP_RTC_CSRB_MATCH_MONTHS                                         11
#define BM_RTC_CSRB_MATCH_MONTHS                                 0x00000800
#define BP_RTC_CSRB_MATCH_HOURS                                          10
#define BM_RTC_CSRB_MATCH_HOURS                                  0x00000400
#define BP_RTC_CSRB_MATCH_MINUTES                                         9
#define BM_RTC_CSRB_MATCH_MINUTES                                0x00000200
#define BP_RTC_CSRB_MATCH_SECONDS                                         8
#define BM_RTC_CSRB_MATCH_SECONDS                                0x00000100
#define BP_RTC_CSRB_RSVD1                                                 2
#define BM_RTC_CSRB_RSVD1                                        0x000000FC
#define BP_RTC_CSRB_INT_ENABLE                                            1
#define BM_RTC_CSRB_INT_ENABLE                                   0x00000002
#define BP_RTC_CSRB_INT_STAT                                              0
#define BM_RTC_CSRB_INT_STAT                                     0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_toda_u
{
  uint32_t V;
  struct reg_rtc_toda_s
  {
    uint32_t SECONDS             :7;
    uint32_t RSVD0               :1;
    uint32_t MINUTES             :7;
    uint32_t HOURS               :6;
    uint32_t DATE                :6;
    uint32_t MONTH               :5;
  }BF;
} reg_rtc_toda_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_TODA           (*(volatile reg_rtc_toda_t*)((RTC_BASE_ADDRESS + 0x28)))
#define REG_RTC_TODA_ADDR      (RTC_BASE_ADDRESS + 0x28)
#define BP_RTC_TODA_MONTH                                                27
#define BM_RTC_TODA_MONTH                                        0xF8000000
#define BP_RTC_TODA_DATE                                                 21
#define BM_RTC_TODA_DATE                                         0x07E00000
#define BP_RTC_TODA_HOURS                                                15
#define BM_RTC_TODA_HOURS                                        0x001F8000
#define BP_RTC_TODA_MINUTES                                               8
#define BM_RTC_TODA_MINUTES                                      0x00007F00
#define BP_RTC_TODA_RSVD0                                                 7
#define BM_RTC_TODA_RSVD0                                        0x00000080
#define BP_RTC_TODA_SECONDS                                               0
#define BM_RTC_TODA_SECONDS                                      0x0000007F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_todb_u
{
  uint32_t V;
  struct reg_rtc_todb_s
  {
    uint32_t YEAR                :8;
    uint32_t DAY                 :3;
    uint32_t RSVD0               :5;
    uint32_t CENTURY             :1;
    uint32_t RSVD1               :7;
    uint32_t TWELVE_HOUR         :1;
    uint32_t RSVD2               :7;
  }BF;
} reg_rtc_todb_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_TODB           (*(volatile reg_rtc_todb_t*)((RTC_BASE_ADDRESS + 0x2C)))
#define REG_RTC_TODB_ADDR      (RTC_BASE_ADDRESS + 0x2C)
#define BP_RTC_TODB_RSVD0                                                25
#define BM_RTC_TODB_RSVD0                                        0xFE000000
#define BP_RTC_TODB_TWELVE_HOUR                                          24
#define BM_RTC_TODB_TWELVE_HOUR                                  0x01000000
#define BP_RTC_TODB_RSVD1                                                17
#define BM_RTC_TODB_RSVD1                                        0x00FE0000
#define BP_RTC_TODB_CENTURY                                              16
#define BM_RTC_TODB_CENTURY                                      0x00010000
#define BP_RTC_TODB_RSVD2                                                11
#define BM_RTC_TODB_RSVD2                                        0x0000F800
#define BP_RTC_TODB_DAY                                                   8
#define BM_RTC_TODB_DAY                                          0x00000700
#define BP_RTC_TODB_YEAR                                                  0
#define BM_RTC_TODB_YEAR                                         0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_alarma_u
{
  uint32_t V;
  struct reg_rtc_alarma_s
  {
    uint32_t SECONDS             :7;
    uint32_t MINUTES             :7;
    uint32_t HOURS               :6;
    uint32_t DAY                 :1;
    uint32_t DATE                :6;
    uint32_t MONTH               :5;
  }BF;
} reg_rtc_alarma_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_ALARMA           (*(volatile reg_rtc_alarma_t*)((RTC_BASE_ADDRESS + 0x30)))
#define REG_RTC_ALARMA_ADDR      (RTC_BASE_ADDRESS + 0x30)
#define BP_RTC_ALARMA_MONTH                                              27
#define BM_RTC_ALARMA_MONTH                                      0xF8000000
#define BP_RTC_ALARMA_DATE                                               21
#define BM_RTC_ALARMA_DATE                                       0x07E00000
#define BP_RTC_ALARMA_DAY                                                20
#define BM_RTC_ALARMA_DAY                                        0x00100000
#define BP_RTC_ALARMA_HOURS                                              14
#define BM_RTC_ALARMA_HOURS                                      0x000FC000
#define BP_RTC_ALARMA_MINUTES                                             7
#define BM_RTC_ALARMA_MINUTES                                    0x00003F80
#define BP_RTC_ALARMA_SECONDS                                             0
#define BM_RTC_ALARMA_SECONDS                                    0x0000007F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_alarmb_u
{
  uint32_t V;
  struct reg_rtc_alarmb_s
  {
    uint32_t SECONDS             :7;
    uint32_t MINUTES             :7;
    uint32_t HOURS               :6;
    uint32_t DAY                 :1;
    uint32_t DATE                :6;
    uint32_t MONTH               :5;
  }BF;
} reg_rtc_alarmb_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_ALARMB           (*(volatile reg_rtc_alarmb_t*)((RTC_BASE_ADDRESS + 0x34)))
#define REG_RTC_ALARMB_ADDR      (RTC_BASE_ADDRESS + 0x34)
#define BP_RTC_ALARMB_MONTH                                              27
#define BM_RTC_ALARMB_MONTH                                      0xF8000000
#define BP_RTC_ALARMB_DATE                                               21
#define BM_RTC_ALARMB_DATE                                       0x07E00000
#define BP_RTC_ALARMB_DAY                                                20
#define BM_RTC_ALARMB_DAY                                        0x00100000
#define BP_RTC_ALARMB_HOURS                                              14
#define BM_RTC_ALARMB_HOURS                                      0x000FC000
#define BP_RTC_ALARMB_MINUTES                                             7
#define BM_RTC_ALARMB_MINUTES                                    0x00003F80
#define BP_RTC_ALARMB_SECONDS                                             0
#define BM_RTC_ALARMB_SECONDS                                    0x0000007F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_wdt_counter_u
{
  uint32_t V;
  struct reg_rtc_wdt_counter_s
  {
    uint32_t COUNT               :20;
    uint32_t RSVD0               :12;
  }BF;
} reg_rtc_wdt_counter_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_WDT_COUNTER           (*(volatile reg_rtc_wdt_counter_t*)((RTC_BASE_ADDRESS + 0x40)))
#define REG_RTC_WDT_COUNTER_ADDR      (RTC_BASE_ADDRESS + 0x40)
#define BP_RTC_WDT_COUNTER_RSVD0                                         20
#define BM_RTC_WDT_COUNTER_RSVD0                                 0xFFF00000
#define BP_RTC_WDT_COUNTER_COUNT                                          0
#define BM_RTC_WDT_COUNTER_COUNT                                 0x000FFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_wdt_alarm_u
{
  uint32_t V;
  struct reg_rtc_wdt_alarm_s
  {
    uint32_t VALUE               :20;
    uint32_t WDT_RUN             :1;
    uint32_t RESET               :1;
    uint32_t POR                 :1;
    uint32_t IRQ_EN              :1;
    uint32_t PWRREQ              :1;
    uint32_t PWRACK              :1;
    uint32_t RSVD0               :3;
    uint32_t RUNNING             :1;
    uint32_t RESET_REQ           :1;
    uint32_t INT_STAT            :1;
  }BF;
} reg_rtc_wdt_alarm_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for RTC_WDT_ALARM_INT_STAT
//-------------------------------------------------------------------------
#define BFV_RTC_WDT_ALARM_INT_STAT_CLEAR                                0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_WDT_ALARM_RESET_REQ
//-------------------------------------------------------------------------
#define BFV_RTC_WDT_ALARM_RESET_REQ_CLEAR                               0x0
#define BFV_RTC_WDT_ALARM_RESET_REQ_SET                                 0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_WDT_ALARM_IRQ_EN
//-------------------------------------------------------------------------
#define BFV_RTC_WDT_ALARM_IRQ_EN_ENABLE                                 0x1
#define BFV_RTC_WDT_ALARM_IRQ_EN_DISABLE                                0x0

//-------------------------------------------------------------------------
// field value definitions for RTC_WDT_ALARM_POR
//-------------------------------------------------------------------------
#define BFV_RTC_WDT_ALARM_POR_ENABLE                                    0x1
#define BFV_RTC_WDT_ALARM_POR_DISABLE                                   0x0

//-------------------------------------------------------------------------
// field value definitions for RTC_WDT_ALARM_RESET
//-------------------------------------------------------------------------
#define BFV_RTC_WDT_ALARM_RESET_ENABLE                                  0x1
#define BFV_RTC_WDT_ALARM_RESET_DISABLE                                 0x0

//-------------------------------------------------------------------------
// field value definitions for RTC_WDT_ALARM_WDT_RUN
//-------------------------------------------------------------------------
#define BFV_RTC_WDT_ALARM_WDT_RUN_ENABLE                                0x1
#define BFV_RTC_WDT_ALARM_WDT_RUN_DISABLE                               0x0

#define REG_RTC_WDT_ALARM           (*(volatile reg_rtc_wdt_alarm_t*)((RTC_BASE_ADDRESS + 0x44)))
#define REG_RTC_WDT_ALARM_ADDR      (RTC_BASE_ADDRESS + 0x44)
#define BP_RTC_WDT_ALARM_INT_STAT                                        31
#define BM_RTC_WDT_ALARM_INT_STAT                                0x80000000
#define BP_RTC_WDT_ALARM_RESET_REQ                                       30
#define BM_RTC_WDT_ALARM_RESET_REQ                               0x40000000
#define BP_RTC_WDT_ALARM_RUNNING                                         29
#define BM_RTC_WDT_ALARM_RUNNING                                 0x20000000
#define BP_RTC_WDT_ALARM_RSVD0                                           26
#define BM_RTC_WDT_ALARM_RSVD0                                   0x1C000000
#define BP_RTC_WDT_ALARM_PWRACK                                          25
#define BM_RTC_WDT_ALARM_PWRACK                                  0x02000000
#define BP_RTC_WDT_ALARM_PWRREQ                                          24
#define BM_RTC_WDT_ALARM_PWRREQ                                  0x01000000
#define BP_RTC_WDT_ALARM_IRQ_EN                                          23
#define BM_RTC_WDT_ALARM_IRQ_EN                                  0x00800000
#define BP_RTC_WDT_ALARM_POR                                             22
#define BM_RTC_WDT_ALARM_POR                                     0x00400000
#define BP_RTC_WDT_ALARM_RESET                                           21
#define BM_RTC_WDT_ALARM_RESET                                   0x00200000
#define BP_RTC_WDT_ALARM_WDT_RUN                                         20
#define BM_RTC_WDT_ALARM_WDT_RUN                                 0x00100000
#define BP_RTC_WDT_ALARM_VALUE                                            0
#define BM_RTC_WDT_ALARM_VALUE                                   0x000FFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_wdt_reload_u
{
  uint32_t V;
  struct reg_rtc_wdt_reload_s
  {
    uint32_t VALUE               :20;
    uint32_t RSVD0               :12;
  }BF;
} reg_rtc_wdt_reload_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_WDT_RELOAD           (*(volatile reg_rtc_wdt_reload_t*)((RTC_BASE_ADDRESS + 0x48)))
#define REG_RTC_WDT_RELOAD_ADDR      (RTC_BASE_ADDRESS + 0x48)
#define BP_RTC_WDT_RELOAD_RSVD0                                          20
#define BM_RTC_WDT_RELOAD_RSVD0                                  0xFFF00000
#define BP_RTC_WDT_RELOAD_VALUE                                           0
#define BM_RTC_WDT_RELOAD_VALUE                                  0x000FFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_tmr_u
{
  uint32_t V;
  struct reg_rtc_tmr_s
  {
    uint32_t COUNT               :20;
    uint32_t RSVD0               :4;
    uint32_t INT_STAT            :1;
    uint32_t INT_ENABLE          :1;
    uint32_t TIMER               :1;
    uint32_t PERIODIC            :1;
    uint32_t TESTMODE            :1;
    uint32_t RSVD1               :3;
  }BF;
} reg_rtc_tmr_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for RTC_TMR_TESTMODE
//-------------------------------------------------------------------------
#define BFV_RTC_TMR_TESTMODE_DECREMENT                                  0x0
#define BFV_RTC_TMR_TESTMODE_RIGHT_SHIFT                                0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_TMR_PERIODIC
//-------------------------------------------------------------------------
#define BFV_RTC_TMR_PERIODIC_ONESHOT                                    0x0
#define BFV_RTC_TMR_PERIODIC_RUN                                        0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_TMR_TIMER
//-------------------------------------------------------------------------
#define BFV_RTC_TMR_TIMER_STOP                                          0x0
#define BFV_RTC_TMR_TIMER_RUN                                           0x1

#define REG_RTC_TMR           (*(volatile reg_rtc_tmr_t*)((RTC_BASE_ADDRESS + 0x50)))
#define REG_RTC_TMR_ADDR      (RTC_BASE_ADDRESS + 0x50)
#define BP_RTC_TMR_RSVD0                                                 29
#define BM_RTC_TMR_RSVD0                                         0xE0000000
#define BP_RTC_TMR_TESTMODE                                              28
#define BM_RTC_TMR_TESTMODE                                      0x10000000
#define BP_RTC_TMR_PERIODIC                                              27
#define BM_RTC_TMR_PERIODIC                                      0x08000000
#define BP_RTC_TMR_TIMER                                                 26
#define BM_RTC_TMR_TIMER                                         0x04000000
#define BP_RTC_TMR_INT_ENABLE                                            25
#define BM_RTC_TMR_INT_ENABLE                                    0x02000000
#define BP_RTC_TMR_INT_STAT                                              24
#define BM_RTC_TMR_INT_STAT                                      0x01000000
#define BP_RTC_TMR_RSVD1                                                 20
#define BM_RTC_TMR_RSVD1                                         0x00F00000
#define BP_RTC_TMR_COUNT                                                  0
#define BM_RTC_TMR_COUNT                                         0x000FFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_tmr_reload_u
{
  uint32_t V;
  struct reg_rtc_tmr_reload_s
  {
    uint32_t COUNT               :20;
    uint32_t RSVD0               :12;
  }BF;
} reg_rtc_tmr_reload_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_TMR_RELOAD           (*(volatile reg_rtc_tmr_reload_t*)((RTC_BASE_ADDRESS + 0x54)))
#define REG_RTC_TMR_RELOAD_ADDR      (RTC_BASE_ADDRESS + 0x54)
#define BP_RTC_TMR_RELOAD_RSVD0                                          20
#define BM_RTC_TMR_RELOAD_RSVD0                                  0xFFF00000
#define BP_RTC_TMR_RELOAD_COUNT                                           0
#define BM_RTC_TMR_RELOAD_COUNT                                  0x000FFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_send_por_u
{
  uint32_t V;
  struct reg_rtc_send_por_s
  {
    uint32_t KEY                 :32;
  }BF;
} reg_rtc_send_por_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_SEND_POR           (*(volatile reg_rtc_send_por_t*)((RTC_BASE_ADDRESS + 0x58)))
#define REG_RTC_SEND_POR_ADDR      (RTC_BASE_ADDRESS + 0x58)
#define BP_RTC_SEND_POR_KEY                                               0
#define BM_RTC_SEND_POR_KEY                                      0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_unlock_debug_u
{
  uint32_t V;
  struct reg_rtc_unlock_debug_s
  {
    uint32_t KEY                 :32;
  }BF;
} reg_rtc_unlock_debug_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_UNLOCK_DEBUG           (*(volatile reg_rtc_unlock_debug_t*)((RTC_BASE_ADDRESS + 0x5C)))
#define REG_RTC_UNLOCK_DEBUG_ADDR      (RTC_BASE_ADDRESS + 0x5C)
#define BP_RTC_UNLOCK_DEBUG_KEY                                           0
#define BM_RTC_UNLOCK_DEBUG_KEY                                  0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_pwr_u
{
  uint32_t V;
  struct reg_rtc_pwr_s
  {
    uint32_t PERIPH              :1;
    uint32_t M3                  :1;
    uint32_t DSP                 :1;
    uint32_t ADC                 :1;
    uint32_t M3_BUCK             :1;
    uint32_t MEM_BUCK            :1;
    uint32_t DSP_BUCK            :1;
    uint32_t RSVD0               :1;
    uint32_t M3_SRAM0            :1;
    uint32_t M3_SRAM1            :1;
    uint32_t M3_SRAM23           :1;
    uint32_t M3_SRAM4567         :1;
    uint32_t M3_FLASH            :1;
    uint32_t GPIO_FROZEN         :1;
    uint32_t RSVD1               :2;
    uint32_t PERIPH_FORCE        :1;
    uint32_t M3_SRAM0_FORCE      :1;
    uint32_t M3_SRAM1_FORCE      :1;
    uint32_t M3_SRAM23_FORCE     :1;
    uint32_t M3_SRAM4567_FORCE   :1;
    uint32_t M3_FLASH_FORCE      :1;
    uint32_t M3_BUCK_FORCE       :1;
    uint32_t MEM_BUCK_FORCE      :1;
    uint32_t FLASH_VREF          :1;
    uint32_t FLASH_PDM           :1;
    uint32_t FLASH_V25           :1;
    uint32_t DSP_PWR_STATE       :1;
    uint32_t ADC_PWR_STATE       :1;
    uint32_t WAKE_PIN_STATE      :1;
    uint32_t FLASH_PWR_UP_CMPLT  :1;
    uint32_t POWER_DOWN          :1;
  }BF;
} reg_rtc_pwr_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_PWR           (*(volatile reg_rtc_pwr_t*)((RTC_BASE_ADDRESS + 0x60)))
#define REG_RTC_PWR_ADDR      (RTC_BASE_ADDRESS + 0x60)
#define BP_RTC_PWR_POWER_DOWN                                            31
#define BM_RTC_PWR_POWER_DOWN                                    0x80000000
#define BP_RTC_PWR_FLASH_PWR_UP_CMPLT                                    30
#define BM_RTC_PWR_FLASH_PWR_UP_CMPLT                            0x40000000
#define BP_RTC_PWR_WAKE_PIN_STATE                                        29
#define BM_RTC_PWR_WAKE_PIN_STATE                                0x20000000
#define BP_RTC_PWR_ADC_PWR_STATE                                         28
#define BM_RTC_PWR_ADC_PWR_STATE                                 0x10000000
#define BP_RTC_PWR_DSP_PWR_STATE                                         27
#define BM_RTC_PWR_DSP_PWR_STATE                                 0x08000000
#define BP_RTC_PWR_FLASH_V25                                             26
#define BM_RTC_PWR_FLASH_V25                                     0x04000000
#define BP_RTC_PWR_FLASH_PDM                                             25
#define BM_RTC_PWR_FLASH_PDM                                     0x02000000
#define BP_RTC_PWR_FLASH_VREF                                            24
#define BM_RTC_PWR_FLASH_VREF                                    0x01000000
#define BP_RTC_PWR_MEM_BUCK_FORCE                                        23
#define BM_RTC_PWR_MEM_BUCK_FORCE                                0x00800000
#define BP_RTC_PWR_M3_BUCK_FORCE                                         22
#define BM_RTC_PWR_M3_BUCK_FORCE                                 0x00400000
#define BP_RTC_PWR_M3_FLASH_FORCE                                        21
#define BM_RTC_PWR_M3_FLASH_FORCE                                0x00200000
#define BP_RTC_PWR_M3_SRAM4567_FORCE                                     20
#define BM_RTC_PWR_M3_SRAM4567_FORCE                             0x00100000
#define BP_RTC_PWR_M3_SRAM23_FORCE                                       19
#define BM_RTC_PWR_M3_SRAM23_FORCE                               0x00080000
#define BP_RTC_PWR_M3_SRAM1_FORCE                                        18
#define BM_RTC_PWR_M3_SRAM1_FORCE                                0x00040000
#define BP_RTC_PWR_M3_SRAM0_FORCE                                        17
#define BM_RTC_PWR_M3_SRAM0_FORCE                                0x00020000
#define BP_RTC_PWR_PERIPH_FORCE                                          16
#define BM_RTC_PWR_PERIPH_FORCE                                  0x00010000
#define BP_RTC_PWR_RSVD0                                                 14
#define BM_RTC_PWR_RSVD0                                         0x0000C000
#define BP_RTC_PWR_GPIO_FROZEN                                           13
#define BM_RTC_PWR_GPIO_FROZEN                                   0x00002000
#define BP_RTC_PWR_M3_FLASH                                              12
#define BM_RTC_PWR_M3_FLASH                                      0x00001000
#define BP_RTC_PWR_M3_SRAM4567                                           11
#define BM_RTC_PWR_M3_SRAM4567                                   0x00000800
#define BP_RTC_PWR_M3_SRAM23                                             10
#define BM_RTC_PWR_M3_SRAM23                                     0x00000400
#define BP_RTC_PWR_M3_SRAM1                                               9
#define BM_RTC_PWR_M3_SRAM1                                      0x00000200
#define BP_RTC_PWR_M3_SRAM0                                               8
#define BM_RTC_PWR_M3_SRAM0                                      0x00000100
#define BP_RTC_PWR_RSVD1                                                  7
#define BM_RTC_PWR_RSVD1                                         0x00000080
#define BP_RTC_PWR_DSP_BUCK                                               6
#define BM_RTC_PWR_DSP_BUCK                                      0x00000040
#define BP_RTC_PWR_MEM_BUCK                                               5
#define BM_RTC_PWR_MEM_BUCK                                      0x00000020
#define BP_RTC_PWR_M3_BUCK                                                4
#define BM_RTC_PWR_M3_BUCK                                       0x00000010
#define BP_RTC_PWR_ADC                                                    3
#define BM_RTC_PWR_ADC                                           0x00000008
#define BP_RTC_PWR_DSP                                                    2
#define BM_RTC_PWR_DSP                                           0x00000004
#define BP_RTC_PWR_M3                                                     1
#define BM_RTC_PWR_M3                                            0x00000002
#define BP_RTC_PWR_PERIPH                                                 0
#define BM_RTC_PWR_PERIPH                                        0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_pwr_set_u
{
  uint32_t V;
  struct reg_rtc_pwr_set_s
  {
    uint32_t PERIPH              :1;
    uint32_t M3                  :1;
    uint32_t DSP                 :1;
    uint32_t ADC                 :1;
    uint32_t M3_BUCK             :1;
    uint32_t MEM_BUCK            :1;
    uint32_t DSP_BUCK            :1;
    uint32_t RSVD0               :1;
    uint32_t M3_SRAM0            :1;
    uint32_t M3_SRAM1            :1;
    uint32_t M3_SRAM23           :1;
    uint32_t M3_SRAM4567         :1;
    uint32_t M3_FLASH            :1;
    uint32_t GPIO_FROZEN         :1;
    uint32_t RSVD1               :2;
    uint32_t PERIPH_FORCE        :1;
    uint32_t M3_SRAM0_FORCE      :1;
    uint32_t M3_SRAM1_FORCE      :1;
    uint32_t M3_SRAM23_FORCE     :1;
    uint32_t M3_SRAM4567_FORCE   :1;
    uint32_t M3_FLASH_FORCE      :1;
    uint32_t M3_BUCK_FORCE       :1;
    uint32_t MEM_BUCK_FORCE      :1;
    uint32_t FLASH_VREF          :1;
    uint32_t FLASH_PDM           :1;
    uint32_t FLASH_V25           :1;
    uint32_t RSVD2               :4;
    uint32_t POWER_DOWN          :1;
  }BF;
} reg_rtc_pwr_set_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_PWR_SET           (*(volatile reg_rtc_pwr_set_t*)((RTC_BASE_ADDRESS + 0x64)))
#define REG_RTC_PWR_SET_ADDR      (RTC_BASE_ADDRESS + 0x64)
#define BP_RTC_PWR_SET_POWER_DOWN                                        31
#define BM_RTC_PWR_SET_POWER_DOWN                                0x80000000
#define BP_RTC_PWR_SET_RSVD0                                             27
#define BM_RTC_PWR_SET_RSVD0                                     0x78000000
#define BP_RTC_PWR_SET_FLASH_V25                                         26
#define BM_RTC_PWR_SET_FLASH_V25                                 0x04000000
#define BP_RTC_PWR_SET_FLASH_PDM                                         25
#define BM_RTC_PWR_SET_FLASH_PDM                                 0x02000000
#define BP_RTC_PWR_SET_FLASH_VREF                                        24
#define BM_RTC_PWR_SET_FLASH_VREF                                0x01000000
#define BP_RTC_PWR_SET_MEM_BUCK_FORCE                                    23
#define BM_RTC_PWR_SET_MEM_BUCK_FORCE                            0x00800000
#define BP_RTC_PWR_SET_M3_BUCK_FORCE                                     22
#define BM_RTC_PWR_SET_M3_BUCK_FORCE                             0x00400000
#define BP_RTC_PWR_SET_M3_FLASH_FORCE                                    21
#define BM_RTC_PWR_SET_M3_FLASH_FORCE                            0x00200000
#define BP_RTC_PWR_SET_M3_SRAM4567_FORCE                                 20
#define BM_RTC_PWR_SET_M3_SRAM4567_FORCE                         0x00100000
#define BP_RTC_PWR_SET_M3_SRAM23_FORCE                                   19
#define BM_RTC_PWR_SET_M3_SRAM23_FORCE                           0x00080000
#define BP_RTC_PWR_SET_M3_SRAM1_FORCE                                    18
#define BM_RTC_PWR_SET_M3_SRAM1_FORCE                            0x00040000
#define BP_RTC_PWR_SET_M3_SRAM0_FORCE                                    17
#define BM_RTC_PWR_SET_M3_SRAM0_FORCE                            0x00020000
#define BP_RTC_PWR_SET_PERIPH_FORCE                                      16
#define BM_RTC_PWR_SET_PERIPH_FORCE                              0x00010000
#define BP_RTC_PWR_SET_RSVD1                                             14
#define BM_RTC_PWR_SET_RSVD1                                     0x0000C000
#define BP_RTC_PWR_SET_GPIO_FROZEN                                       13
#define BM_RTC_PWR_SET_GPIO_FROZEN                               0x00002000
#define BP_RTC_PWR_SET_M3_FLASH                                          12
#define BM_RTC_PWR_SET_M3_FLASH                                  0x00001000
#define BP_RTC_PWR_SET_M3_SRAM4567                                       11
#define BM_RTC_PWR_SET_M3_SRAM4567                               0x00000800
#define BP_RTC_PWR_SET_M3_SRAM23                                         10
#define BM_RTC_PWR_SET_M3_SRAM23                                 0x00000400
#define BP_RTC_PWR_SET_M3_SRAM1                                           9
#define BM_RTC_PWR_SET_M3_SRAM1                                  0x00000200
#define BP_RTC_PWR_SET_M3_SRAM0                                           8
#define BM_RTC_PWR_SET_M3_SRAM0                                  0x00000100
#define BP_RTC_PWR_SET_RSVD2                                              7
#define BM_RTC_PWR_SET_RSVD2                                     0x00000080
#define BP_RTC_PWR_SET_DSP_BUCK                                           6
#define BM_RTC_PWR_SET_DSP_BUCK                                  0x00000040
#define BP_RTC_PWR_SET_MEM_BUCK                                           5
#define BM_RTC_PWR_SET_MEM_BUCK                                  0x00000020
#define BP_RTC_PWR_SET_M3_BUCK                                            4
#define BM_RTC_PWR_SET_M3_BUCK                                   0x00000010
#define BP_RTC_PWR_SET_ADC                                                3
#define BM_RTC_PWR_SET_ADC                                       0x00000008
#define BP_RTC_PWR_SET_DSP                                                2
#define BM_RTC_PWR_SET_DSP                                       0x00000004
#define BP_RTC_PWR_SET_M3                                                 1
#define BM_RTC_PWR_SET_M3                                        0x00000002
#define BP_RTC_PWR_SET_PERIPH                                             0
#define BM_RTC_PWR_SET_PERIPH                                    0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_pwr_clear_u
{
  uint32_t V;
  struct reg_rtc_pwr_clear_s
  {
    uint32_t PERIPH              :1;
    uint32_t M3                  :1;
    uint32_t DSP                 :1;
    uint32_t ADC                 :1;
    uint32_t M3_BUCK             :1;
    uint32_t MEM_BUCK            :1;
    uint32_t DSP_BUCK            :1;
    uint32_t RSVD0               :1;
    uint32_t M3_SRAM0            :1;
    uint32_t M3_SRAM1            :1;
    uint32_t M3_SRAM23           :1;
    uint32_t M3_SRAM4567         :1;
    uint32_t M3_FLASH            :1;
    uint32_t GPIO_FROZEN         :1;
    uint32_t RSVD1               :2;
    uint32_t PERIPH_FORCE        :1;
    uint32_t M3_SRAM0_FORCE      :1;
    uint32_t M3_SRAM1_FORCE      :1;
    uint32_t M3_SRAM23_FORCE     :1;
    uint32_t M3_SRAM4567_FORCE   :1;
    uint32_t M3_FLASH_FORCE      :1;
    uint32_t M3_BUCK_FORCE       :1;
    uint32_t MEM_BUCK_FORCE      :1;
    uint32_t FLASH_VREF          :1;
    uint32_t FLASH_PDM           :1;
    uint32_t FLASH_V25           :1;
    uint32_t RSVD2               :4;
    uint32_t POWER_DOWN          :1;
  }BF;
} reg_rtc_pwr_clear_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_PWR_CLEAR           (*(volatile reg_rtc_pwr_clear_t*)((RTC_BASE_ADDRESS + 0x68)))
#define REG_RTC_PWR_CLEAR_ADDR      (RTC_BASE_ADDRESS + 0x68)
#define BP_RTC_PWR_CLEAR_POWER_DOWN                                      31
#define BM_RTC_PWR_CLEAR_POWER_DOWN                              0x80000000
#define BP_RTC_PWR_CLEAR_RSVD0                                           27
#define BM_RTC_PWR_CLEAR_RSVD0                                   0x78000000
#define BP_RTC_PWR_CLEAR_FLASH_V25                                       26
#define BM_RTC_PWR_CLEAR_FLASH_V25                               0x04000000
#define BP_RTC_PWR_CLEAR_FLASH_PDM                                       25
#define BM_RTC_PWR_CLEAR_FLASH_PDM                               0x02000000
#define BP_RTC_PWR_CLEAR_FLASH_VREF                                      24
#define BM_RTC_PWR_CLEAR_FLASH_VREF                              0x01000000
#define BP_RTC_PWR_CLEAR_MEM_BUCK_FORCE                                  23
#define BM_RTC_PWR_CLEAR_MEM_BUCK_FORCE                          0x00800000
#define BP_RTC_PWR_CLEAR_M3_BUCK_FORCE                                   22
#define BM_RTC_PWR_CLEAR_M3_BUCK_FORCE                           0x00400000
#define BP_RTC_PWR_CLEAR_M3_FLASH_FORCE                                  21
#define BM_RTC_PWR_CLEAR_M3_FLASH_FORCE                          0x00200000
#define BP_RTC_PWR_CLEAR_M3_SRAM4567_FORCE                               20
#define BM_RTC_PWR_CLEAR_M3_SRAM4567_FORCE                       0x00100000
#define BP_RTC_PWR_CLEAR_M3_SRAM23_FORCE                                 19
#define BM_RTC_PWR_CLEAR_M3_SRAM23_FORCE                         0x00080000
#define BP_RTC_PWR_CLEAR_M3_SRAM1_FORCE                                  18
#define BM_RTC_PWR_CLEAR_M3_SRAM1_FORCE                          0x00040000
#define BP_RTC_PWR_CLEAR_M3_SRAM0_FORCE                                  17
#define BM_RTC_PWR_CLEAR_M3_SRAM0_FORCE                          0x00020000
#define BP_RTC_PWR_CLEAR_PERIPH_FORCE                                    16
#define BM_RTC_PWR_CLEAR_PERIPH_FORCE                            0x00010000
#define BP_RTC_PWR_CLEAR_RSVD1                                           14
#define BM_RTC_PWR_CLEAR_RSVD1                                   0x0000C000
#define BP_RTC_PWR_CLEAR_GPIO_FROZEN                                     13
#define BM_RTC_PWR_CLEAR_GPIO_FROZEN                             0x00002000
#define BP_RTC_PWR_CLEAR_M3_FLASH                                        12
#define BM_RTC_PWR_CLEAR_M3_FLASH                                0x00001000
#define BP_RTC_PWR_CLEAR_M3_SRAM4567                                     11
#define BM_RTC_PWR_CLEAR_M3_SRAM4567                             0x00000800
#define BP_RTC_PWR_CLEAR_M3_SRAM23                                       10
#define BM_RTC_PWR_CLEAR_M3_SRAM23                               0x00000400
#define BP_RTC_PWR_CLEAR_M3_SRAM1                                         9
#define BM_RTC_PWR_CLEAR_M3_SRAM1                                0x00000200
#define BP_RTC_PWR_CLEAR_M3_SRAM0                                         8
#define BM_RTC_PWR_CLEAR_M3_SRAM0                                0x00000100
#define BP_RTC_PWR_CLEAR_RSVD2                                            7
#define BM_RTC_PWR_CLEAR_RSVD2                                   0x00000080
#define BP_RTC_PWR_CLEAR_DSP_BUCK                                         6
#define BM_RTC_PWR_CLEAR_DSP_BUCK                                0x00000040
#define BP_RTC_PWR_CLEAR_MEM_BUCK                                         5
#define BM_RTC_PWR_CLEAR_MEM_BUCK                                0x00000020
#define BP_RTC_PWR_CLEAR_M3_BUCK                                          4
#define BM_RTC_PWR_CLEAR_M3_BUCK                                 0x00000010
#define BP_RTC_PWR_CLEAR_ADC                                              3
#define BM_RTC_PWR_CLEAR_ADC                                     0x00000008
#define BP_RTC_PWR_CLEAR_DSP                                              2
#define BM_RTC_PWR_CLEAR_DSP                                     0x00000004
#define BP_RTC_PWR_CLEAR_M3                                               1
#define BM_RTC_PWR_CLEAR_M3                                      0x00000002
#define BP_RTC_PWR_CLEAR_PERIPH                                           0
#define BM_RTC_PWR_CLEAR_PERIPH                                  0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_osc_csr_u
{
  uint32_t V;
  struct reg_rtc_osc_csr_s
  {
    uint32_t LFO_TRIM            :8;
    uint32_t LFO_36NA_TRIM       :3;
    uint32_t LFO_36NA_DIS        :1;
    uint32_t LFO_3NA_DIS         :1;
    uint32_t RSVD0               :3;
    uint32_t HFO_TRIM            :8;
    uint32_t M3_OSC_DLY_SEL      :2;
    uint32_t DSP_OSC_DLY_SEL     :2;
    uint32_t BUCK_HF_CLK_SRC     :1;
    uint32_t RSVD1               :2;
    uint32_t HFO_CLK_GATE        :1;
  }BF;
} reg_rtc_osc_csr_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_OSC_CSR           (*(volatile reg_rtc_osc_csr_t*)((RTC_BASE_ADDRESS + 0x6C)))
#define REG_RTC_OSC_CSR_ADDR      (RTC_BASE_ADDRESS + 0x6C)
#define BP_RTC_OSC_CSR_HFO_CLK_GATE                                      31
#define BM_RTC_OSC_CSR_HFO_CLK_GATE                              0x80000000
#define BP_RTC_OSC_CSR_RSVD0                                             29
#define BM_RTC_OSC_CSR_RSVD0                                     0x60000000
#define BP_RTC_OSC_CSR_BUCK_HF_CLK_SRC                                   28
#define BM_RTC_OSC_CSR_BUCK_HF_CLK_SRC                           0x10000000
#define BP_RTC_OSC_CSR_DSP_OSC_DLY_SEL                                   26
#define BM_RTC_OSC_CSR_DSP_OSC_DLY_SEL                           0x0C000000
#define BP_RTC_OSC_CSR_M3_OSC_DLY_SEL                                    24
#define BM_RTC_OSC_CSR_M3_OSC_DLY_SEL                            0x03000000
#define BP_RTC_OSC_CSR_HFO_TRIM                                          16
#define BM_RTC_OSC_CSR_HFO_TRIM                                  0x00FF0000
#define BP_RTC_OSC_CSR_RSVD1                                             13
#define BM_RTC_OSC_CSR_RSVD1                                     0x0000E000
#define BP_RTC_OSC_CSR_LFO_3NA_DIS                                       12
#define BM_RTC_OSC_CSR_LFO_3NA_DIS                               0x00001000
#define BP_RTC_OSC_CSR_LFO_36NA_DIS                                      11
#define BM_RTC_OSC_CSR_LFO_36NA_DIS                              0x00000800
#define BP_RTC_OSC_CSR_LFO_36NA_TRIM                                      8
#define BM_RTC_OSC_CSR_LFO_36NA_TRIM                             0x00000700
#define BP_RTC_OSC_CSR_LFO_TRIM                                           0
#define BM_RTC_OSC_CSR_LFO_TRIM                                  0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_pmic_ao_csr_u
{
  uint32_t V;
  struct reg_rtc_pmic_ao_csr_s
  {
    uint32_t PU_BYPASS           :8;
    uint32_t SEL_PD              :8;
    uint32_t VREG_TRIM           :3;
    uint32_t OP_MODE             :3;
    uint32_t SEL_REF_EXT         :1;
    uint32_t BYPASS_PU           :1;
    uint32_t RSVD0               :1;
    uint32_t SEL_OSC_DIV         :3;
    uint32_t SEL_OSC             :1;
    uint32_t WRITE               :1;
    uint32_t RSVD1               :2;
  }BF;
} reg_rtc_pmic_ao_csr_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_AO_CSR_SEL_OSC
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_AO_CSR_SEL_OSC_HFO                                 0x0
#define BFV_RTC_PMIC_AO_CSR_SEL_OSC_XTAL                                0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_AO_CSR_SEL_OSC_DIV
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_AO_CSR_SEL_OSC_DIV_1BY1                            0x0
#define BFV_RTC_PMIC_AO_CSR_SEL_OSC_DIV_1BY2                            0x1
#define BFV_RTC_PMIC_AO_CSR_SEL_OSC_DIV_1BY4                            0x2
#define BFV_RTC_PMIC_AO_CSR_SEL_OSC_DIV_1BY8                            0x3
#define BFV_RTC_PMIC_AO_CSR_SEL_OSC_DIV_1BY16                           0x4
#define BFV_RTC_PMIC_AO_CSR_SEL_OSC_DIV_1BY32                           0x5
#define BFV_RTC_PMIC_AO_CSR_SEL_OSC_DIV_1BY64                           0x6
#define BFV_RTC_PMIC_AO_CSR_SEL_OSC_DIV_1BY128                          0x7

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_AO_CSR_BYPASS_PU
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_AO_CSR_BYPASS_PU_NORMAL                            0x0
#define BFV_RTC_PMIC_AO_CSR_BYPASS_PU_OVERRIDE                          0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_AO_CSR_SEL_REF_EXT
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_AO_CSR_SEL_REF_EXT_INITIAL                         0x0
#define BFV_RTC_PMIC_AO_CSR_SEL_REF_EXT_NORMAL                          0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_AO_CSR_OP_MODE
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_AO_CSR_OP_MODE_VOLTAGE_600MV                       0x0
#define BFV_RTC_PMIC_AO_CSR_OP_MODE_VOLTAGE_700MV                       0x1
#define BFV_RTC_PMIC_AO_CSR_OP_MODE_VOLTAGE_900MV                       0x2
#define BFV_RTC_PMIC_AO_CSR_OP_MODE_VOLTAGE_1200MV                      0x3
#define BFV_RTC_PMIC_AO_CSR_OP_MODE_FREQUENCY_MODE                      0x4
#define BFV_RTC_PMIC_AO_CSR_OP_MODE_FREQ_VMIN                           0x5
#define BFV_RTC_PMIC_AO_CSR_OP_MODE_FREQ_VMAX                           0x6
#define BFV_RTC_PMIC_AO_CSR_OP_MODE_FREQUENCY_NO_VLIM                   0x7

#define REG_RTC_PMIC_AO_CSR           (*(volatile reg_rtc_pmic_ao_csr_t*)((RTC_BASE_ADDRESS + 0x70)))
#define REG_RTC_PMIC_AO_CSR_ADDR      (RTC_BASE_ADDRESS + 0x70)
#define BP_RTC_PMIC_AO_CSR_RSVD0                                         30
#define BM_RTC_PMIC_AO_CSR_RSVD0                                 0xC0000000
#define BP_RTC_PMIC_AO_CSR_WRITE                                         29
#define BM_RTC_PMIC_AO_CSR_WRITE                                 0x20000000
#define BP_RTC_PMIC_AO_CSR_SEL_OSC                                       28
#define BM_RTC_PMIC_AO_CSR_SEL_OSC                               0x10000000
#define BP_RTC_PMIC_AO_CSR_SEL_OSC_DIV                                   25
#define BM_RTC_PMIC_AO_CSR_SEL_OSC_DIV                           0x0E000000
#define BP_RTC_PMIC_AO_CSR_RSVD1                                         24
#define BM_RTC_PMIC_AO_CSR_RSVD1                                 0x01000000
#define BP_RTC_PMIC_AO_CSR_BYPASS_PU                                     23
#define BM_RTC_PMIC_AO_CSR_BYPASS_PU                             0x00800000
#define BP_RTC_PMIC_AO_CSR_SEL_REF_EXT                                   22
#define BM_RTC_PMIC_AO_CSR_SEL_REF_EXT                           0x00400000
#define BP_RTC_PMIC_AO_CSR_OP_MODE                                       19
#define BM_RTC_PMIC_AO_CSR_OP_MODE                               0x00380000
#define BP_RTC_PMIC_AO_CSR_VREG_TRIM                                     16
#define BM_RTC_PMIC_AO_CSR_VREG_TRIM                             0x00070000
#define BP_RTC_PMIC_AO_CSR_SEL_PD                                         8
#define BM_RTC_PMIC_AO_CSR_SEL_PD                                0x0000FF00
#define BP_RTC_PMIC_AO_CSR_PU_BYPASS                                      0
#define BM_RTC_PMIC_AO_CSR_PU_BYPASS                             0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_pmic_mem_csr_u
{
  uint32_t V;
  struct reg_rtc_pmic_mem_csr_s
  {
    uint32_t PU_BYPASS           :8;
    uint32_t SEL_PD              :8;
    uint32_t VREG_TRIM           :3;
    uint32_t OP_MODE             :3;
    uint32_t SEL_REF_EXT         :1;
    uint32_t BYPASS_PU           :1;
    uint32_t RSVD0               :1;
    uint32_t SEL_OSC_DIV         :3;
    uint32_t SEL_OSC             :1;
    uint32_t WRITE               :1;
    uint32_t STABLE              :1;
    uint32_t READY               :1;
  }BF;
} reg_rtc_pmic_mem_csr_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_MEM_CSR_SEL_OSC
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_MEM_CSR_SEL_OSC_HFO                                0x0
#define BFV_RTC_PMIC_MEM_CSR_SEL_OSC_XTAL                               0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_MEM_CSR_SEL_OSC_DIV
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_MEM_CSR_SEL_OSC_DIV_1BY1                           0x0
#define BFV_RTC_PMIC_MEM_CSR_SEL_OSC_DIV_1BY2                           0x1
#define BFV_RTC_PMIC_MEM_CSR_SEL_OSC_DIV_1BY4                           0x2
#define BFV_RTC_PMIC_MEM_CSR_SEL_OSC_DIV_1BY8                           0x3
#define BFV_RTC_PMIC_MEM_CSR_SEL_OSC_DIV_1BY16                          0x4
#define BFV_RTC_PMIC_MEM_CSR_SEL_OSC_DIV_1BY32                          0x5
#define BFV_RTC_PMIC_MEM_CSR_SEL_OSC_DIV_1BY64                          0x6
#define BFV_RTC_PMIC_MEM_CSR_SEL_OSC_DIV_1BY128                         0x7

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_MEM_CSR_BYPASS_PU
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_MEM_CSR_BYPASS_PU_NORMAL                           0x0
#define BFV_RTC_PMIC_MEM_CSR_BYPASS_PU_OVERRIDE                         0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_MEM_CSR_SEL_REF_EXT
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_MEM_CSR_SEL_REF_EXT_INITIAL                        0x0
#define BFV_RTC_PMIC_MEM_CSR_SEL_REF_EXT_NORMAL                         0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_MEM_CSR_OP_MODE
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_MEM_CSR_OP_MODE_VOLTAGE_600MV                      0x0
#define BFV_RTC_PMIC_MEM_CSR_OP_MODE_VOLTAGE_700MV                      0x1
#define BFV_RTC_PMIC_MEM_CSR_OP_MODE_VOLTAGE_900MV                      0x2
#define BFV_RTC_PMIC_MEM_CSR_OP_MODE_VOLTAGE_1200MV                     0x3
#define BFV_RTC_PMIC_MEM_CSR_OP_MODE_FREQUENCY_MODE                     0x4
#define BFV_RTC_PMIC_MEM_CSR_OP_MODE_FREQ_VMIN                          0x5
#define BFV_RTC_PMIC_MEM_CSR_OP_MODE_FREQ_VMAX                          0x6
#define BFV_RTC_PMIC_MEM_CSR_OP_MODE_FREQUENCY_NO_VLIM                  0x7

#define REG_RTC_PMIC_MEM_CSR           (*(volatile reg_rtc_pmic_mem_csr_t*)((RTC_BASE_ADDRESS + 0x74)))
#define REG_RTC_PMIC_MEM_CSR_ADDR      (RTC_BASE_ADDRESS + 0x74)
#define BP_RTC_PMIC_MEM_CSR_READY                                        31
#define BM_RTC_PMIC_MEM_CSR_READY                                0x80000000
#define BP_RTC_PMIC_MEM_CSR_STABLE                                       30
#define BM_RTC_PMIC_MEM_CSR_STABLE                               0x40000000
#define BP_RTC_PMIC_MEM_CSR_WRITE                                        29
#define BM_RTC_PMIC_MEM_CSR_WRITE                                0x20000000
#define BP_RTC_PMIC_MEM_CSR_SEL_OSC                                      28
#define BM_RTC_PMIC_MEM_CSR_SEL_OSC                              0x10000000
#define BP_RTC_PMIC_MEM_CSR_SEL_OSC_DIV                                  25
#define BM_RTC_PMIC_MEM_CSR_SEL_OSC_DIV                          0x0E000000
#define BP_RTC_PMIC_MEM_CSR_RSVD0                                        24
#define BM_RTC_PMIC_MEM_CSR_RSVD0                                0x01000000
#define BP_RTC_PMIC_MEM_CSR_BYPASS_PU                                    23
#define BM_RTC_PMIC_MEM_CSR_BYPASS_PU                            0x00800000
#define BP_RTC_PMIC_MEM_CSR_SEL_REF_EXT                                  22
#define BM_RTC_PMIC_MEM_CSR_SEL_REF_EXT                          0x00400000
#define BP_RTC_PMIC_MEM_CSR_OP_MODE                                      19
#define BM_RTC_PMIC_MEM_CSR_OP_MODE                              0x00380000
#define BP_RTC_PMIC_MEM_CSR_VREG_TRIM                                    16
#define BM_RTC_PMIC_MEM_CSR_VREG_TRIM                            0x00070000
#define BP_RTC_PMIC_MEM_CSR_SEL_PD                                        8
#define BM_RTC_PMIC_MEM_CSR_SEL_PD                               0x0000FF00
#define BP_RTC_PMIC_MEM_CSR_PU_BYPASS                                     0
#define BM_RTC_PMIC_MEM_CSR_PU_BYPASS                            0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_pmic_m3_csr_u
{
  uint32_t V;
  struct reg_rtc_pmic_m3_csr_s
  {
    uint32_t PU_BYPASS           :8;
    uint32_t SEL_PD              :8;
    uint32_t VREG_TRIM           :3;
    uint32_t OP_MODE             :3;
    uint32_t SEL_REF_EXT         :1;
    uint32_t FMODE_RST_L_N       :1;
    uint32_t SEL_VREG            :1;
    uint32_t SEL_OSC_DIV         :3;
    uint32_t SEL_OSC             :1;
    uint32_t WRITE               :1;
    uint32_t STABLE              :1;
    uint32_t READY               :1;
  }BF;
} reg_rtc_pmic_m3_csr_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_M3_CSR_SEL_OSC
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_M3_CSR_SEL_OSC_HFO                                 0x0
#define BFV_RTC_PMIC_M3_CSR_SEL_OSC_XTAL                                0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_M3_CSR_SEL_OSC_DIV
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_M3_CSR_SEL_OSC_DIV_1BY1                            0x0
#define BFV_RTC_PMIC_M3_CSR_SEL_OSC_DIV_1BY2                            0x1
#define BFV_RTC_PMIC_M3_CSR_SEL_OSC_DIV_1BY4                            0x2
#define BFV_RTC_PMIC_M3_CSR_SEL_OSC_DIV_1BY8                            0x3
#define BFV_RTC_PMIC_M3_CSR_SEL_OSC_DIV_1BY16                           0x4
#define BFV_RTC_PMIC_M3_CSR_SEL_OSC_DIV_1BY32                           0x5
#define BFV_RTC_PMIC_M3_CSR_SEL_OSC_DIV_1BY64                           0x6
#define BFV_RTC_PMIC_M3_CSR_SEL_OSC_DIV_1BY128                          0x7

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_M3_CSR_SEL_VREG
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_M3_CSR_SEL_VREG_REG_OUTPUT                         0x0
#define BFV_RTC_PMIC_M3_CSR_SEL_VREG_POST_SWITCH                        0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_M3_CSR_FMODE_RST_L_N
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_M3_CSR_FMODE_RST_L_N_RESET                         0x1
#define BFV_RTC_PMIC_M3_CSR_FMODE_RST_L_N_NORMAL                        0x0

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_M3_CSR_SEL_REF_EXT
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_M3_CSR_SEL_REF_EXT_INITIAL                         0x0
#define BFV_RTC_PMIC_M3_CSR_SEL_REF_EXT_NORMAL                          0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_M3_CSR_OP_MODE
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_M3_CSR_OP_MODE_VOLTAGE_600MV                       0x0
#define BFV_RTC_PMIC_M3_CSR_OP_MODE_VOLTAGE_700MV                       0x1
#define BFV_RTC_PMIC_M3_CSR_OP_MODE_VOLTAGE_900MV                       0x2
#define BFV_RTC_PMIC_M3_CSR_OP_MODE_VOLTAGE_1200MV                      0x3
#define BFV_RTC_PMIC_M3_CSR_OP_MODE_FREQUENCY_MODE                      0x4
#define BFV_RTC_PMIC_M3_CSR_OP_MODE_FREQ_VMIN                           0x5
#define BFV_RTC_PMIC_M3_CSR_OP_MODE_FREQ_VMAX                           0x6
#define BFV_RTC_PMIC_M3_CSR_OP_MODE_FREQUENCY_NO_VLIM                   0x7

#define REG_RTC_PMIC_M3_CSR           (*(volatile reg_rtc_pmic_m3_csr_t*)((RTC_BASE_ADDRESS + 0x78)))
#define REG_RTC_PMIC_M3_CSR_ADDR      (RTC_BASE_ADDRESS + 0x78)
#define BP_RTC_PMIC_M3_CSR_READY                                         31
#define BM_RTC_PMIC_M3_CSR_READY                                 0x80000000
#define BP_RTC_PMIC_M3_CSR_STABLE                                        30
#define BM_RTC_PMIC_M3_CSR_STABLE                                0x40000000
#define BP_RTC_PMIC_M3_CSR_WRITE                                         29
#define BM_RTC_PMIC_M3_CSR_WRITE                                 0x20000000
#define BP_RTC_PMIC_M3_CSR_SEL_OSC                                       28
#define BM_RTC_PMIC_M3_CSR_SEL_OSC                               0x10000000
#define BP_RTC_PMIC_M3_CSR_SEL_OSC_DIV                                   25
#define BM_RTC_PMIC_M3_CSR_SEL_OSC_DIV                           0x0E000000
#define BP_RTC_PMIC_M3_CSR_SEL_VREG                                      24
#define BM_RTC_PMIC_M3_CSR_SEL_VREG                              0x01000000
#define BP_RTC_PMIC_M3_CSR_FMODE_RST_L_N                                 23
#define BM_RTC_PMIC_M3_CSR_FMODE_RST_L_N                         0x00800000
#define BP_RTC_PMIC_M3_CSR_SEL_REF_EXT                                   22
#define BM_RTC_PMIC_M3_CSR_SEL_REF_EXT                           0x00400000
#define BP_RTC_PMIC_M3_CSR_OP_MODE                                       19
#define BM_RTC_PMIC_M3_CSR_OP_MODE                               0x00380000
#define BP_RTC_PMIC_M3_CSR_VREG_TRIM                                     16
#define BM_RTC_PMIC_M3_CSR_VREG_TRIM                             0x00070000
#define BP_RTC_PMIC_M3_CSR_SEL_PD                                         8
#define BM_RTC_PMIC_M3_CSR_SEL_PD                                0x0000FF00
#define BP_RTC_PMIC_M3_CSR_PU_BYPASS                                      0
#define BM_RTC_PMIC_M3_CSR_PU_BYPASS                             0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_pmic_m3_csr2_u
{
  uint32_t V;
  struct reg_rtc_pmic_m3_csr2_s
  {
    uint32_t FREQ_TARGET         :8;
    uint32_t RSVD0               :24;
  }BF;
} reg_rtc_pmic_m3_csr2_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_PMIC_M3_CSR2           (*(volatile reg_rtc_pmic_m3_csr2_t*)((RTC_BASE_ADDRESS + 0x7C)))
#define REG_RTC_PMIC_M3_CSR2_ADDR      (RTC_BASE_ADDRESS + 0x7C)
#define BP_RTC_PMIC_M3_CSR2_RSVD0                                         8
#define BM_RTC_PMIC_M3_CSR2_RSVD0                                0xFFFFFF00
#define BP_RTC_PMIC_M3_CSR2_FREQ_TARGET                                   0
#define BM_RTC_PMIC_M3_CSR2_FREQ_TARGET                          0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_ldo_csr_u
{
  uint32_t V;
  struct reg_rtc_ldo_csr_s
  {
    uint32_t LDO_BALLAST         :1;
    uint32_t RSVD0               :3;
    uint32_t VREF_TRIM           :6;
    uint32_t RSVD1               :22;
  }BF;
} reg_rtc_ldo_csr_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for RTC_LDO_CSR_LDO_BALLAST
//-------------------------------------------------------------------------
#define BFV_RTC_LDO_CSR_LDO_BALLAST_DISABLE                             0x0
#define BFV_RTC_LDO_CSR_LDO_BALLAST_ENABLE                              0x1

#define REG_RTC_LDO_CSR           (*(volatile reg_rtc_ldo_csr_t*)((RTC_BASE_ADDRESS + 0x80)))
#define REG_RTC_LDO_CSR_ADDR      (RTC_BASE_ADDRESS + 0x80)
#define BP_RTC_LDO_CSR_RSVD0                                             10
#define BM_RTC_LDO_CSR_RSVD0                                     0xFFFFFC00
#define BP_RTC_LDO_CSR_VREF_TRIM                                          4
#define BM_RTC_LDO_CSR_VREF_TRIM                                 0x000003F0
#define BP_RTC_LDO_CSR_RSVD1                                              1
#define BM_RTC_LDO_CSR_RSVD1                                     0x0000000E
#define BP_RTC_LDO_CSR_LDO_BALLAST                                        0
#define BM_RTC_LDO_CSR_LDO_BALLAST                               0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_pmic_fref_ao_csr_u
{
  uint32_t V;
  struct reg_rtc_pmic_fref_ao_csr_s
  {
    uint32_t PMIC_AO_SEL_LOW     :3;
    uint32_t PMIC_AO_CLK_SRC     :1;
    uint32_t RSVD0               :4;
    uint32_t PMIC_MEM_SEL_LOW    :3;
    uint32_t PMIC_MEM_CLK_SRC    :1;
    uint32_t RSVD1               :4;
    uint32_t PMIC_M3_SEL_LOW     :3;
    uint32_t PMIC_M3_CLK_SRC     :1;
    uint32_t RSVD2               :4;
    uint32_t BUCK_DSP_SEL_LOW    :3;
    uint32_t PMIC_DSP_CLK_SRC    :1;
    uint32_t RSVD3               :4;
  }BF;
} reg_rtc_pmic_fref_ao_csr_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_FREF_AO_CSR_PMIC_DSP_CLK_SRC
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_DSP_CLK_SRC_XTAL                  0x0
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_DSP_CLK_SRC_HFO                   0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_FREF_AO_CSR_BUCK_DSP_SEL_LOW
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_FREF_AO_CSR_BUCK_DSP_SEL_LOW_1BY1                  0x0
#define BFV_RTC_PMIC_FREF_AO_CSR_BUCK_DSP_SEL_LOW_1BY2                  0x1
#define BFV_RTC_PMIC_FREF_AO_CSR_BUCK_DSP_SEL_LOW_1BY4                  0x2
#define BFV_RTC_PMIC_FREF_AO_CSR_BUCK_DSP_SEL_LOW_1BY8                  0x3
#define BFV_RTC_PMIC_FREF_AO_CSR_BUCK_DSP_SEL_LOW_1BY16                 0x4
#define BFV_RTC_PMIC_FREF_AO_CSR_BUCK_DSP_SEL_LOW_1BY32                 0x5
#define BFV_RTC_PMIC_FREF_AO_CSR_BUCK_DSP_SEL_LOW_1BY64                 0x6
#define BFV_RTC_PMIC_FREF_AO_CSR_BUCK_DSP_SEL_LOW_1BY128                0x7

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_FREF_AO_CSR_PMIC_M3_CLK_SRC
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_M3_CLK_SRC_XTAL                   0x0
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_M3_CLK_SRC_HFO                    0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_FREF_AO_CSR_PMIC_M3_SEL_LOW
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_M3_SEL_LOW_1BY1                   0x0
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_M3_SEL_LOW_1BY2                   0x1
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_M3_SEL_LOW_1BY4                   0x2
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_M3_SEL_LOW_1BY8                   0x3
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_M3_SEL_LOW_1BY16                  0x4
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_M3_SEL_LOW_1BY32                  0x5
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_M3_SEL_LOW_1BY64                  0x6
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_M3_SEL_LOW_1BY128                 0x7

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_FREF_AO_CSR_PMIC_MEM_CLK_SRC
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_MEM_CLK_SRC_XTAL                  0x0
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_MEM_CLK_SRC_HFO                   0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_FREF_AO_CSR_PMIC_MEM_SEL_LOW
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_MEM_SEL_LOW_1BY1                  0x0
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_MEM_SEL_LOW_1BY2                  0x1
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_MEM_SEL_LOW_1BY4                  0x2
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_MEM_SEL_LOW_1BY8                  0x3
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_MEM_SEL_LOW_1BY16                 0x4
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_MEM_SEL_LOW_1BY32                 0x5
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_MEM_SEL_LOW_1BY64                 0x6
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_MEM_SEL_LOW_1BY128                0x7

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_FREF_AO_CSR_PMIC_AO_CLK_SRC
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_AO_CLK_SRC_XTAL                   0x0
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_AO_CLK_SRC_HFO                    0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_PMIC_FREF_AO_CSR_PMIC_AO_SEL_LOW
//-------------------------------------------------------------------------
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_AO_SEL_LOW_1BY1                   0x0
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_AO_SEL_LOW_1BY2                   0x1
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_AO_SEL_LOW_1BY4                   0x2
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_AO_SEL_LOW_1BY8                   0x3
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_AO_SEL_LOW_1BY16                  0x4
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_AO_SEL_LOW_1BY32                  0x5
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_AO_SEL_LOW_1BY64                  0x6
#define BFV_RTC_PMIC_FREF_AO_CSR_PMIC_AO_SEL_LOW_1BY128                 0x7

#define REG_RTC_PMIC_FREF_AO_CSR           (*(volatile reg_rtc_pmic_fref_ao_csr_t*)((RTC_BASE_ADDRESS + 0x84)))
#define REG_RTC_PMIC_FREF_AO_CSR_ADDR      (RTC_BASE_ADDRESS + 0x84)
#define BP_RTC_PMIC_FREF_AO_CSR_RSVD0                                    28
#define BM_RTC_PMIC_FREF_AO_CSR_RSVD0                            0xF0000000
#define BP_RTC_PMIC_FREF_AO_CSR_PMIC_DSP_CLK_SRC                         27
#define BM_RTC_PMIC_FREF_AO_CSR_PMIC_DSP_CLK_SRC                 0x08000000
#define BP_RTC_PMIC_FREF_AO_CSR_BUCK_DSP_SEL_LOW                         24
#define BM_RTC_PMIC_FREF_AO_CSR_BUCK_DSP_SEL_LOW                 0x07000000
#define BP_RTC_PMIC_FREF_AO_CSR_RSVD1                                    20
#define BM_RTC_PMIC_FREF_AO_CSR_RSVD1                            0x00F00000
#define BP_RTC_PMIC_FREF_AO_CSR_PMIC_M3_CLK_SRC                          19
#define BM_RTC_PMIC_FREF_AO_CSR_PMIC_M3_CLK_SRC                  0x00080000
#define BP_RTC_PMIC_FREF_AO_CSR_PMIC_M3_SEL_LOW                          16
#define BM_RTC_PMIC_FREF_AO_CSR_PMIC_M3_SEL_LOW                  0x00070000
#define BP_RTC_PMIC_FREF_AO_CSR_RSVD2                                    12
#define BM_RTC_PMIC_FREF_AO_CSR_RSVD2                            0x0000F000
#define BP_RTC_PMIC_FREF_AO_CSR_PMIC_MEM_CLK_SRC                         11
#define BM_RTC_PMIC_FREF_AO_CSR_PMIC_MEM_CLK_SRC                 0x00000800
#define BP_RTC_PMIC_FREF_AO_CSR_PMIC_MEM_SEL_LOW                          8
#define BM_RTC_PMIC_FREF_AO_CSR_PMIC_MEM_SEL_LOW                 0x00000700
#define BP_RTC_PMIC_FREF_AO_CSR_RSVD3                                     4
#define BM_RTC_PMIC_FREF_AO_CSR_RSVD3                            0x000000F0
#define BP_RTC_PMIC_FREF_AO_CSR_PMIC_AO_CLK_SRC                           3
#define BM_RTC_PMIC_FREF_AO_CSR_PMIC_AO_CLK_SRC                  0x00000008
#define BP_RTC_PMIC_FREF_AO_CSR_PMIC_AO_SEL_LOW                           0
#define BM_RTC_PMIC_FREF_AO_CSR_PMIC_AO_SEL_LOW                  0x00000007

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_buck_dsp_csr_u
{
  uint32_t V;
  struct reg_rtc_buck_dsp_csr_s
  {
    uint32_t PU_BYPASS           :8;
    uint32_t SEL_PD              :8;
    uint32_t VREG_TRIM           :3;
    uint32_t OP_MODE             :3;
    uint32_t SEL_REF_EXT         :1;
    uint32_t FMODE_RST_L_N       :1;
    uint32_t SEL_VREG            :1;
    uint32_t SEL_OSC_DIV         :3;
    uint32_t SEL_OSC             :1;
    uint32_t WRITE               :1;
    uint32_t STABLE              :1;
    uint32_t READY               :1;
  }BF;
} reg_rtc_buck_dsp_csr_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for RTC_BUCK_DSP_CSR_SEL_OSC
//-------------------------------------------------------------------------
#define BFV_RTC_BUCK_DSP_CSR_SEL_OSC_HFO                                0x0
#define BFV_RTC_BUCK_DSP_CSR_SEL_OSC_XTAL                               0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_BUCK_DSP_CSR_SEL_OSC_DIV
//-------------------------------------------------------------------------
#define BFV_RTC_BUCK_DSP_CSR_SEL_OSC_DIV_1BY1                           0x0
#define BFV_RTC_BUCK_DSP_CSR_SEL_OSC_DIV_1BY2                           0x1
#define BFV_RTC_BUCK_DSP_CSR_SEL_OSC_DIV_1BY4                           0x2
#define BFV_RTC_BUCK_DSP_CSR_SEL_OSC_DIV_1BY8                           0x3
#define BFV_RTC_BUCK_DSP_CSR_SEL_OSC_DIV_1BY16                          0x4
#define BFV_RTC_BUCK_DSP_CSR_SEL_OSC_DIV_1BY32                          0x5
#define BFV_RTC_BUCK_DSP_CSR_SEL_OSC_DIV_1BY64                          0x6
#define BFV_RTC_BUCK_DSP_CSR_SEL_OSC_DIV_1BY128                         0x7

//-------------------------------------------------------------------------
// field value definitions for RTC_BUCK_DSP_CSR_SEL_VREG
//-------------------------------------------------------------------------
#define BFV_RTC_BUCK_DSP_CSR_SEL_VREG_REG_OUTPUT                        0x0
#define BFV_RTC_BUCK_DSP_CSR_SEL_VREG_POST_SWITCH                       0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_BUCK_DSP_CSR_FMODE_RST_L_N
//-------------------------------------------------------------------------
#define BFV_RTC_BUCK_DSP_CSR_FMODE_RST_L_N_RESET                        0x1
#define BFV_RTC_BUCK_DSP_CSR_FMODE_RST_L_N_NORMAL                       0x0

//-------------------------------------------------------------------------
// field value definitions for RTC_BUCK_DSP_CSR_SEL_REF_EXT
//-------------------------------------------------------------------------
#define BFV_RTC_BUCK_DSP_CSR_SEL_REF_EXT_INITIAL                        0x0
#define BFV_RTC_BUCK_DSP_CSR_SEL_REF_EXT_NORMAL                         0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_BUCK_DSP_CSR_OP_MODE
//-------------------------------------------------------------------------
#define BFV_RTC_BUCK_DSP_CSR_OP_MODE_VOLTAGE_600MV                      0x0
#define BFV_RTC_BUCK_DSP_CSR_OP_MODE_VOLTAGE_700MV                      0x1
#define BFV_RTC_BUCK_DSP_CSR_OP_MODE_VOLTAGE_900MV                      0x2
#define BFV_RTC_BUCK_DSP_CSR_OP_MODE_VOLTAGE_1200MV                     0x3
#define BFV_RTC_BUCK_DSP_CSR_OP_MODE_FREQUENCY_MODE                     0x4
#define BFV_RTC_BUCK_DSP_CSR_OP_MODE_FREQ_VMIN                          0x5
#define BFV_RTC_BUCK_DSP_CSR_OP_MODE_FREQ_VMAX                          0x6
#define BFV_RTC_BUCK_DSP_CSR_OP_MODE_FREQUENCY_NO_VLIM                  0x7

#define REG_RTC_BUCK_DSP_CSR           (*(volatile reg_rtc_buck_dsp_csr_t*)((RTC_BASE_ADDRESS + 0x88)))
#define REG_RTC_BUCK_DSP_CSR_ADDR      (RTC_BASE_ADDRESS + 0x88)
#define BP_RTC_BUCK_DSP_CSR_READY                                        31
#define BM_RTC_BUCK_DSP_CSR_READY                                0x80000000
#define BP_RTC_BUCK_DSP_CSR_STABLE                                       30
#define BM_RTC_BUCK_DSP_CSR_STABLE                               0x40000000
#define BP_RTC_BUCK_DSP_CSR_WRITE                                        29
#define BM_RTC_BUCK_DSP_CSR_WRITE                                0x20000000
#define BP_RTC_BUCK_DSP_CSR_SEL_OSC                                      28
#define BM_RTC_BUCK_DSP_CSR_SEL_OSC                              0x10000000
#define BP_RTC_BUCK_DSP_CSR_SEL_OSC_DIV                                  25
#define BM_RTC_BUCK_DSP_CSR_SEL_OSC_DIV                          0x0E000000
#define BP_RTC_BUCK_DSP_CSR_SEL_VREG                                     24
#define BM_RTC_BUCK_DSP_CSR_SEL_VREG                             0x01000000
#define BP_RTC_BUCK_DSP_CSR_FMODE_RST_L_N                                23
#define BM_RTC_BUCK_DSP_CSR_FMODE_RST_L_N                        0x00800000
#define BP_RTC_BUCK_DSP_CSR_SEL_REF_EXT                                  22
#define BM_RTC_BUCK_DSP_CSR_SEL_REF_EXT                          0x00400000
#define BP_RTC_BUCK_DSP_CSR_OP_MODE                                      19
#define BM_RTC_BUCK_DSP_CSR_OP_MODE                              0x00380000
#define BP_RTC_BUCK_DSP_CSR_VREG_TRIM                                    16
#define BM_RTC_BUCK_DSP_CSR_VREG_TRIM                            0x00070000
#define BP_RTC_BUCK_DSP_CSR_SEL_PD                                        8
#define BM_RTC_BUCK_DSP_CSR_SEL_PD                               0x0000FF00
#define BP_RTC_BUCK_DSP_CSR_PU_BYPASS                                     0
#define BM_RTC_BUCK_DSP_CSR_PU_BYPASS                            0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_buck_dsp_csr2_u
{
  uint32_t V;
  struct reg_rtc_buck_dsp_csr2_s
  {
    uint32_t FREQ_TARGET         :8;
    uint32_t RSVD0               :24;
  }BF;
} reg_rtc_buck_dsp_csr2_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_BUCK_DSP_CSR2           (*(volatile reg_rtc_buck_dsp_csr2_t*)((RTC_BASE_ADDRESS + 0x8C)))
#define REG_RTC_BUCK_DSP_CSR2_ADDR      (RTC_BASE_ADDRESS + 0x8C)
#define BP_RTC_BUCK_DSP_CSR2_RSVD0                                        8
#define BM_RTC_BUCK_DSP_CSR2_RSVD0                               0xFFFFFF00
#define BP_RTC_BUCK_DSP_CSR2_FREQ_TARGET                                  0
#define BM_RTC_BUCK_DSP_CSR2_FREQ_TARGET                         0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_pull_enable_u
{
  uint32_t V;
  struct reg_rtc_pull_enable_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_rtc_pull_enable_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_PULL_ENABLE           (*(volatile reg_rtc_pull_enable_t*)((RTC_BASE_ADDRESS + 0x90)))
#define REG_RTC_PULL_ENABLE_ADDR      (RTC_BASE_ADDRESS + 0x90)
#define BP_RTC_PULL_ENABLE_VALUE                                          0
#define BM_RTC_PULL_ENABLE_VALUE                                 0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_pull_direction_u
{
  uint32_t V;
  struct reg_rtc_pull_direction_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_rtc_pull_direction_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_PULL_DIRECTION           (*(volatile reg_rtc_pull_direction_t*)((RTC_BASE_ADDRESS + 0x94)))
#define REG_RTC_PULL_DIRECTION_ADDR      (RTC_BASE_ADDRESS + 0x94)
#define BP_RTC_PULL_DIRECTION_VALUE                                       0
#define BM_RTC_PULL_DIRECTION_VALUE                              0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_spi0_ctrl_u
{
  uint32_t V;
  struct reg_rtc_spi0_ctrl_s
  {
    uint32_t SPI0_SCLK_PU        :1;
    uint32_t SPI0_SCLK_RE        :1;
    uint32_t SPI0_MOSI_PU        :1;
    uint32_t SPI0_MOSI_RE        :1;
    uint32_t SPI0_MISO_PU        :1;
    uint32_t SPI0_MISO_RE        :1;
    uint32_t RSVD0               :2;
    uint32_t SPI0_DYNAMIC_MISO_PULL_DISABLE:1;
    uint32_t SPI1_DYNAMIC_MISO_PULL_DISABLE:1;
    uint32_t SPI2_DYNAMIC_MISO_PULL_DISABLE:1;
    uint32_t SPI2_DYNAMIC_MISO_PULL_DISABLE_ALT:1;
    uint32_t RSVD1               :20;
  }BF;
} reg_rtc_spi0_ctrl_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_SPI0_CTRL           (*(volatile reg_rtc_spi0_ctrl_t*)((RTC_BASE_ADDRESS + 0x98)))
#define REG_RTC_SPI0_CTRL_ADDR      (RTC_BASE_ADDRESS + 0x98)
#define BP_RTC_SPI0_CTRL_RSVD0                                           12
#define BM_RTC_SPI0_CTRL_RSVD0                                   0xFFFFF000
#define BP_RTC_SPI0_CTRL_SPI2_DYNAMIC_MISO_PULL_DISABLE_ALT              11
#define BM_RTC_SPI0_CTRL_SPI2_DYNAMIC_MISO_PULL_DISABLE_ALT      0x00000800
#define BP_RTC_SPI0_CTRL_SPI2_DYNAMIC_MISO_PULL_DISABLE                  10
#define BM_RTC_SPI0_CTRL_SPI2_DYNAMIC_MISO_PULL_DISABLE          0x00000400
#define BP_RTC_SPI0_CTRL_SPI1_DYNAMIC_MISO_PULL_DISABLE                   9
#define BM_RTC_SPI0_CTRL_SPI1_DYNAMIC_MISO_PULL_DISABLE          0x00000200
#define BP_RTC_SPI0_CTRL_SPI0_DYNAMIC_MISO_PULL_DISABLE                   8
#define BM_RTC_SPI0_CTRL_SPI0_DYNAMIC_MISO_PULL_DISABLE          0x00000100
#define BP_RTC_SPI0_CTRL_RSVD1                                            6
#define BM_RTC_SPI0_CTRL_RSVD1                                   0x000000C0
#define BP_RTC_SPI0_CTRL_SPI0_MISO_RE                                     5
#define BM_RTC_SPI0_CTRL_SPI0_MISO_RE                            0x00000020
#define BP_RTC_SPI0_CTRL_SPI0_MISO_PU                                     4
#define BM_RTC_SPI0_CTRL_SPI0_MISO_PU                            0x00000010
#define BP_RTC_SPI0_CTRL_SPI0_MOSI_RE                                     3
#define BM_RTC_SPI0_CTRL_SPI0_MOSI_RE                            0x00000008
#define BP_RTC_SPI0_CTRL_SPI0_MOSI_PU                                     2
#define BM_RTC_SPI0_CTRL_SPI0_MOSI_PU                            0x00000004
#define BP_RTC_SPI0_CTRL_SPI0_SCLK_RE                                     1
#define BM_RTC_SPI0_CTRL_SPI0_SCLK_RE                            0x00000002
#define BP_RTC_SPI0_CTRL_SPI0_SCLK_PU                                     0
#define BM_RTC_SPI0_CTRL_SPI0_SCLK_PU                            0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_uart0_ctrl_u
{
  uint32_t V;
  struct reg_rtc_uart0_ctrl_s
  {
    uint32_t UART0_RX_PU         :1;
    uint32_t UART0_RX_RE         :1;
    uint32_t UART0_CTS_PU        :1;
    uint32_t UART0_CTS_RE        :1;
    uint32_t RSVD0               :28;
  }BF;
} reg_rtc_uart0_ctrl_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_UART0_CTRL           (*(volatile reg_rtc_uart0_ctrl_t*)((RTC_BASE_ADDRESS + 0x9C)))
#define REG_RTC_UART0_CTRL_ADDR      (RTC_BASE_ADDRESS + 0x9C)
#define BP_RTC_UART0_CTRL_RSVD0                                           4
#define BM_RTC_UART0_CTRL_RSVD0                                  0xFFFFFFF0
#define BP_RTC_UART0_CTRL_UART0_CTS_RE                                    3
#define BM_RTC_UART0_CTRL_UART0_CTS_RE                           0x00000008
#define BP_RTC_UART0_CTRL_UART0_CTS_PU                                    2
#define BM_RTC_UART0_CTRL_UART0_CTS_PU                           0x00000004
#define BP_RTC_UART0_CTRL_UART0_RX_RE                                     1
#define BM_RTC_UART0_CTRL_UART0_RX_RE                            0x00000002
#define BP_RTC_UART0_CTRL_UART0_RX_PU                                     0
#define BM_RTC_UART0_CTRL_UART0_RX_PU                            0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_ao_csr2_u
{
  uint32_t V;
  struct reg_rtc_ao_csr2_s
  {
    uint32_t WAKE_PU             :1;
    uint32_t WAKE_RE             :1;
    uint32_t WAKE_POLARITY       :1;
    uint32_t PM_PD_DISABLE       :1;
    uint32_t OVRD_CLK_GATE_HFO2PMIC:1;
    uint32_t RSVD0               :3;
    uint32_t TMR_CLK_DIS         :1;
    uint32_t WDT_CLK_DIS         :1;
    uint32_t RSVD1               :21;
    uint32_t TWO_INDUCTOR_MODE   :1;
  }BF;
} reg_rtc_ao_csr2_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for RTC_AO_CSR2_TWO_INDUCTOR_MODE
//-------------------------------------------------------------------------
#define BFV_RTC_AO_CSR2_TWO_INDUCTOR_MODE_FOUR_INDUCTOR                 0x0
#define BFV_RTC_AO_CSR2_TWO_INDUCTOR_MODE_TWO_INDUCTOR                  0x1

#define REG_RTC_AO_CSR2           (*(volatile reg_rtc_ao_csr2_t*)((RTC_BASE_ADDRESS + 0xA0)))
#define REG_RTC_AO_CSR2_ADDR      (RTC_BASE_ADDRESS + 0xA0)
#define BP_RTC_AO_CSR2_TWO_INDUCTOR_MODE                                 31
#define BM_RTC_AO_CSR2_TWO_INDUCTOR_MODE                         0x80000000
#define BP_RTC_AO_CSR2_RSVD0                                             10
#define BM_RTC_AO_CSR2_RSVD0                                     0x7FFFFC00
#define BP_RTC_AO_CSR2_WDT_CLK_DIS                                        9
#define BM_RTC_AO_CSR2_WDT_CLK_DIS                               0x00000200
#define BP_RTC_AO_CSR2_TMR_CLK_DIS                                        8
#define BM_RTC_AO_CSR2_TMR_CLK_DIS                               0x00000100
#define BP_RTC_AO_CSR2_RSVD1                                              5
#define BM_RTC_AO_CSR2_RSVD1                                     0x000000E0
#define BP_RTC_AO_CSR2_OVRD_CLK_GATE_HFO2PMIC                             4
#define BM_RTC_AO_CSR2_OVRD_CLK_GATE_HFO2PMIC                    0x00000010
#define BP_RTC_AO_CSR2_PM_PD_DISABLE                                      3
#define BM_RTC_AO_CSR2_PM_PD_DISABLE                             0x00000008
#define BP_RTC_AO_CSR2_WAKE_POLARITY                                      2
#define BM_RTC_AO_CSR2_WAKE_POLARITY                             0x00000004
#define BP_RTC_AO_CSR2_WAKE_RE                                            1
#define BM_RTC_AO_CSR2_WAKE_RE                                   0x00000002
#define BP_RTC_AO_CSR2_WAKE_PU                                            0
#define BM_RTC_AO_CSR2_WAKE_PU                                   0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_brownout_u
{
  uint32_t V;
  struct reg_rtc_brownout_s
  {
    uint32_t IRQ_DOWN            :1;
    uint32_t IRQ_ENABLE_DOWN     :1;
    uint32_t IRQ_UP              :1;
    uint32_t IRQ_ENABLE_UP       :1;
    uint32_t TEST                :1;
    uint32_t FLIP                :1;
    uint32_t BOD_STATE           :1;
    uint32_t RSVD0               :25;
  }BF;
} reg_rtc_brownout_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for RTC_BROWNOUT_IRQ_UP
//-------------------------------------------------------------------------
#define BFV_RTC_BROWNOUT_IRQ_UP_ABSENT                                  0x0
#define BFV_RTC_BROWNOUT_IRQ_UP_PRESENT                                 0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_BROWNOUT_IRQ_DOWN
//-------------------------------------------------------------------------
#define BFV_RTC_BROWNOUT_IRQ_DOWN_ABSENT                                0x0
#define BFV_RTC_BROWNOUT_IRQ_DOWN_PRESENT                               0x1

#define REG_RTC_BROWNOUT           (*(volatile reg_rtc_brownout_t*)((RTC_BASE_ADDRESS + 0xA4)))
#define REG_RTC_BROWNOUT_ADDR      (RTC_BASE_ADDRESS + 0xA4)
#define BP_RTC_BROWNOUT_RSVD0                                             7
#define BM_RTC_BROWNOUT_RSVD0                                    0xFFFFFF80
#define BP_RTC_BROWNOUT_BOD_STATE                                         6
#define BM_RTC_BROWNOUT_BOD_STATE                                0x00000040
#define BP_RTC_BROWNOUT_FLIP                                              5
#define BM_RTC_BROWNOUT_FLIP                                     0x00000020
#define BP_RTC_BROWNOUT_TEST                                              4
#define BM_RTC_BROWNOUT_TEST                                     0x00000010
#define BP_RTC_BROWNOUT_IRQ_ENABLE_UP                                     3
#define BM_RTC_BROWNOUT_IRQ_ENABLE_UP                            0x00000008
#define BP_RTC_BROWNOUT_IRQ_UP                                            2
#define BM_RTC_BROWNOUT_IRQ_UP                                   0x00000004
#define BP_RTC_BROWNOUT_IRQ_ENABLE_DOWN                                   1
#define BM_RTC_BROWNOUT_IRQ_ENABLE_DOWN                          0x00000002
#define BP_RTC_BROWNOUT_IRQ_DOWN                                          0
#define BM_RTC_BROWNOUT_IRQ_DOWN                                 0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_osc_csr2_u
{
  uint32_t V;
  struct reg_rtc_osc_csr2_s
  {
    uint32_t VHFO_PD_N           :1;
    uint32_t VHFO_TRIM_GM        :3;
    uint32_t VHFO_TRIM_CL        :5;
    uint32_t RSVD0               :23;
  }BF;
} reg_rtc_osc_csr2_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for RTC_OSC_CSR2_VHFO_PD_N
//-------------------------------------------------------------------------
#define BFV_RTC_OSC_CSR2_VHFO_PD_N_OFF                                  0x0
#define BFV_RTC_OSC_CSR2_VHFO_PD_N_ON                                   0x1

#define REG_RTC_OSC_CSR2           (*(volatile reg_rtc_osc_csr2_t*)((RTC_BASE_ADDRESS + 0xB0)))
#define REG_RTC_OSC_CSR2_ADDR      (RTC_BASE_ADDRESS + 0xB0)
#define BP_RTC_OSC_CSR2_RSVD0                                             9
#define BM_RTC_OSC_CSR2_RSVD0                                    0xFFFFFE00
#define BP_RTC_OSC_CSR2_VHFO_TRIM_CL                                      4
#define BM_RTC_OSC_CSR2_VHFO_TRIM_CL                             0x000001F0
#define BP_RTC_OSC_CSR2_VHFO_TRIM_GM                                      1
#define BM_RTC_OSC_CSR2_VHFO_TRIM_GM                             0x0000000E
#define BP_RTC_OSC_CSR2_VHFO_PD_N                                         0
#define BM_RTC_OSC_CSR2_VHFO_PD_N                                0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_clkout_cfg_u
{
  uint32_t V;
  struct reg_rtc_clkout_cfg_s
  {
    uint32_t EN                  :1;
    uint32_t RSVD0               :31;
  }BF;
} reg_rtc_clkout_cfg_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for RTC_CLKOUT_CFG_EN
//-------------------------------------------------------------------------
#define BFV_RTC_CLKOUT_CFG_EN_DISABLED                                  0x0
#define BFV_RTC_CLKOUT_CFG_EN_ENABLED                                   0x1

#define REG_RTC_CLKOUT_CFG           (*(volatile reg_rtc_clkout_cfg_t*)((RTC_BASE_ADDRESS + 0xC0)))
#define REG_RTC_CLKOUT_CFG_ADDR      (RTC_BASE_ADDRESS + 0xC0)
#define BP_RTC_CLKOUT_CFG_RSVD0                                           1
#define BM_RTC_CLKOUT_CFG_RSVD0                                  0xFFFFFFFE
#define BP_RTC_CLKOUT_CFG_EN                                              0
#define BM_RTC_CLKOUT_CFG_EN                                     0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_clkout_ctrl_u
{
  uint32_t V;
  struct reg_rtc_clkout_ctrl_s
  {
    uint32_t SEL                 :9;
    uint32_t RSVD0               :23;
  }BF;
} reg_rtc_clkout_ctrl_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for RTC_CLKOUT_CTRL_SEL
//-------------------------------------------------------------------------
#define BFV_RTC_CLKOUT_CTRL_SEL_NONE                                    0x0
#define BFV_RTC_CLKOUT_CTRL_SEL_32KHZ                                   0x1
#define BFV_RTC_CLKOUT_CTRL_SEL_16KHZ                                   0x2
#define BFV_RTC_CLKOUT_CTRL_SEL_8KHZ                                    0x4
#define BFV_RTC_CLKOUT_CTRL_SEL_4KHZ                                    0x8
#define BFV_RTC_CLKOUT_CTRL_SEL_2MHZ                                   0x10
#define BFV_RTC_CLKOUT_CTRL_SEL_1MHZ                                   0x20
#define BFV_RTC_CLKOUT_CTRL_SEL_512KHZ                                 0x40
#define BFV_RTC_CLKOUT_CTRL_SEL_256KHZ                                 0x80
#define BFV_RTC_CLKOUT_CTRL_SEL_ADC_TOGGLE                            0x100

#define REG_RTC_CLKOUT_CTRL           (*(volatile reg_rtc_clkout_ctrl_t*)((RTC_BASE_ADDRESS + 0xC4)))
#define REG_RTC_CLKOUT_CTRL_ADDR      (RTC_BASE_ADDRESS + 0xC4)
#define BP_RTC_CLKOUT_CTRL_RSVD0                                          9
#define BM_RTC_CLKOUT_CTRL_RSVD0                                 0xFFFFFE00
#define BP_RTC_CLKOUT_CTRL_SEL                                            0
#define BM_RTC_CLKOUT_CTRL_SEL                                   0x000001FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_drift_ppq_u
{
  uint32_t V;
  struct reg_rtc_drift_ppq_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_rtc_drift_ppq_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_DRIFT_PPQ           (*(volatile reg_rtc_drift_ppq_t*)((RTC_BASE_ADDRESS + 0xD0)))
#define REG_RTC_DRIFT_PPQ_ADDR      (RTC_BASE_ADDRESS + 0xD0)
#define BP_RTC_DRIFT_PPQ_VALUE                                            0
#define BM_RTC_DRIFT_PPQ_VALUE                                   0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_drift_integ_u
{
  uint32_t V;
  struct reg_rtc_drift_integ_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_rtc_drift_integ_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_DRIFT_INTEG           (*(volatile reg_rtc_drift_integ_t*)((RTC_BASE_ADDRESS + 0xD4)))
#define REG_RTC_DRIFT_INTEG_ADDR      (RTC_BASE_ADDRESS + 0xD4)
#define BP_RTC_DRIFT_INTEG_VALUE                                          0
#define BM_RTC_DRIFT_INTEG_VALUE                                 0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_drift_stat_u
{
  uint32_t V;
  struct reg_rtc_drift_stat_s
  {
    uint32_t ADD_TOG             :1;
    uint32_t RSVD0               :3;
    uint32_t SKIP_TOG            :1;
    uint32_t RSVD1               :3;
    uint32_t ENABLE              :1;
    uint32_t RSVD2               :23;
  }BF;
} reg_rtc_drift_stat_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_DRIFT_STAT           (*(volatile reg_rtc_drift_stat_t*)((RTC_BASE_ADDRESS + 0xD8)))
#define REG_RTC_DRIFT_STAT_ADDR      (RTC_BASE_ADDRESS + 0xD8)
#define BP_RTC_DRIFT_STAT_RSVD0                                           9
#define BM_RTC_DRIFT_STAT_RSVD0                                  0xFFFFFE00
#define BP_RTC_DRIFT_STAT_ENABLE                                          8
#define BM_RTC_DRIFT_STAT_ENABLE                                 0x00000100
#define BP_RTC_DRIFT_STAT_RSVD1                                           5
#define BM_RTC_DRIFT_STAT_RSVD1                                  0x000000E0
#define BP_RTC_DRIFT_STAT_SKIP_TOG                                        4
#define BM_RTC_DRIFT_STAT_SKIP_TOG                               0x00000010
#define BP_RTC_DRIFT_STAT_RSVD2                                           1
#define BM_RTC_DRIFT_STAT_RSVD2                                  0x0000000E
#define BP_RTC_DRIFT_STAT_ADD_TOG                                         0
#define BM_RTC_DRIFT_STAT_ADD_TOG                                0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_nvrama_u
{
  uint32_t V;
  struct reg_rtc_nvrama_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_rtc_nvrama_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_NVRAMA           (*(volatile reg_rtc_nvrama_t*)((RTC_BASE_ADDRESS + 0xE0)))
#define REG_RTC_NVRAMA_ADDR      (RTC_BASE_ADDRESS + 0xE0)
#define BP_RTC_NVRAMA_VALUE                                               0
#define BM_RTC_NVRAMA_VALUE                                      0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_nvramb_u
{
  uint32_t V;
  struct reg_rtc_nvramb_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_rtc_nvramb_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_NVRAMB           (*(volatile reg_rtc_nvramb_t*)((RTC_BASE_ADDRESS + 0xE4)))
#define REG_RTC_NVRAMB_ADDR      (RTC_BASE_ADDRESS + 0xE4)
#define BP_RTC_NVRAMB_VALUE                                               0
#define BM_RTC_NVRAMB_VALUE                                      0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_nvramc_u
{
  uint32_t V;
  struct reg_rtc_nvramc_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_rtc_nvramc_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_NVRAMC           (*(volatile reg_rtc_nvramc_t*)((RTC_BASE_ADDRESS + 0xE8)))
#define REG_RTC_NVRAMC_ADDR      (RTC_BASE_ADDRESS + 0xE8)
#define BP_RTC_NVRAMC_VALUE                                               0
#define BM_RTC_NVRAMC_VALUE                                      0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_nvramd_u
{
  uint32_t V;
  struct reg_rtc_nvramd_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_rtc_nvramd_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_NVRAMD           (*(volatile reg_rtc_nvramd_t*)((RTC_BASE_ADDRESS + 0xEC)))
#define REG_RTC_NVRAMD_ADDR      (RTC_BASE_ADDRESS + 0xEC)
#define BP_RTC_NVRAMD_VALUE                                               0
#define BM_RTC_NVRAMD_VALUE                                      0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_debug_u
{
  uint32_t V;
  struct reg_rtc_debug_s
  {
    uint32_t SECONDS_SKIP        :1;
    uint32_t MINUTES_SKIP        :1;
    uint32_t HOURS_SKIP          :1;
    uint32_t DAYS_SKIP           :1;
    uint32_t MONTHS_SKIP         :1;
    uint32_t RSVD0               :3;
    uint32_t FAST_CLOCK          :1;
    uint32_t RSVD1               :7;
    uint32_t FORCE_MEM_CLKS      :1;
    uint32_t PMIC_M3_BYPASS_PU   :1;
    uint32_t BUCK_DSP_BYPASS_PU  :1;
    uint32_t RSVD2               :11;
    uint32_t WEIRD               :1;
    uint32_t FPANEL_FRAME        :1;
  }BF;
} reg_rtc_debug_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for RTC_DEBUG_BUCK_DSP_BYPASS_PU
//-------------------------------------------------------------------------
#define BFV_RTC_DEBUG_BUCK_DSP_BYPASS_PU_NORMAL                         0x0
#define BFV_RTC_DEBUG_BUCK_DSP_BYPASS_PU_OVERRIDE                       0x1

//-------------------------------------------------------------------------
// field value definitions for RTC_DEBUG_PMIC_M3_BYPASS_PU
//-------------------------------------------------------------------------
#define BFV_RTC_DEBUG_PMIC_M3_BYPASS_PU_NORMAL                          0x0
#define BFV_RTC_DEBUG_PMIC_M3_BYPASS_PU_OVERRIDE                        0x1

#define REG_RTC_DEBUG           (*(volatile reg_rtc_debug_t*)((RTC_BASE_ADDRESS + 0xF0)))
#define REG_RTC_DEBUG_ADDR      (RTC_BASE_ADDRESS + 0xF0)
#define BP_RTC_DEBUG_FPANEL_FRAME                                        31
#define BM_RTC_DEBUG_FPANEL_FRAME                                0x80000000
#define BP_RTC_DEBUG_WEIRD                                               30
#define BM_RTC_DEBUG_WEIRD                                       0x40000000
#define BP_RTC_DEBUG_RSVD0                                               19
#define BM_RTC_DEBUG_RSVD0                                       0x3FF80000
#define BP_RTC_DEBUG_BUCK_DSP_BYPASS_PU                                  18
#define BM_RTC_DEBUG_BUCK_DSP_BYPASS_PU                          0x00040000
#define BP_RTC_DEBUG_PMIC_M3_BYPASS_PU                                   17
#define BM_RTC_DEBUG_PMIC_M3_BYPASS_PU                           0x00020000
#define BP_RTC_DEBUG_FORCE_MEM_CLKS                                      16
#define BM_RTC_DEBUG_FORCE_MEM_CLKS                              0x00010000
#define BP_RTC_DEBUG_RSVD1                                                9
#define BM_RTC_DEBUG_RSVD1                                       0x0000FE00
#define BP_RTC_DEBUG_FAST_CLOCK                                           8
#define BM_RTC_DEBUG_FAST_CLOCK                                  0x00000100
#define BP_RTC_DEBUG_RSVD2                                                5
#define BM_RTC_DEBUG_RSVD2                                       0x000000E0
#define BP_RTC_DEBUG_MONTHS_SKIP                                          4
#define BM_RTC_DEBUG_MONTHS_SKIP                                 0x00000010
#define BP_RTC_DEBUG_DAYS_SKIP                                            3
#define BM_RTC_DEBUG_DAYS_SKIP                                   0x00000008
#define BP_RTC_DEBUG_HOURS_SKIP                                           2
#define BM_RTC_DEBUG_HOURS_SKIP                                  0x00000004
#define BP_RTC_DEBUG_MINUTES_SKIP                                         1
#define BM_RTC_DEBUG_MINUTES_SKIP                                0x00000002
#define BP_RTC_DEBUG_SECONDS_SKIP                                         0
#define BM_RTC_DEBUG_SECONDS_SKIP                                0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_debug_read_write_u
{
  uint32_t V;
  struct reg_rtc_debug_read_write_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_rtc_debug_read_write_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_DEBUG_READ_WRITE           (*(volatile reg_rtc_debug_read_write_t*)((RTC_BASE_ADDRESS + 0xF4)))
#define REG_RTC_DEBUG_READ_WRITE_ADDR      (RTC_BASE_ADDRESS + 0xF4)
#define BP_RTC_DEBUG_READ_WRITE_VALUE                                     0
#define BM_RTC_DEBUG_READ_WRITE_VALUE                            0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_debug0_read_only_u
{
  uint32_t V;
  struct reg_rtc_debug0_read_only_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_rtc_debug0_read_only_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_DEBUG0_READ_ONLY           (*(volatile reg_rtc_debug0_read_only_t*)((RTC_BASE_ADDRESS + 0xF8)))
#define REG_RTC_DEBUG0_READ_ONLY_ADDR      (RTC_BASE_ADDRESS + 0xF8)
#define BP_RTC_DEBUG0_READ_ONLY_VALUE                                     0
#define BM_RTC_DEBUG0_READ_ONLY_VALUE                            0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_rtc_debug1_read_only_u
{
  uint32_t V;
  struct reg_rtc_debug1_read_only_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_rtc_debug1_read_only_t;

#endif  // __LANGUAGE_ASM__

#define REG_RTC_DEBUG1_READ_ONLY           (*(volatile reg_rtc_debug1_read_only_t*)((RTC_BASE_ADDRESS + 0xFC)))
#define REG_RTC_DEBUG1_READ_ONLY_ADDR      (RTC_BASE_ADDRESS + 0xFC)
#define BP_RTC_DEBUG1_READ_ONLY_VALUE                                     0
#define BM_RTC_DEBUG1_READ_ONLY_VALUE                            0xFFFFFFFF

#define SPI_BASE_ADDRESS 0x50020000
#define SPI_OFFSET(n) (n * 0x100)


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi_config_u
{
  uint32_t V;
  struct reg_spi_config_s
  {
    uint32_t RD_PUSHES_TX_FIFO   :1;
    uint32_t CPOL                :1;
    uint32_t CPHA                :1;
    uint32_t END                 :1;
    uint32_t SLVRDY_IS_MISO      :1;
    uint32_t RX_OVFLW_DROPHEAD   :1;
    uint32_t RSVD0               :1;
    uint32_t EN_SLVRDY           :1;
    uint32_t FIFO_LEVEL_TRIG     :5;
    uint32_t DIS_RX_FIFO         :1;
    uint32_t SPIRDY_ACT_LOW      :1;
    uint32_t RSVD1               :17;
  }BF;
} reg_spi_config_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI_CONFIG(N)       (*(volatile reg_spi_config_t*)((SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x0)))
#define REG_SPI_CONFIG_ADDR(N)  (SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x0)
#define BP_SPI_CONFIG_RSVD0                                              15
#define BM_SPI_CONFIG_RSVD0                                      0xFFFF8000
#define BP_SPI_CONFIG_SPIRDY_ACT_LOW                                     14
#define BM_SPI_CONFIG_SPIRDY_ACT_LOW                             0x00004000
#define BP_SPI_CONFIG_DIS_RX_FIFO                                        13
#define BM_SPI_CONFIG_DIS_RX_FIFO                                0x00002000
#define BP_SPI_CONFIG_FIFO_LEVEL_TRIG                                     8
#define BM_SPI_CONFIG_FIFO_LEVEL_TRIG                            0x00001F00
#define BP_SPI_CONFIG_EN_SLVRDY                                           7
#define BM_SPI_CONFIG_EN_SLVRDY                                  0x00000080
#define BP_SPI_CONFIG_RSVD1                                               6
#define BM_SPI_CONFIG_RSVD1                                      0x00000040
#define BP_SPI_CONFIG_RX_OVFLW_DROPHEAD                                   5
#define BM_SPI_CONFIG_RX_OVFLW_DROPHEAD                          0x00000020
#define BP_SPI_CONFIG_SLVRDY_IS_MISO                                      4
#define BM_SPI_CONFIG_SLVRDY_IS_MISO                             0x00000010
#define BP_SPI_CONFIG_END                                                 3
#define BM_SPI_CONFIG_END                                        0x00000008
#define BP_SPI_CONFIG_CPHA                                                2
#define BM_SPI_CONFIG_CPHA                                       0x00000004
#define BP_SPI_CONFIG_CPOL                                                1
#define BM_SPI_CONFIG_CPOL                                       0x00000002
#define BP_SPI_CONFIG_RD_PUSHES_TX_FIFO                                   0
#define BM_SPI_CONFIG_RD_PUSHES_TX_FIFO                          0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi_txrx_1byte_fifo_data_u
{
  uint32_t V;
  struct reg_spi_txrx_1byte_fifo_data_s
  {
    uint32_t DATA                :8;
    uint32_t RSVD0               :24;
  }BF;
} reg_spi_txrx_1byte_fifo_data_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI_TXRX_1BYTE_FIFO_DATA(N)       (*(volatile reg_spi_txrx_1byte_fifo_data_t*)((SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x4)))
#define REG_SPI_TXRX_1BYTE_FIFO_DATA_ADDR(N)  (SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x4)
#define BP_SPI_TXRX_1BYTE_FIFO_DATA_RSVD0                                 8
#define BM_SPI_TXRX_1BYTE_FIFO_DATA_RSVD0                        0xFFFFFF00
#define BP_SPI_TXRX_1BYTE_FIFO_DATA_DATA                                  0
#define BM_SPI_TXRX_1BYTE_FIFO_DATA_DATA                         0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi_clkdiv_u
{
  uint32_t V;
  struct reg_spi_clkdiv_s
  {
    uint32_t CLKDIV              :4;
    uint32_t IBG                 :4;
    uint32_t ICG                 :4;
    uint32_t RSVD0               :20;
  }BF;
} reg_spi_clkdiv_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI_CLKDIV(N)       (*(volatile reg_spi_clkdiv_t*)((SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x8)))
#define REG_SPI_CLKDIV_ADDR(N)  (SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x8)
#define BP_SPI_CLKDIV_RSVD0                                              12
#define BM_SPI_CLKDIV_RSVD0                                      0xFFFFF000
#define BP_SPI_CLKDIV_ICG                                                 8
#define BM_SPI_CLKDIV_ICG                                        0x00000F00
#define BP_SPI_CLKDIV_IBG                                                 4
#define BM_SPI_CLKDIV_IBG                                        0x000000F0
#define BP_SPI_CLKDIV_CLKDIV                                              0
#define BM_SPI_CLKDIV_CLKDIV                                     0x0000000F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi_status_u
{
  uint32_t V;
  struct reg_spi_status_s
  {
    uint32_t START_BUSY          :1;
    uint32_t HOLD_CS             :1;
    uint32_t CS_SEL              :2;
    uint32_t TXFIFO_HAS_1SPACE   :1;
    uint32_t RXFIFO_HAS_1DATA    :1;
    uint32_t TXFIFO_HAS_LEVEL_SPACE:1;
    uint32_t RX_FIFO_HIT_LEVEL   :1;
    uint32_t XMIT_COMPLETE       :1;
    uint32_t CMD_IS_DONE         :1;
    uint32_t PE_BUSY_STICKY      :1;
    uint32_t NE_BUSY_STICKY      :1;
    uint32_t RSVD0               :1;
    uint32_t RXFIFO_HAS_1DATA_DUP:1;
    uint32_t RSVD1               :1;
    uint32_t RX_FIFO_HIT_LEVEL_DUP:1;
    uint32_t RSVD2               :16;
  }BF;
} reg_spi_status_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI_STATUS(N)       (*(volatile reg_spi_status_t*)((SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0xC)))
#define REG_SPI_STATUS_ADDR(N)  (SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0xC)
#define BP_SPI_STATUS_RSVD0                                              16
#define BM_SPI_STATUS_RSVD0                                      0xFFFF0000
#define BP_SPI_STATUS_RX_FIFO_HIT_LEVEL_DUP                              15
#define BM_SPI_STATUS_RX_FIFO_HIT_LEVEL_DUP                      0x00008000
#define BP_SPI_STATUS_RSVD1                                              14
#define BM_SPI_STATUS_RSVD1                                      0x00004000
#define BP_SPI_STATUS_RXFIFO_HAS_1DATA_DUP                               13
#define BM_SPI_STATUS_RXFIFO_HAS_1DATA_DUP                       0x00002000
#define BP_SPI_STATUS_RSVD2                                              12
#define BM_SPI_STATUS_RSVD2                                      0x00001000
#define BP_SPI_STATUS_NE_BUSY_STICKY                                     11
#define BM_SPI_STATUS_NE_BUSY_STICKY                             0x00000800
#define BP_SPI_STATUS_PE_BUSY_STICKY                                     10
#define BM_SPI_STATUS_PE_BUSY_STICKY                             0x00000400
#define BP_SPI_STATUS_CMD_IS_DONE                                         9
#define BM_SPI_STATUS_CMD_IS_DONE                                0x00000200
#define BP_SPI_STATUS_XMIT_COMPLETE                                       8
#define BM_SPI_STATUS_XMIT_COMPLETE                              0x00000100
#define BP_SPI_STATUS_RX_FIFO_HIT_LEVEL                                   7
#define BM_SPI_STATUS_RX_FIFO_HIT_LEVEL                          0x00000080
#define BP_SPI_STATUS_TXFIFO_HAS_LEVEL_SPACE                              6
#define BM_SPI_STATUS_TXFIFO_HAS_LEVEL_SPACE                     0x00000040
#define BP_SPI_STATUS_RXFIFO_HAS_1DATA                                    5
#define BM_SPI_STATUS_RXFIFO_HAS_1DATA                           0x00000020
#define BP_SPI_STATUS_TXFIFO_HAS_1SPACE                                   4
#define BM_SPI_STATUS_TXFIFO_HAS_1SPACE                          0x00000010
#define BP_SPI_STATUS_CS_SEL                                              2
#define BM_SPI_STATUS_CS_SEL                                     0x0000000C
#define BP_SPI_STATUS_HOLD_CS                                             1
#define BM_SPI_STATUS_HOLD_CS                                    0x00000002
#define BP_SPI_STATUS_START_BUSY                                          0
#define BM_SPI_STATUS_START_BUSY                                 0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi_tx_fifo_debug_u
{
  uint32_t V;
  struct reg_spi_tx_fifo_debug_s
  {
    uint32_t ENTRIES             :5;
    uint32_t RSVD0               :1;
    uint32_t OFLOW               :1;
    uint32_t UFLOW               :1;
    uint32_t MAX_ENTRIES         :5;
    uint32_t RSVD1               :19;
  }BF;
} reg_spi_tx_fifo_debug_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI_TX_FIFO_DEBUG(N)       (*(volatile reg_spi_tx_fifo_debug_t*)((SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x10)))
#define REG_SPI_TX_FIFO_DEBUG_ADDR(N)  (SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x10)
#define BP_SPI_TX_FIFO_DEBUG_RSVD0                                       13
#define BM_SPI_TX_FIFO_DEBUG_RSVD0                               0xFFFFE000
#define BP_SPI_TX_FIFO_DEBUG_MAX_ENTRIES                                  8
#define BM_SPI_TX_FIFO_DEBUG_MAX_ENTRIES                         0x00001F00
#define BP_SPI_TX_FIFO_DEBUG_UFLOW                                        7
#define BM_SPI_TX_FIFO_DEBUG_UFLOW                               0x00000080
#define BP_SPI_TX_FIFO_DEBUG_OFLOW                                        6
#define BM_SPI_TX_FIFO_DEBUG_OFLOW                               0x00000040
#define BP_SPI_TX_FIFO_DEBUG_RSVD1                                        5
#define BM_SPI_TX_FIFO_DEBUG_RSVD1                               0x00000020
#define BP_SPI_TX_FIFO_DEBUG_ENTRIES                                      0
#define BM_SPI_TX_FIFO_DEBUG_ENTRIES                             0x0000001F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi_rx_fifo_debug_u
{
  uint32_t V;
  struct reg_spi_rx_fifo_debug_s
  {
    uint32_t ENTRIES             :5;
    uint32_t SPI_RDY             :1;
    uint32_t OFLOW               :1;
    uint32_t UFLOW               :1;
    uint32_t MAX_ENTRIES         :5;
    uint32_t RSVD0               :19;
  }BF;
} reg_spi_rx_fifo_debug_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI_RX_FIFO_DEBUG(N)       (*(volatile reg_spi_rx_fifo_debug_t*)((SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x14)))
#define REG_SPI_RX_FIFO_DEBUG_ADDR(N)  (SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x14)
#define BP_SPI_RX_FIFO_DEBUG_RSVD0                                       13
#define BM_SPI_RX_FIFO_DEBUG_RSVD0                               0xFFFFE000
#define BP_SPI_RX_FIFO_DEBUG_MAX_ENTRIES                                  8
#define BM_SPI_RX_FIFO_DEBUG_MAX_ENTRIES                         0x00001F00
#define BP_SPI_RX_FIFO_DEBUG_UFLOW                                        7
#define BM_SPI_RX_FIFO_DEBUG_UFLOW                               0x00000080
#define BP_SPI_RX_FIFO_DEBUG_OFLOW                                        6
#define BM_SPI_RX_FIFO_DEBUG_OFLOW                               0x00000040
#define BP_SPI_RX_FIFO_DEBUG_SPI_RDY                                      5
#define BM_SPI_RX_FIFO_DEBUG_SPI_RDY                             0x00000020
#define BP_SPI_RX_FIFO_DEBUG_ENTRIES                                      0
#define BM_SPI_RX_FIFO_DEBUG_ENTRIES                             0x0000001F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi_rxdrop_cnt_u
{
  uint32_t V;
  struct reg_spi_rxdrop_cnt_s
  {
    uint32_t COUNT               :16;
    uint32_t RSVD0               :16;
  }BF;
} reg_spi_rxdrop_cnt_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI_RXDROP_CNT(N)       (*(volatile reg_spi_rxdrop_cnt_t*)((SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x18)))
#define REG_SPI_RXDROP_CNT_ADDR(N)  (SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x18)
#define BP_SPI_RXDROP_CNT_RSVD0                                          16
#define BM_SPI_RXDROP_CNT_RSVD0                                  0xFFFF0000
#define BP_SPI_RXDROP_CNT_COUNT                                           0
#define BM_SPI_RXDROP_CNT_COUNT                                  0x0000FFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi_general_debug_u
{
  uint32_t V;
  struct reg_spi_general_debug_s
  {
    uint32_t STATE_REG           :4;
    uint32_t SPI_CLK             :1;
    uint32_t SPI_CS_N            :1;
    uint32_t SPI_MOSI            :1;
    uint32_t SPI_MISO            :1;
    uint32_t BB_SPI_CLK          :1;
    uint32_t BB_SPI_CS_N         :1;
    uint32_t BB_SPI_MOSI         :1;
    uint32_t EN_BIT_BANG         :1;
    uint32_t RSVD0               :20;
  }BF;
} reg_spi_general_debug_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI_GENERAL_DEBUG(N)       (*(volatile reg_spi_general_debug_t*)((SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x1C)))
#define REG_SPI_GENERAL_DEBUG_ADDR(N)  (SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x1C)
#define BP_SPI_GENERAL_DEBUG_RSVD0                                       12
#define BM_SPI_GENERAL_DEBUG_RSVD0                               0xFFFFF000
#define BP_SPI_GENERAL_DEBUG_EN_BIT_BANG                                 11
#define BM_SPI_GENERAL_DEBUG_EN_BIT_BANG                         0x00000800
#define BP_SPI_GENERAL_DEBUG_BB_SPI_MOSI                                 10
#define BM_SPI_GENERAL_DEBUG_BB_SPI_MOSI                         0x00000400
#define BP_SPI_GENERAL_DEBUG_BB_SPI_CS_N                                  9
#define BM_SPI_GENERAL_DEBUG_BB_SPI_CS_N                         0x00000200
#define BP_SPI_GENERAL_DEBUG_BB_SPI_CLK                                   8
#define BM_SPI_GENERAL_DEBUG_BB_SPI_CLK                          0x00000100
#define BP_SPI_GENERAL_DEBUG_SPI_MISO                                     7
#define BM_SPI_GENERAL_DEBUG_SPI_MISO                            0x00000080
#define BP_SPI_GENERAL_DEBUG_SPI_MOSI                                     6
#define BM_SPI_GENERAL_DEBUG_SPI_MOSI                            0x00000040
#define BP_SPI_GENERAL_DEBUG_SPI_CS_N                                     5
#define BM_SPI_GENERAL_DEBUG_SPI_CS_N                            0x00000020
#define BP_SPI_GENERAL_DEBUG_SPI_CLK                                      4
#define BM_SPI_GENERAL_DEBUG_SPI_CLK                             0x00000010
#define BP_SPI_GENERAL_DEBUG_STATE_REG                                    0
#define BM_SPI_GENERAL_DEBUG_STATE_REG                           0x0000000F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi_int_en_u
{
  uint32_t V;
  struct reg_spi_int_en_s
  {
    uint32_t RSVD0               :4;
    uint32_t TX_DATA_EN0         :1;
    uint32_t RX_DATA_EN0         :1;
    uint32_t TXFIFO_HAS_LEVEL_SPACE_EN0:1;
    uint32_t RX_FIFO_HIT_LEVEL_EN0:1;
    uint32_t XMIT_COMPLETE_EN0   :1;
    uint32_t CMD_IS_DONE_EN0     :1;
    uint32_t PE_BUSY_STICKY_EN0  :1;
    uint32_t NE_BUSY_STICKY_EN0  :1;
    uint32_t TX_DATA_EN2         :1;
    uint32_t RX_DATA_EN1         :1;
    uint32_t TXFIFO_HAS_LEVEL_SPACE_EN2:1;
    uint32_t RX_FIFO_HIT_LEVEL_EN1:1;
    uint32_t RSVD1               :16;
  }BF;
} reg_spi_int_en_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI_INT_EN(N)       (*(volatile reg_spi_int_en_t*)((SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x20)))
#define REG_SPI_INT_EN_ADDR(N)  (SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x20)
#define BP_SPI_INT_EN_RSVD0                                              16
#define BM_SPI_INT_EN_RSVD0                                      0xFFFF0000
#define BP_SPI_INT_EN_RX_FIFO_HIT_LEVEL_EN1                              15
#define BM_SPI_INT_EN_RX_FIFO_HIT_LEVEL_EN1                      0x00008000
#define BP_SPI_INT_EN_TXFIFO_HAS_LEVEL_SPACE_EN2                         14
#define BM_SPI_INT_EN_TXFIFO_HAS_LEVEL_SPACE_EN2                 0x00004000
#define BP_SPI_INT_EN_RX_DATA_EN1                                        13
#define BM_SPI_INT_EN_RX_DATA_EN1                                0x00002000
#define BP_SPI_INT_EN_TX_DATA_EN2                                        12
#define BM_SPI_INT_EN_TX_DATA_EN2                                0x00001000
#define BP_SPI_INT_EN_NE_BUSY_STICKY_EN0                                 11
#define BM_SPI_INT_EN_NE_BUSY_STICKY_EN0                         0x00000800
#define BP_SPI_INT_EN_PE_BUSY_STICKY_EN0                                 10
#define BM_SPI_INT_EN_PE_BUSY_STICKY_EN0                         0x00000400
#define BP_SPI_INT_EN_CMD_IS_DONE_EN0                                     9
#define BM_SPI_INT_EN_CMD_IS_DONE_EN0                            0x00000200
#define BP_SPI_INT_EN_XMIT_COMPLETE_EN0                                   8
#define BM_SPI_INT_EN_XMIT_COMPLETE_EN0                          0x00000100
#define BP_SPI_INT_EN_RX_FIFO_HIT_LEVEL_EN0                               7
#define BM_SPI_INT_EN_RX_FIFO_HIT_LEVEL_EN0                      0x00000080
#define BP_SPI_INT_EN_TXFIFO_HAS_LEVEL_SPACE_EN0                          6
#define BM_SPI_INT_EN_TXFIFO_HAS_LEVEL_SPACE_EN0                 0x00000040
#define BP_SPI_INT_EN_RX_DATA_EN0                                         5
#define BM_SPI_INT_EN_RX_DATA_EN0                                0x00000020
#define BP_SPI_INT_EN_TX_DATA_EN0                                         4
#define BM_SPI_INT_EN_TX_DATA_EN0                                0x00000010
#define BP_SPI_INT_EN_RSVD1                                               0
#define BM_SPI_INT_EN_RSVD1                                      0x0000000F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi_txrx_2byte_fifo_data_u
{
  uint32_t V;
  struct reg_spi_txrx_2byte_fifo_data_s
  {
    uint32_t DATA                :16;
    uint32_t RSVD0               :16;
  }BF;
} reg_spi_txrx_2byte_fifo_data_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI_TXRX_2BYTE_FIFO_DATA(N)       (*(volatile reg_spi_txrx_2byte_fifo_data_t*)((SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x24)))
#define REG_SPI_TXRX_2BYTE_FIFO_DATA_ADDR(N)  (SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x24)
#define BP_SPI_TXRX_2BYTE_FIFO_DATA_RSVD0                                16
#define BM_SPI_TXRX_2BYTE_FIFO_DATA_RSVD0                        0xFFFF0000
#define BP_SPI_TXRX_2BYTE_FIFO_DATA_DATA                                  0
#define BM_SPI_TXRX_2BYTE_FIFO_DATA_DATA                         0x0000FFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi_config2_u
{
  uint32_t V;
  struct reg_spi_config2_s
  {
    uint32_t RX_SAMPLE_TIME      :2;
    uint32_t RSVD0               :1;
    uint32_t EN_LOOPBACK         :1;
    uint32_t DISABLE_MISO_METAFLOP:1;
    uint32_t STALL_IF_RXFULL     :1;
    uint32_t CLR_STICKY          :1;
    uint32_t SOFT_RST            :1;
    uint32_t CLK_ON              :1;
    uint32_t AGGR_CLK_GATING     :1;
    uint32_t TX_BYTE2_END        :1;
    uint32_t RX_BYTE2_END        :1;
    uint32_t RSVD1               :20;
  }BF;
} reg_spi_config2_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI_CONFIG2(N)       (*(volatile reg_spi_config2_t*)((SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x28)))
#define REG_SPI_CONFIG2_ADDR(N)  (SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x28)
#define BP_SPI_CONFIG2_RSVD0                                             12
#define BM_SPI_CONFIG2_RSVD0                                     0xFFFFF000
#define BP_SPI_CONFIG2_RX_BYTE2_END                                      11
#define BM_SPI_CONFIG2_RX_BYTE2_END                              0x00000800
#define BP_SPI_CONFIG2_TX_BYTE2_END                                      10
#define BM_SPI_CONFIG2_TX_BYTE2_END                              0x00000400
#define BP_SPI_CONFIG2_AGGR_CLK_GATING                                    9
#define BM_SPI_CONFIG2_AGGR_CLK_GATING                           0x00000200
#define BP_SPI_CONFIG2_CLK_ON                                             8
#define BM_SPI_CONFIG2_CLK_ON                                    0x00000100
#define BP_SPI_CONFIG2_SOFT_RST                                           7
#define BM_SPI_CONFIG2_SOFT_RST                                  0x00000080
#define BP_SPI_CONFIG2_CLR_STICKY                                         6
#define BM_SPI_CONFIG2_CLR_STICKY                                0x00000040
#define BP_SPI_CONFIG2_STALL_IF_RXFULL                                    5
#define BM_SPI_CONFIG2_STALL_IF_RXFULL                           0x00000020
#define BP_SPI_CONFIG2_DISABLE_MISO_METAFLOP                              4
#define BM_SPI_CONFIG2_DISABLE_MISO_METAFLOP                     0x00000010
#define BP_SPI_CONFIG2_EN_LOOPBACK                                        3
#define BM_SPI_CONFIG2_EN_LOOPBACK                               0x00000008
#define BP_SPI_CONFIG2_RSVD1                                              2
#define BM_SPI_CONFIG2_RSVD1                                     0x00000004
#define BP_SPI_CONFIG2_RX_SAMPLE_TIME                                     0
#define BM_SPI_CONFIG2_RX_SAMPLE_TIME                            0x00000003

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi_tx_dummy_byte_cnt_u
{
  uint32_t V;
  struct reg_spi_tx_dummy_byte_cnt_s
  {
    uint32_t COUNT               :16;
    uint32_t RSVD0               :16;
  }BF;
} reg_spi_tx_dummy_byte_cnt_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI_TX_DUMMY_BYTE_CNT(N)       (*(volatile reg_spi_tx_dummy_byte_cnt_t*)((SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x2C)))
#define REG_SPI_TX_DUMMY_BYTE_CNT_ADDR(N)  (SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x2C)
#define BP_SPI_TX_DUMMY_BYTE_CNT_RSVD0                                   16
#define BM_SPI_TX_DUMMY_BYTE_CNT_RSVD0                           0xFFFF0000
#define BP_SPI_TX_DUMMY_BYTE_CNT_COUNT                                    0
#define BM_SPI_TX_DUMMY_BYTE_CNT_COUNT                           0x0000FFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi_cs_config_u
{
  uint32_t V;
  struct reg_spi_cs_config_s
  {
    uint32_t CS0_POL             :1;
    uint32_t CS1_POL             :1;
    uint32_t CS2_POL             :1;
    uint32_t CS3_POL             :1;
    uint32_t RSVD0               :28;
  }BF;
} reg_spi_cs_config_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI_CS_CONFIG(N)       (*(volatile reg_spi_cs_config_t*)((SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x30)))
#define REG_SPI_CS_CONFIG_ADDR(N)  (SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x30)
#define BP_SPI_CS_CONFIG_RSVD0                                            4
#define BM_SPI_CS_CONFIG_RSVD0                                   0xFFFFFFF0
#define BP_SPI_CS_CONFIG_CS3_POL                                          3
#define BM_SPI_CS_CONFIG_CS3_POL                                 0x00000008
#define BP_SPI_CS_CONFIG_CS2_POL                                          2
#define BM_SPI_CS_CONFIG_CS2_POL                                 0x00000004
#define BP_SPI_CS_CONFIG_CS1_POL                                          1
#define BM_SPI_CS_CONFIG_CS1_POL                                 0x00000002
#define BP_SPI_CS_CONFIG_CS0_POL                                          0
#define BM_SPI_CS_CONFIG_CS0_POL                                 0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi_rx_4byte_fifo_data_u
{
  uint32_t V;
  struct reg_spi_rx_4byte_fifo_data_s
  {
    uint32_t DATA                :32;
  }BF;
} reg_spi_rx_4byte_fifo_data_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI_RX_4BYTE_FIFO_DATA(N)       (*(volatile reg_spi_rx_4byte_fifo_data_t*)((SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x34)))
#define REG_SPI_RX_4BYTE_FIFO_DATA_ADDR(N)  (SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x34)
#define BP_SPI_RX_4BYTE_FIFO_DATA_DATA                                    0
#define BM_SPI_RX_4BYTE_FIFO_DATA_DATA                           0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi_int_act_u
{
  uint32_t V;
  struct reg_spi_int_act_s
  {
    uint32_t RSVD0               :4;
    uint32_t TX_DATA_ACT         :1;
    uint32_t RX_DATA_ACT         :1;
    uint32_t TXFIFO_HAS_LEVEL_SPACE_ACT:1;
    uint32_t RX_FIFO_HIT_LEVEL_ACT:1;
    uint32_t XMIT_COMPLETE_ACT   :1;
    uint32_t CMD_IS_DONE_ACT     :1;
    uint32_t PE_BUSY_STICKY_ACT  :1;
    uint32_t NE_BUSY_STICKY_ACT  :1;
    uint32_t RSVD1               :20;
  }BF;
} reg_spi_int_act_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI_INT_ACT(N)       (*(volatile reg_spi_int_act_t*)((SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x38)))
#define REG_SPI_INT_ACT_ADDR(N)  (SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x38)
#define BP_SPI_INT_ACT_RSVD0                                             12
#define BM_SPI_INT_ACT_RSVD0                                     0xFFFFF000
#define BP_SPI_INT_ACT_NE_BUSY_STICKY_ACT                                11
#define BM_SPI_INT_ACT_NE_BUSY_STICKY_ACT                        0x00000800
#define BP_SPI_INT_ACT_PE_BUSY_STICKY_ACT                                10
#define BM_SPI_INT_ACT_PE_BUSY_STICKY_ACT                        0x00000400
#define BP_SPI_INT_ACT_CMD_IS_DONE_ACT                                    9
#define BM_SPI_INT_ACT_CMD_IS_DONE_ACT                           0x00000200
#define BP_SPI_INT_ACT_XMIT_COMPLETE_ACT                                  8
#define BM_SPI_INT_ACT_XMIT_COMPLETE_ACT                         0x00000100
#define BP_SPI_INT_ACT_RX_FIFO_HIT_LEVEL_ACT                              7
#define BM_SPI_INT_ACT_RX_FIFO_HIT_LEVEL_ACT                     0x00000080
#define BP_SPI_INT_ACT_TXFIFO_HAS_LEVEL_SPACE_ACT                         6
#define BM_SPI_INT_ACT_TXFIFO_HAS_LEVEL_SPACE_ACT                0x00000040
#define BP_SPI_INT_ACT_RX_DATA_ACT                                        5
#define BM_SPI_INT_ACT_RX_DATA_ACT                               0x00000020
#define BP_SPI_INT_ACT_TX_DATA_ACT                                        4
#define BM_SPI_INT_ACT_TX_DATA_ACT                               0x00000010
#define BP_SPI_INT_ACT_RSVD1                                              0
#define BM_SPI_INT_ACT_RSVD1                                     0x0000000F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_spi_slave_mode_u
{
  uint32_t V;
  struct reg_spi_slave_mode_s
  {
    uint32_t SLAVE_EN            :1;
    uint32_t DISABLE_ALL         :1;
    uint32_t DISABLE_TX_FIFO     :1;
    uint32_t DISABLED_TX_FIFO_DATA:1;
    uint32_t RSVD0               :28;
  }BF;
} reg_spi_slave_mode_t;

#endif  // __LANGUAGE_ASM__

#define REG_SPI_SLAVE_MODE(N)       (*(volatile reg_spi_slave_mode_t*)((SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x3C)))
#define REG_SPI_SLAVE_MODE_ADDR(N)  (SPI_BASE_ADDRESS + SPI_OFFSET(N) + 0x3C)
#define BP_SPI_SLAVE_MODE_RSVD0                                           4
#define BM_SPI_SLAVE_MODE_RSVD0                                  0xFFFFFFF0
#define BP_SPI_SLAVE_MODE_DISABLED_TX_FIFO_DATA                           3
#define BM_SPI_SLAVE_MODE_DISABLED_TX_FIFO_DATA                  0x00000008
#define BP_SPI_SLAVE_MODE_DISABLE_TX_FIFO                                 2
#define BM_SPI_SLAVE_MODE_DISABLE_TX_FIFO                        0x00000004
#define BP_SPI_SLAVE_MODE_DISABLE_ALL                                     1
#define BM_SPI_SLAVE_MODE_DISABLE_ALL                            0x00000002
#define BP_SPI_SLAVE_MODE_SLAVE_EN                                        0
#define BM_SPI_SLAVE_MODE_SLAVE_EN                               0x00000001

#define UART_BASE_ADDRESS 0x50020200
#define UART_OFFSET(n) (n * 0x100)


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_uart_cfg_status_u
{
  uint32_t V;
  struct reg_uart_cfg_status_s
  {
    uint32_t RX_EN               :1;
    uint32_t RTS_CONTROL         :1;
    uint32_t RTS_STATE           :1;
    uint32_t RX_TX_PARITY        :1;
    uint32_t RX_PARITY_TYPE      :1;
    uint32_t RX_POLARITY         :1;
    uint32_t RTS_POLARITY        :1;
    uint32_t RTS_AUTO            :1;
    uint32_t RX_SHIFT_DIR        :1;
    uint32_t RX_FIFO_EMPTY       :1;
    uint32_t RSVD0               :6;
    uint32_t TX_EN               :1;
    uint32_t CTS                 :1;
    uint32_t CTS_PIN             :1;
    uint32_t CTS_POLARITY        :1;
    uint32_t BREAK               :1;
    uint32_t TX_POLARITY         :1;
    uint32_t TX_SHIFT_DIR        :1;
    uint32_t TX_PARITY_TYPE      :1;
    uint32_t TX_FIFO_FULL        :1;
    uint32_t TX_ONE_STOP         :1;
    uint32_t RSVD1               :6;
  }BF;
} reg_uart_cfg_status_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for UART_CFG_STATUS_TX_ONE_STOP
//-------------------------------------------------------------------------
#define BFV_UART_CFG_STATUS_TX_ONE_STOP_SET                             0x1
#define BFV_UART_CFG_STATUS_TX_ONE_STOP_CLEAR                           0x0

//-------------------------------------------------------------------------
// field value definitions for UART_CFG_STATUS_TX_PARITY_TYPE
//-------------------------------------------------------------------------
#define BFV_UART_CFG_STATUS_TX_PARITY_TYPE_EVEN                         0x1
#define BFV_UART_CFG_STATUS_TX_PARITY_TYPE_ODD                          0x0

//-------------------------------------------------------------------------
// field value definitions for UART_CFG_STATUS_TX_SHIFT_DIR
//-------------------------------------------------------------------------
#define BFV_UART_CFG_STATUS_TX_SHIFT_DIR_MSB                            0x1
#define BFV_UART_CFG_STATUS_TX_SHIFT_DIR_LSB                            0x0

//-------------------------------------------------------------------------
// field value definitions for UART_CFG_STATUS_TX_POLARITY
//-------------------------------------------------------------------------
#define BFV_UART_CFG_STATUS_TX_POLARITY_INVERTED                        0x1
#define BFV_UART_CFG_STATUS_TX_POLARITY_NORMAL                          0x0

//-------------------------------------------------------------------------
// field value definitions for UART_CFG_STATUS_BREAK
//-------------------------------------------------------------------------
#define BFV_UART_CFG_STATUS_BREAK_ENABLE                                0x1
#define BFV_UART_CFG_STATUS_BREAK_STOP                                  0x0

//-------------------------------------------------------------------------
// field value definitions for UART_CFG_STATUS_CTS_POLARITY
//-------------------------------------------------------------------------
#define BFV_UART_CFG_STATUS_CTS_POLARITY_INVERTED                       0x1
#define BFV_UART_CFG_STATUS_CTS_POLARITY_NORMAL                         0x0

//-------------------------------------------------------------------------
// field value definitions for UART_CFG_STATUS_CTS
//-------------------------------------------------------------------------
#define BFV_UART_CFG_STATUS_CTS_ENABLE                                  0x1
#define BFV_UART_CFG_STATUS_CTS_STOP                                    0x0

//-------------------------------------------------------------------------
// field value definitions for UART_CFG_STATUS_TX_EN
//-------------------------------------------------------------------------
#define BFV_UART_CFG_STATUS_TX_EN_RUN                                   0x1
#define BFV_UART_CFG_STATUS_TX_EN_STOP                                  0x0

//-------------------------------------------------------------------------
// field value definitions for UART_CFG_STATUS_RX_SHIFT_DIR
//-------------------------------------------------------------------------
#define BFV_UART_CFG_STATUS_RX_SHIFT_DIR_MSB                            0x1
#define BFV_UART_CFG_STATUS_RX_SHIFT_DIR_LSB                            0x0

//-------------------------------------------------------------------------
// field value definitions for UART_CFG_STATUS_RTS_AUTO
//-------------------------------------------------------------------------
#define BFV_UART_CFG_STATUS_RTS_AUTO_ENABLE                             0x1
#define BFV_UART_CFG_STATUS_RTS_AUTO_DISABLE                            0x0

//-------------------------------------------------------------------------
// field value definitions for UART_CFG_STATUS_RTS_POLARITY
//-------------------------------------------------------------------------
#define BFV_UART_CFG_STATUS_RTS_POLARITY_INVERTED                       0x1
#define BFV_UART_CFG_STATUS_RTS_POLARITY_NORMAL                         0x0

//-------------------------------------------------------------------------
// field value definitions for UART_CFG_STATUS_RX_POLARITY
//-------------------------------------------------------------------------
#define BFV_UART_CFG_STATUS_RX_POLARITY_INVERTED                        0x1
#define BFV_UART_CFG_STATUS_RX_POLARITY_NORMAL                          0x0

//-------------------------------------------------------------------------
// field value definitions for UART_CFG_STATUS_RX_PARITY_TYPE
//-------------------------------------------------------------------------
#define BFV_UART_CFG_STATUS_RX_PARITY_TYPE_EVEN                         0x1
#define BFV_UART_CFG_STATUS_RX_PARITY_TYPE_ODD                          0x0

//-------------------------------------------------------------------------
// field value definitions for UART_CFG_STATUS_RX_TX_PARITY
//-------------------------------------------------------------------------
#define BFV_UART_CFG_STATUS_RX_TX_PARITY_ENABLE                         0x1
#define BFV_UART_CFG_STATUS_RX_TX_PARITY_DISABLE                        0x0

//-------------------------------------------------------------------------
// field value definitions for UART_CFG_STATUS_RTS_STATE
//-------------------------------------------------------------------------
#define BFV_UART_CFG_STATUS_RTS_STATE_RUN                               0x1
#define BFV_UART_CFG_STATUS_RTS_STATE_STOP                              0x0

//-------------------------------------------------------------------------
// field value definitions for UART_CFG_STATUS_RTS_CONTROL
//-------------------------------------------------------------------------
#define BFV_UART_CFG_STATUS_RTS_CONTROL_FORCE                           0x1
#define BFV_UART_CFG_STATUS_RTS_CONTROL_FREE                            0x0

//-------------------------------------------------------------------------
// field value definitions for UART_CFG_STATUS_RX_EN
//-------------------------------------------------------------------------
#define BFV_UART_CFG_STATUS_RX_EN_RUN                                   0x1
#define BFV_UART_CFG_STATUS_RX_EN_STOP                                  0x0

#define REG_UART_CFG_STATUS(N)       (*(volatile reg_uart_cfg_status_t*)((UART_BASE_ADDRESS + UART_OFFSET(N) + 0x0)))
#define REG_UART_CFG_STATUS_ADDR(N)  (UART_BASE_ADDRESS + UART_OFFSET(N) + 0x0)
#define BP_UART_CFG_STATUS_RSVD0                                         26
#define BM_UART_CFG_STATUS_RSVD0                                 0xFC000000
#define BP_UART_CFG_STATUS_TX_ONE_STOP                                   25
#define BM_UART_CFG_STATUS_TX_ONE_STOP                           0x02000000
#define BP_UART_CFG_STATUS_TX_FIFO_FULL                                  24
#define BM_UART_CFG_STATUS_TX_FIFO_FULL                          0x01000000
#define BP_UART_CFG_STATUS_TX_PARITY_TYPE                                23
#define BM_UART_CFG_STATUS_TX_PARITY_TYPE                        0x00800000
#define BP_UART_CFG_STATUS_TX_SHIFT_DIR                                  22
#define BM_UART_CFG_STATUS_TX_SHIFT_DIR                          0x00400000
#define BP_UART_CFG_STATUS_TX_POLARITY                                   21
#define BM_UART_CFG_STATUS_TX_POLARITY                           0x00200000
#define BP_UART_CFG_STATUS_BREAK                                         20
#define BM_UART_CFG_STATUS_BREAK                                 0x00100000
#define BP_UART_CFG_STATUS_CTS_POLARITY                                  19
#define BM_UART_CFG_STATUS_CTS_POLARITY                          0x00080000
#define BP_UART_CFG_STATUS_CTS_PIN                                       18
#define BM_UART_CFG_STATUS_CTS_PIN                               0x00040000
#define BP_UART_CFG_STATUS_CTS                                           17
#define BM_UART_CFG_STATUS_CTS                                   0x00020000
#define BP_UART_CFG_STATUS_TX_EN                                         16
#define BM_UART_CFG_STATUS_TX_EN                                 0x00010000
#define BP_UART_CFG_STATUS_RSVD1                                         10
#define BM_UART_CFG_STATUS_RSVD1                                 0x0000FC00
#define BP_UART_CFG_STATUS_RX_FIFO_EMPTY                                  9
#define BM_UART_CFG_STATUS_RX_FIFO_EMPTY                         0x00000200
#define BP_UART_CFG_STATUS_RX_SHIFT_DIR                                   8
#define BM_UART_CFG_STATUS_RX_SHIFT_DIR                          0x00000100
#define BP_UART_CFG_STATUS_RTS_AUTO                                       7
#define BM_UART_CFG_STATUS_RTS_AUTO                              0x00000080
#define BP_UART_CFG_STATUS_RTS_POLARITY                                   6
#define BM_UART_CFG_STATUS_RTS_POLARITY                          0x00000040
#define BP_UART_CFG_STATUS_RX_POLARITY                                    5
#define BM_UART_CFG_STATUS_RX_POLARITY                           0x00000020
#define BP_UART_CFG_STATUS_RX_PARITY_TYPE                                 4
#define BM_UART_CFG_STATUS_RX_PARITY_TYPE                        0x00000010
#define BP_UART_CFG_STATUS_RX_TX_PARITY                                   3
#define BM_UART_CFG_STATUS_RX_TX_PARITY                          0x00000008
#define BP_UART_CFG_STATUS_RTS_STATE                                      2
#define BM_UART_CFG_STATUS_RTS_STATE                             0x00000004
#define BP_UART_CFG_STATUS_RTS_CONTROL                                    1
#define BM_UART_CFG_STATUS_RTS_CONTROL                           0x00000002
#define BP_UART_CFG_STATUS_RX_EN                                          0
#define BM_UART_CFG_STATUS_RX_EN                                 0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_uart_rx_fifo_u
{
  uint32_t V;
  struct reg_uart_rx_fifo_s
  {
    uint32_t DATA                :8;
    uint32_t DEPTH               :5;
    uint32_t RX_PARITY_ERROR     :1;
    uint32_t RX_FRAME_ERROR      :1;
    uint32_t EMPTY               :1;
    uint32_t HWM                 :1;
    uint32_t TIMEOUT             :1;
    uint32_t RSVD0               :14;
  }BF;
} reg_uart_rx_fifo_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for UART_RX_FIFO_RX_FRAME_ERROR
//-------------------------------------------------------------------------
#define BFV_UART_RX_FIFO_RX_FRAME_ERROR_PRESENT                         0x1
#define BFV_UART_RX_FIFO_RX_FRAME_ERROR_ABSENT                          0x0

//-------------------------------------------------------------------------
// field value definitions for UART_RX_FIFO_RX_PARITY_ERROR
//-------------------------------------------------------------------------
#define BFV_UART_RX_FIFO_RX_PARITY_ERROR_PRESENT                        0x1
#define BFV_UART_RX_FIFO_RX_PARITY_ERROR_ABSENT                         0x0

#define REG_UART_RX_FIFO(N)       (*(volatile reg_uart_rx_fifo_t*)((UART_BASE_ADDRESS + UART_OFFSET(N) + 0x4)))
#define REG_UART_RX_FIFO_ADDR(N)  (UART_BASE_ADDRESS + UART_OFFSET(N) + 0x4)
#define BP_UART_RX_FIFO_RSVD0                                            18
#define BM_UART_RX_FIFO_RSVD0                                    0xFFFC0000
#define BP_UART_RX_FIFO_TIMEOUT                                          17
#define BM_UART_RX_FIFO_TIMEOUT                                  0x00020000
#define BP_UART_RX_FIFO_HWM                                              16
#define BM_UART_RX_FIFO_HWM                                      0x00010000
#define BP_UART_RX_FIFO_EMPTY                                            15
#define BM_UART_RX_FIFO_EMPTY                                    0x00008000
#define BP_UART_RX_FIFO_RX_FRAME_ERROR                                   14
#define BM_UART_RX_FIFO_RX_FRAME_ERROR                           0x00004000
#define BP_UART_RX_FIFO_RX_PARITY_ERROR                                  13
#define BM_UART_RX_FIFO_RX_PARITY_ERROR                          0x00002000
#define BP_UART_RX_FIFO_DEPTH                                             8
#define BM_UART_RX_FIFO_DEPTH                                    0x00001F00
#define BP_UART_RX_FIFO_DATA                                              0
#define BM_UART_RX_FIFO_DATA                                     0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_uart_tx_fifo_u
{
  uint32_t V;
  struct reg_uart_tx_fifo_s
  {
    uint32_t DATA                :8;
    uint32_t COUNT               :5;
    uint32_t TX_BUSY             :1;
    uint32_t FIFO_EMPTY          :1;
    uint32_t FIFO_LWM            :1;
    uint32_t RSVD0               :16;
  }BF;
} reg_uart_tx_fifo_t;

#endif  // __LANGUAGE_ASM__

#define REG_UART_TX_FIFO(N)       (*(volatile reg_uart_tx_fifo_t*)((UART_BASE_ADDRESS + UART_OFFSET(N) + 0x8)))
#define REG_UART_TX_FIFO_ADDR(N)  (UART_BASE_ADDRESS + UART_OFFSET(N) + 0x8)
#define BP_UART_TX_FIFO_RSVD0                                            16
#define BM_UART_TX_FIFO_RSVD0                                    0xFFFF0000
#define BP_UART_TX_FIFO_FIFO_LWM                                         15
#define BM_UART_TX_FIFO_FIFO_LWM                                 0x00008000
#define BP_UART_TX_FIFO_FIFO_EMPTY                                       14
#define BM_UART_TX_FIFO_FIFO_EMPTY                               0x00004000
#define BP_UART_TX_FIFO_TX_BUSY                                          13
#define BM_UART_TX_FIFO_TX_BUSY                                  0x00002000
#define BP_UART_TX_FIFO_COUNT                                             8
#define BM_UART_TX_FIFO_COUNT                                    0x00001F00
#define BP_UART_TX_FIFO_DATA                                              0
#define BM_UART_TX_FIFO_DATA                                     0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_uart_phase_u
{
  uint32_t V;
  struct reg_uart_phase_s
  {
    uint32_t SHIFT_RX            :8;
    uint32_t RSVD0               :8;
    uint32_t SHIFT_TX            :8;
    uint32_t RSVD1               :8;
  }BF;
} reg_uart_phase_t;

#endif  // __LANGUAGE_ASM__

#define REG_UART_PHASE(N)       (*(volatile reg_uart_phase_t*)((UART_BASE_ADDRESS + UART_OFFSET(N) + 0xC)))
#define REG_UART_PHASE_ADDR(N)  (UART_BASE_ADDRESS + UART_OFFSET(N) + 0xC)
#define BP_UART_PHASE_RSVD0                                              24
#define BM_UART_PHASE_RSVD0                                      0xFF000000
#define BP_UART_PHASE_SHIFT_TX                                           16
#define BM_UART_PHASE_SHIFT_TX                                   0x00FF0000
#define BP_UART_PHASE_RSVD1                                               8
#define BM_UART_PHASE_RSVD1                                      0x0000FF00
#define BP_UART_PHASE_SHIFT_RX                                            0
#define BM_UART_PHASE_SHIFT_RX                                   0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_uart_int_stat_u
{
  uint32_t V;
  struct reg_uart_int_stat_s
  {
    uint32_t RX_FIFO_HWM         :1;
    uint32_t RX_FIFO_TO          :1;
    uint32_t EOB                 :1;
    uint32_t TX_FIFO_LWM         :1;
    uint32_t TX_IDLE             :1;
    uint32_t RX_ERROR            :1;
    uint32_t RSVD0               :26;
  }BF;
} reg_uart_int_stat_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for UART_INT_STAT_RX_ERROR
//-------------------------------------------------------------------------
#define BFV_UART_INT_STAT_RX_ERROR_PRESENT                              0x1
#define BFV_UART_INT_STAT_RX_ERROR_ABSENT                               0x0

//-------------------------------------------------------------------------
// field value definitions for UART_INT_STAT_TX_IDLE
//-------------------------------------------------------------------------
#define BFV_UART_INT_STAT_TX_IDLE_PRESENT                               0x1
#define BFV_UART_INT_STAT_TX_IDLE_ABSENT                                0x0

//-------------------------------------------------------------------------
// field value definitions for UART_INT_STAT_TX_FIFO_LWM
//-------------------------------------------------------------------------
#define BFV_UART_INT_STAT_TX_FIFO_LWM_PRESENT                           0x1
#define BFV_UART_INT_STAT_TX_FIFO_LWM_ABSENT                            0x0

//-------------------------------------------------------------------------
// field value definitions for UART_INT_STAT_EOB
//-------------------------------------------------------------------------
#define BFV_UART_INT_STAT_EOB_PRESENT                                   0x1
#define BFV_UART_INT_STAT_EOB_ABSENT                                    0x0

//-------------------------------------------------------------------------
// field value definitions for UART_INT_STAT_RX_FIFO_TO
//-------------------------------------------------------------------------
#define BFV_UART_INT_STAT_RX_FIFO_TO_PRESENT                            0x1
#define BFV_UART_INT_STAT_RX_FIFO_TO_ABSENT                             0x0

//-------------------------------------------------------------------------
// field value definitions for UART_INT_STAT_RX_FIFO_HWM
//-------------------------------------------------------------------------
#define BFV_UART_INT_STAT_RX_FIFO_HWM_PRESENT                           0x1
#define BFV_UART_INT_STAT_RX_FIFO_HWM_ABSENT                            0x0

#define REG_UART_INT_STAT(N)       (*(volatile reg_uart_int_stat_t*)((UART_BASE_ADDRESS + UART_OFFSET(N) + 0x10)))
#define REG_UART_INT_STAT_ADDR(N)  (UART_BASE_ADDRESS + UART_OFFSET(N) + 0x10)
#define BP_UART_INT_STAT_RSVD0                                            6
#define BM_UART_INT_STAT_RSVD0                                   0xFFFFFFC0
#define BP_UART_INT_STAT_RX_ERROR                                         5
#define BM_UART_INT_STAT_RX_ERROR                                0x00000020
#define BP_UART_INT_STAT_TX_IDLE                                          4
#define BM_UART_INT_STAT_TX_IDLE                                 0x00000010
#define BP_UART_INT_STAT_TX_FIFO_LWM                                      3
#define BM_UART_INT_STAT_TX_FIFO_LWM                             0x00000008
#define BP_UART_INT_STAT_EOB                                              2
#define BM_UART_INT_STAT_EOB                                     0x00000004
#define BP_UART_INT_STAT_RX_FIFO_TO                                       1
#define BM_UART_INT_STAT_RX_FIFO_TO                              0x00000002
#define BP_UART_INT_STAT_RX_FIFO_HWM                                      0
#define BM_UART_INT_STAT_RX_FIFO_HWM                             0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_uart_int_stat_clear_u
{
  uint32_t V;
  struct reg_uart_int_stat_clear_s
  {
    uint32_t RX_FIFO_HWM         :1;
    uint32_t RX_FIFO_TO          :1;
    uint32_t EOB                 :1;
    uint32_t TX_FIFO_LWM         :1;
    uint32_t TX_IDLE             :1;
    uint32_t RX_ERROR            :1;
    uint32_t RSVD0               :26;
  }BF;
} reg_uart_int_stat_clear_t;

#endif  // __LANGUAGE_ASM__

#define REG_UART_INT_STAT_CLEAR(N)       (*(volatile reg_uart_int_stat_clear_t*)((UART_BASE_ADDRESS + UART_OFFSET(N) + 0x14)))
#define REG_UART_INT_STAT_CLEAR_ADDR(N)  (UART_BASE_ADDRESS + UART_OFFSET(N) + 0x14)
#define BP_UART_INT_STAT_CLEAR_RSVD0                                      6
#define BM_UART_INT_STAT_CLEAR_RSVD0                             0xFFFFFFC0
#define BP_UART_INT_STAT_CLEAR_RX_ERROR                                   5
#define BM_UART_INT_STAT_CLEAR_RX_ERROR                          0x00000020
#define BP_UART_INT_STAT_CLEAR_TX_IDLE                                    4
#define BM_UART_INT_STAT_CLEAR_TX_IDLE                           0x00000010
#define BP_UART_INT_STAT_CLEAR_TX_FIFO_LWM                                3
#define BM_UART_INT_STAT_CLEAR_TX_FIFO_LWM                       0x00000008
#define BP_UART_INT_STAT_CLEAR_EOB                                        2
#define BM_UART_INT_STAT_CLEAR_EOB                               0x00000004
#define BP_UART_INT_STAT_CLEAR_RX_FIFO_TO                                 1
#define BM_UART_INT_STAT_CLEAR_RX_FIFO_TO                        0x00000002
#define BP_UART_INT_STAT_CLEAR_RX_FIFO_HWM                                0
#define BM_UART_INT_STAT_CLEAR_RX_FIFO_HWM                       0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_uart_int_enable_u
{
  uint32_t V;
  struct reg_uart_int_enable_s
  {
    uint32_t RX_FIFO_HWM         :1;
    uint32_t RX_FIFO_TO          :1;
    uint32_t EOB                 :1;
    uint32_t TX_FIFO_LWM         :1;
    uint32_t TX_IDLE             :1;
    uint32_t RX_ERROR            :1;
    uint32_t RSVD0               :26;
  }BF;
} reg_uart_int_enable_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for UART_INT_ENABLE_RX_ERROR
//-------------------------------------------------------------------------
#define BFV_UART_INT_ENABLE_RX_ERROR_ENABLE                             0x1
#define BFV_UART_INT_ENABLE_RX_ERROR_DISABLE                            0x0

//-------------------------------------------------------------------------
// field value definitions for UART_INT_ENABLE_TX_IDLE
//-------------------------------------------------------------------------
#define BFV_UART_INT_ENABLE_TX_IDLE_ENABLE                              0x1
#define BFV_UART_INT_ENABLE_TX_IDLE_DISABLE                             0x0

//-------------------------------------------------------------------------
// field value definitions for UART_INT_ENABLE_TX_FIFO_LWM
//-------------------------------------------------------------------------
#define BFV_UART_INT_ENABLE_TX_FIFO_LWM_ENABLE                          0x1
#define BFV_UART_INT_ENABLE_TX_FIFO_LWM_DISABLE                         0x0

//-------------------------------------------------------------------------
// field value definitions for UART_INT_ENABLE_EOB
//-------------------------------------------------------------------------
#define BFV_UART_INT_ENABLE_EOB_ENABLE                                  0x1
#define BFV_UART_INT_ENABLE_EOB_DISABLE                                 0x0

//-------------------------------------------------------------------------
// field value definitions for UART_INT_ENABLE_RX_FIFO_TO
//-------------------------------------------------------------------------
#define BFV_UART_INT_ENABLE_RX_FIFO_TO_ENABLE                           0x1
#define BFV_UART_INT_ENABLE_RX_FIFO_TO_DISABLE                          0x0

//-------------------------------------------------------------------------
// field value definitions for UART_INT_ENABLE_RX_FIFO_HWM
//-------------------------------------------------------------------------
#define BFV_UART_INT_ENABLE_RX_FIFO_HWM_ENABLE                          0x1
#define BFV_UART_INT_ENABLE_RX_FIFO_HWM_DISABLE                         0x0

#define REG_UART_INT_ENABLE(N)       (*(volatile reg_uart_int_enable_t*)((UART_BASE_ADDRESS + UART_OFFSET(N) + 0x18)))
#define REG_UART_INT_ENABLE_ADDR(N)  (UART_BASE_ADDRESS + UART_OFFSET(N) + 0x18)
#define BP_UART_INT_ENABLE_RSVD0                                          6
#define BM_UART_INT_ENABLE_RSVD0                                 0xFFFFFFC0
#define BP_UART_INT_ENABLE_RX_ERROR                                       5
#define BM_UART_INT_ENABLE_RX_ERROR                              0x00000020
#define BP_UART_INT_ENABLE_TX_IDLE                                        4
#define BM_UART_INT_ENABLE_TX_IDLE                               0x00000010
#define BP_UART_INT_ENABLE_TX_FIFO_LWM                                    3
#define BM_UART_INT_ENABLE_TX_FIFO_LWM                           0x00000008
#define BP_UART_INT_ENABLE_EOB                                            2
#define BM_UART_INT_ENABLE_EOB                                   0x00000004
#define BP_UART_INT_ENABLE_RX_FIFO_TO                                     1
#define BM_UART_INT_ENABLE_RX_FIFO_TO                            0x00000002
#define BP_UART_INT_ENABLE_RX_FIFO_HWM                                    0
#define BM_UART_INT_ENABLE_RX_FIFO_HWM                           0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_uart_int_enable_set_u
{
  uint32_t V;
  struct reg_uart_int_enable_set_s
  {
    uint32_t RX_FIFO_HWM         :1;
    uint32_t RX_FIFO_TO          :1;
    uint32_t EOB                 :1;
    uint32_t TX_FIFO_LWM         :1;
    uint32_t TX_IDLE             :1;
    uint32_t RX_ERROR            :1;
    uint32_t RSVD0               :26;
  }BF;
} reg_uart_int_enable_set_t;

#endif  // __LANGUAGE_ASM__

#define REG_UART_INT_ENABLE_SET(N)       (*(volatile reg_uart_int_enable_set_t*)((UART_BASE_ADDRESS + UART_OFFSET(N) + 0x1C)))
#define REG_UART_INT_ENABLE_SET_ADDR(N)  (UART_BASE_ADDRESS + UART_OFFSET(N) + 0x1C)
#define BP_UART_INT_ENABLE_SET_RSVD0                                      6
#define BM_UART_INT_ENABLE_SET_RSVD0                             0xFFFFFFC0
#define BP_UART_INT_ENABLE_SET_RX_ERROR                                   5
#define BM_UART_INT_ENABLE_SET_RX_ERROR                          0x00000020
#define BP_UART_INT_ENABLE_SET_TX_IDLE                                    4
#define BM_UART_INT_ENABLE_SET_TX_IDLE                           0x00000010
#define BP_UART_INT_ENABLE_SET_TX_FIFO_LWM                                3
#define BM_UART_INT_ENABLE_SET_TX_FIFO_LWM                       0x00000008
#define BP_UART_INT_ENABLE_SET_EOB                                        2
#define BM_UART_INT_ENABLE_SET_EOB                               0x00000004
#define BP_UART_INT_ENABLE_SET_RX_FIFO_TO                                 1
#define BM_UART_INT_ENABLE_SET_RX_FIFO_TO                        0x00000002
#define BP_UART_INT_ENABLE_SET_RX_FIFO_HWM                                0
#define BM_UART_INT_ENABLE_SET_RX_FIFO_HWM                       0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_uart_int_enable_clear_u
{
  uint32_t V;
  struct reg_uart_int_enable_clear_s
  {
    uint32_t RX_FIFO_HWM         :1;
    uint32_t RX_FIFO_TO          :1;
    uint32_t EOB                 :1;
    uint32_t TX_FIFO_LWM         :1;
    uint32_t TX_IDLE             :1;
    uint32_t RX_ERROR            :1;
    uint32_t RSVD0               :26;
  }BF;
} reg_uart_int_enable_clear_t;

#endif  // __LANGUAGE_ASM__

#define REG_UART_INT_ENABLE_CLEAR(N)       (*(volatile reg_uart_int_enable_clear_t*)((UART_BASE_ADDRESS + UART_OFFSET(N) + 0x20)))
#define REG_UART_INT_ENABLE_CLEAR_ADDR(N)  (UART_BASE_ADDRESS + UART_OFFSET(N) + 0x20)
#define BP_UART_INT_ENABLE_CLEAR_RSVD0                                    6
#define BM_UART_INT_ENABLE_CLEAR_RSVD0                           0xFFFFFFC0
#define BP_UART_INT_ENABLE_CLEAR_RX_ERROR                                 5
#define BM_UART_INT_ENABLE_CLEAR_RX_ERROR                        0x00000020
#define BP_UART_INT_ENABLE_CLEAR_TX_IDLE                                  4
#define BM_UART_INT_ENABLE_CLEAR_TX_IDLE                         0x00000010
#define BP_UART_INT_ENABLE_CLEAR_TX_FIFO_LWM                              3
#define BM_UART_INT_ENABLE_CLEAR_TX_FIFO_LWM                     0x00000008
#define BP_UART_INT_ENABLE_CLEAR_EOB                                      2
#define BM_UART_INT_ENABLE_CLEAR_EOB                             0x00000004
#define BP_UART_INT_ENABLE_CLEAR_RX_FIFO_TO                               1
#define BM_UART_INT_ENABLE_CLEAR_RX_FIFO_TO                      0x00000002
#define BP_UART_INT_ENABLE_CLEAR_RX_FIFO_HWM                              0
#define BM_UART_INT_ENABLE_CLEAR_RX_FIFO_HWM                     0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_uart_baudrate_u
{
  uint32_t V;
  struct reg_uart_baudrate_s
  {
    uint32_t DIVISOR             :11;
    uint32_t RSVD0               :21;
  }BF;
} reg_uart_baudrate_t;

#endif  // __LANGUAGE_ASM__

#define REG_UART_BAUDRATE(N)       (*(volatile reg_uart_baudrate_t*)((UART_BASE_ADDRESS + UART_OFFSET(N) + 0x24)))
#define REG_UART_BAUDRATE_ADDR(N)  (UART_BASE_ADDRESS + UART_OFFSET(N) + 0x24)
#define BP_UART_BAUDRATE_RSVD0                                           11
#define BM_UART_BAUDRATE_RSVD0                                   0xFFFFF800
#define BP_UART_BAUDRATE_DIVISOR                                          0
#define BM_UART_BAUDRATE_DIVISOR                                 0x000007FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_uart_config2_u
{
  uint32_t V;
  struct reg_uart_config2_s
  {
    uint32_t CLK_ON              :1;
    uint32_t RSVD0               :31;
  }BF;
} reg_uart_config2_t;

#endif  // __LANGUAGE_ASM__

#define REG_UART_CONFIG2(N)       (*(volatile reg_uart_config2_t*)((UART_BASE_ADDRESS + UART_OFFSET(N) + 0x28)))
#define REG_UART_CONFIG2_ADDR(N)  (UART_BASE_ADDRESS + UART_OFFSET(N) + 0x28)
#define BP_UART_CONFIG2_RSVD0                                             1
#define BM_UART_CONFIG2_RSVD0                                    0xFFFFFFFE
#define BP_UART_CONFIG2_CLK_ON                                            0
#define BM_UART_CONFIG2_CLK_ON                                   0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_uart_debug_u
{
  uint32_t V;
  struct reg_uart_debug_s
  {
    uint32_t DBG_PIN_A           :2;
    uint32_t DBG_PIN_B           :2;
    uint32_t DBG_PIN_C           :2;
    uint32_t RSVD0               :1;
    uint32_t SELF_LOOPBACK       :1;
    uint32_t TWIN_LOOPBACK       :1;
    uint32_t RSVD1               :21;
    uint32_t RX_BREAK_DETECT     :1;
    uint32_t UART_RX             :1;
  }BF;
} reg_uart_debug_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for UART_DEBUG_TWIN_LOOPBACK
//-------------------------------------------------------------------------
#define BFV_UART_DEBUG_TWIN_LOOPBACK_ENABLE                             0x1
#define BFV_UART_DEBUG_TWIN_LOOPBACK_STOP                               0x0

//-------------------------------------------------------------------------
// field value definitions for UART_DEBUG_SELF_LOOPBACK
//-------------------------------------------------------------------------
#define BFV_UART_DEBUG_SELF_LOOPBACK_ENABLE                             0x1
#define BFV_UART_DEBUG_SELF_LOOPBACK_STOP                               0x0

//-------------------------------------------------------------------------
// field value definitions for UART_DEBUG_DBG_PIN_C
//-------------------------------------------------------------------------
#define BFV_UART_DEBUG_DBG_PIN_C_RX_DATA                                0x0
#define BFV_UART_DEBUG_DBG_PIN_C_TX_STEP                                0x1
#define BFV_UART_DEBUG_DBG_PIN_C_TX_FIFO_LWM                            0x2
#define BFV_UART_DEBUG_DBG_PIN_C_RX_FIFO_EMPTY                          0x3

//-------------------------------------------------------------------------
// field value definitions for UART_DEBUG_DBG_PIN_B
//-------------------------------------------------------------------------
#define BFV_UART_DEBUG_DBG_PIN_B_RX_STEP                                0x0
#define BFV_UART_DEBUG_DBG_PIN_B_TX_STOP                                0x1
#define BFV_UART_DEBUG_DBG_PIN_B_TX_FIFO_FULL                           0x2
#define BFV_UART_DEBUG_DBG_PIN_B_RX_FIFO_HWM                            0x3

//-------------------------------------------------------------------------
// field value definitions for UART_DEBUG_DBG_PIN_A
//-------------------------------------------------------------------------
#define BFV_UART_DEBUG_DBG_PIN_A_RX_START                               0x0
#define BFV_UART_DEBUG_DBG_PIN_A_TX_START                               0x1
#define BFV_UART_DEBUG_DBG_PIN_A_TX_FIFO_EMPTY                          0x2
#define BFV_UART_DEBUG_DBG_PIN_A_RX_FIFO_TIMEOUT                        0x3

#define REG_UART_DEBUG(N)       (*(volatile reg_uart_debug_t*)((UART_BASE_ADDRESS + UART_OFFSET(N) + 0x30)))
#define REG_UART_DEBUG_ADDR(N)  (UART_BASE_ADDRESS + UART_OFFSET(N) + 0x30)
#define BP_UART_DEBUG_UART_RX                                            31
#define BM_UART_DEBUG_UART_RX                                    0x80000000
#define BP_UART_DEBUG_RX_BREAK_DETECT                                    30
#define BM_UART_DEBUG_RX_BREAK_DETECT                            0x40000000
#define BP_UART_DEBUG_RSVD0                                               9
#define BM_UART_DEBUG_RSVD0                                      0x3FFFFE00
#define BP_UART_DEBUG_TWIN_LOOPBACK                                       8
#define BM_UART_DEBUG_TWIN_LOOPBACK                              0x00000100
#define BP_UART_DEBUG_SELF_LOOPBACK                                       7
#define BM_UART_DEBUG_SELF_LOOPBACK                              0x00000080
#define BP_UART_DEBUG_RSVD1                                               6
#define BM_UART_DEBUG_RSVD1                                      0x00000040
#define BP_UART_DEBUG_DBG_PIN_C                                           4
#define BM_UART_DEBUG_DBG_PIN_C                                  0x00000030
#define BP_UART_DEBUG_DBG_PIN_B                                           2
#define BM_UART_DEBUG_DBG_PIN_B                                  0x0000000C
#define BP_UART_DEBUG_DBG_PIN_A                                           0
#define BM_UART_DEBUG_DBG_PIN_A                                  0x00000003

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_uart_debug_read_only_u
{
  uint32_t V;
  struct reg_uart_debug_read_only_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_uart_debug_read_only_t;

#endif  // __LANGUAGE_ASM__

#define REG_UART_DEBUG_READ_ONLY(N)       (*(volatile reg_uart_debug_read_only_t*)((UART_BASE_ADDRESS + UART_OFFSET(N) + 0x34)))
#define REG_UART_DEBUG_READ_ONLY_ADDR(N)  (UART_BASE_ADDRESS + UART_OFFSET(N) + 0x34)
#define BP_UART_DEBUG_READ_ONLY_VALUE                                     0
#define BM_UART_DEBUG_READ_ONLY_VALUE                            0xFFFFFFFF

#define TIMER_BASE_ADDRESS 0x50020400


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_cfg_status_u
{
  uint32_t V;
  struct reg_timer_cfg_status_s
  {
    uint32_t SFTRST              :1;
    uint32_t CLK_EN_OVR          :1;
    uint32_t ENABLE_CAPTURE      :1;
    uint32_t RSVD0               :2;
    uint32_t FLAG                :1;
    uint32_t RSVD1               :26;
  }BF;
} reg_timer_cfg_status_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for TIMER_CFG_STATUS_ENABLE_CAPTURE
//-------------------------------------------------------------------------
#define BFV_TIMER_CFG_STATUS_ENABLE_CAPTURE_ENABLE                      0x1
#define BFV_TIMER_CFG_STATUS_ENABLE_CAPTURE_DISABLE                     0x0

//-------------------------------------------------------------------------
// field value definitions for TIMER_CFG_STATUS_CLK_EN_OVR
//-------------------------------------------------------------------------
#define BFV_TIMER_CFG_STATUS_CLK_EN_OVR_ENABLE                          0x1
#define BFV_TIMER_CFG_STATUS_CLK_EN_OVR_DISABLE                         0x0

//-------------------------------------------------------------------------
// field value definitions for TIMER_CFG_STATUS_SFTRST
//-------------------------------------------------------------------------
#define BFV_TIMER_CFG_STATUS_SFTRST_NOW                                 0x1

#define REG_TIMER_CFG_STATUS           (*(volatile reg_timer_cfg_status_t*)((TIMER_BASE_ADDRESS + 0x0)))
#define REG_TIMER_CFG_STATUS_ADDR      (TIMER_BASE_ADDRESS + 0x0)
#define BP_TIMER_CFG_STATUS_RSVD0                                         6
#define BM_TIMER_CFG_STATUS_RSVD0                                0xFFFFFFC0
#define BP_TIMER_CFG_STATUS_FLAG                                          5
#define BM_TIMER_CFG_STATUS_FLAG                                 0x00000020
#define BP_TIMER_CFG_STATUS_RSVD1                                         3
#define BM_TIMER_CFG_STATUS_RSVD1                                0x00000018
#define BP_TIMER_CFG_STATUS_ENABLE_CAPTURE                                2
#define BM_TIMER_CFG_STATUS_ENABLE_CAPTURE                       0x00000004
#define BP_TIMER_CFG_STATUS_CLK_EN_OVR                                    1
#define BM_TIMER_CFG_STATUS_CLK_EN_OVR                           0x00000002
#define BP_TIMER_CFG_STATUS_SFTRST                                        0
#define BM_TIMER_CFG_STATUS_SFTRST                               0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_counter_lo_u
{
  uint32_t V;
  struct reg_timer_counter_lo_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_timer_counter_lo_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_COUNTER_LO           (*(volatile reg_timer_counter_lo_t*)((TIMER_BASE_ADDRESS + 0x8)))
#define REG_TIMER_COUNTER_LO_ADDR      (TIMER_BASE_ADDRESS + 0x8)
#define BP_TIMER_COUNTER_LO_VALUE                                         0
#define BM_TIMER_COUNTER_LO_VALUE                                0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_counter_hi_u
{
  uint32_t V;
  struct reg_timer_counter_hi_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_timer_counter_hi_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_COUNTER_HI           (*(volatile reg_timer_counter_hi_t*)((TIMER_BASE_ADDRESS + 0xC)))
#define REG_TIMER_COUNTER_HI_ADDR      (TIMER_BASE_ADDRESS + 0xC)
#define BP_TIMER_COUNTER_HI_VALUE                                         0
#define BM_TIMER_COUNTER_HI_VALUE                                0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_debug_ctl_u
{
  uint32_t V;
  struct reg_timer_debug_ctl_s
  {
    uint32_t OPERATION           :1;
    uint32_t MODE                :1;
    uint32_t SET2MAX_LO          :1;
    uint32_t SET2MAX_HI          :1;
    uint32_t IRQ2NVICA           :1;
    uint32_t IRQ2NVICB           :1;
    uint32_t COLLECTOR           :1;
    uint32_t RSVD0               :25;
  }BF;
} reg_timer_debug_ctl_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for TIMER_DEBUG_CTL_MODE
//-------------------------------------------------------------------------
#define BFV_TIMER_DEBUG_CTL_MODE_ENABLE                                 0x1
#define BFV_TIMER_DEBUG_CTL_MODE_DISABLE                                0x0

//-------------------------------------------------------------------------
// field value definitions for TIMER_DEBUG_CTL_OPERATION
//-------------------------------------------------------------------------
#define BFV_TIMER_DEBUG_CTL_OPERATION_RUN                               0x1
#define BFV_TIMER_DEBUG_CTL_OPERATION_STOP                              0x0

#define REG_TIMER_DEBUG_CTL           (*(volatile reg_timer_debug_ctl_t*)((TIMER_BASE_ADDRESS + 0x10)))
#define REG_TIMER_DEBUG_CTL_ADDR      (TIMER_BASE_ADDRESS + 0x10)
#define BP_TIMER_DEBUG_CTL_RSVD0                                          7
#define BM_TIMER_DEBUG_CTL_RSVD0                                 0xFFFFFF80
#define BP_TIMER_DEBUG_CTL_COLLECTOR                                      6
#define BM_TIMER_DEBUG_CTL_COLLECTOR                             0x00000040
#define BP_TIMER_DEBUG_CTL_IRQ2NVICB                                      5
#define BM_TIMER_DEBUG_CTL_IRQ2NVICB                             0x00000020
#define BP_TIMER_DEBUG_CTL_IRQ2NVICA                                      4
#define BM_TIMER_DEBUG_CTL_IRQ2NVICA                             0x00000010
#define BP_TIMER_DEBUG_CTL_SET2MAX_HI                                     3
#define BM_TIMER_DEBUG_CTL_SET2MAX_HI                            0x00000008
#define BP_TIMER_DEBUG_CTL_SET2MAX_LO                                     2
#define BM_TIMER_DEBUG_CTL_SET2MAX_LO                            0x00000004
#define BP_TIMER_DEBUG_CTL_MODE                                           1
#define BM_TIMER_DEBUG_CTL_MODE                                  0x00000002
#define BP_TIMER_DEBUG_CTL_OPERATION                                      0
#define BM_TIMER_DEBUG_CTL_OPERATION                             0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_debug_read_only_u
{
  uint32_t V;
  struct reg_timer_debug_read_only_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_timer_debug_read_only_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_DEBUG_READ_ONLY           (*(volatile reg_timer_debug_read_only_t*)((TIMER_BASE_ADDRESS + 0x14)))
#define REG_TIMER_DEBUG_READ_ONLY_ADDR      (TIMER_BASE_ADDRESS + 0x14)
#define BP_TIMER_DEBUG_READ_ONLY_VALUE                                    0
#define BM_TIMER_DEBUG_READ_ONLY_VALUE                           0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_capture_lo_u
{
  uint32_t V;
  struct reg_timer_capture_lo_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_timer_capture_lo_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_CAPTURE_LO           (*(volatile reg_timer_capture_lo_t*)((TIMER_BASE_ADDRESS + 0x18)))
#define REG_TIMER_CAPTURE_LO_ADDR      (TIMER_BASE_ADDRESS + 0x18)
#define BP_TIMER_CAPTURE_LO_VALUE                                         0
#define BM_TIMER_CAPTURE_LO_VALUE                                0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_capture_hi_u
{
  uint32_t V;
  struct reg_timer_capture_hi_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_timer_capture_hi_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_CAPTURE_HI           (*(volatile reg_timer_capture_hi_t*)((TIMER_BASE_ADDRESS + 0x1C)))
#define REG_TIMER_CAPTURE_HI_ADDR      (TIMER_BASE_ADDRESS + 0x1C)
#define BP_TIMER_CAPTURE_HI_VALUE                                         0
#define BM_TIMER_CAPTURE_HI_VALUE                                0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_comparea_u
{
  uint32_t V;
  struct reg_timer_comparea_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_timer_comparea_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_COMPAREA           (*(volatile reg_timer_comparea_t*)((TIMER_BASE_ADDRESS + 0x20)))
#define REG_TIMER_COMPAREA_ADDR      (TIMER_BASE_ADDRESS + 0x20)
#define BP_TIMER_COMPAREA_VALUE                                           0
#define BM_TIMER_COMPAREA_VALUE                                  0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_compareb_u
{
  uint32_t V;
  struct reg_timer_compareb_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_timer_compareb_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_COMPAREB           (*(volatile reg_timer_compareb_t*)((TIMER_BASE_ADDRESS + 0x24)))
#define REG_TIMER_COMPAREB_ADDR      (TIMER_BASE_ADDRESS + 0x24)
#define BP_TIMER_COMPAREB_VALUE                                           0
#define BM_TIMER_COMPAREB_VALUE                                  0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_comparec_u
{
  uint32_t V;
  struct reg_timer_comparec_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_timer_comparec_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_COMPAREC           (*(volatile reg_timer_comparec_t*)((TIMER_BASE_ADDRESS + 0x28)))
#define REG_TIMER_COMPAREC_ADDR      (TIMER_BASE_ADDRESS + 0x28)
#define BP_TIMER_COMPAREC_VALUE                                           0
#define BM_TIMER_COMPAREC_VALUE                                  0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_compared_u
{
  uint32_t V;
  struct reg_timer_compared_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_timer_compared_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_COMPARED           (*(volatile reg_timer_compared_t*)((TIMER_BASE_ADDRESS + 0x2C)))
#define REG_TIMER_COMPARED_ADDR      (TIMER_BASE_ADDRESS + 0x2C)
#define BP_TIMER_COMPARED_VALUE                                           0
#define BM_TIMER_COMPARED_VALUE                                  0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_0_int_enable_u
{
  uint32_t V;
  struct reg_timer_0_int_enable_s
  {
    uint32_t CMPA                :1;
    uint32_t CMPB                :1;
    uint32_t CMPC                :1;
    uint32_t CMPD                :1;
    uint32_t CAPTURED            :1;
    uint32_t LO_OVERFLOW         :1;
    uint32_t HI_OVERFLOW         :1;
    uint32_t RSVD0               :25;
  }BF;
} reg_timer_0_int_enable_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_0_INT_ENABLE           (*(volatile reg_timer_0_int_enable_t*)((TIMER_BASE_ADDRESS + 0x30)))
#define REG_TIMER_0_INT_ENABLE_ADDR      (TIMER_BASE_ADDRESS + 0x30)
#define BP_TIMER_0_INT_ENABLE_RSVD0                                       7
#define BM_TIMER_0_INT_ENABLE_RSVD0                              0xFFFFFF80
#define BP_TIMER_0_INT_ENABLE_HI_OVERFLOW                                 6
#define BM_TIMER_0_INT_ENABLE_HI_OVERFLOW                        0x00000040
#define BP_TIMER_0_INT_ENABLE_LO_OVERFLOW                                 5
#define BM_TIMER_0_INT_ENABLE_LO_OVERFLOW                        0x00000020
#define BP_TIMER_0_INT_ENABLE_CAPTURED                                    4
#define BM_TIMER_0_INT_ENABLE_CAPTURED                           0x00000010
#define BP_TIMER_0_INT_ENABLE_CMPD                                        3
#define BM_TIMER_0_INT_ENABLE_CMPD                               0x00000008
#define BP_TIMER_0_INT_ENABLE_CMPC                                        2
#define BM_TIMER_0_INT_ENABLE_CMPC                               0x00000004
#define BP_TIMER_0_INT_ENABLE_CMPB                                        1
#define BM_TIMER_0_INT_ENABLE_CMPB                               0x00000002
#define BP_TIMER_0_INT_ENABLE_CMPA                                        0
#define BM_TIMER_0_INT_ENABLE_CMPA                               0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_0_int_enable_set_u
{
  uint32_t V;
  struct reg_timer_0_int_enable_set_s
  {
    uint32_t CMPA                :1;
    uint32_t CMPB                :1;
    uint32_t CMPC                :1;
    uint32_t CMPD                :1;
    uint32_t CAPTURED            :1;
    uint32_t LO_OVERFLOW         :1;
    uint32_t HI_OVERFLOW         :1;
    uint32_t RSVD0               :25;
  }BF;
} reg_timer_0_int_enable_set_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_0_INT_ENABLE_SET           (*(volatile reg_timer_0_int_enable_set_t*)((TIMER_BASE_ADDRESS + 0x34)))
#define REG_TIMER_0_INT_ENABLE_SET_ADDR      (TIMER_BASE_ADDRESS + 0x34)
#define BP_TIMER_0_INT_ENABLE_SET_RSVD0                                   7
#define BM_TIMER_0_INT_ENABLE_SET_RSVD0                          0xFFFFFF80
#define BP_TIMER_0_INT_ENABLE_SET_HI_OVERFLOW                             6
#define BM_TIMER_0_INT_ENABLE_SET_HI_OVERFLOW                    0x00000040
#define BP_TIMER_0_INT_ENABLE_SET_LO_OVERFLOW                             5
#define BM_TIMER_0_INT_ENABLE_SET_LO_OVERFLOW                    0x00000020
#define BP_TIMER_0_INT_ENABLE_SET_CAPTURED                                4
#define BM_TIMER_0_INT_ENABLE_SET_CAPTURED                       0x00000010
#define BP_TIMER_0_INT_ENABLE_SET_CMPD                                    3
#define BM_TIMER_0_INT_ENABLE_SET_CMPD                           0x00000008
#define BP_TIMER_0_INT_ENABLE_SET_CMPC                                    2
#define BM_TIMER_0_INT_ENABLE_SET_CMPC                           0x00000004
#define BP_TIMER_0_INT_ENABLE_SET_CMPB                                    1
#define BM_TIMER_0_INT_ENABLE_SET_CMPB                           0x00000002
#define BP_TIMER_0_INT_ENABLE_SET_CMPA                                    0
#define BM_TIMER_0_INT_ENABLE_SET_CMPA                           0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_0_int_enable_clr_u
{
  uint32_t V;
  struct reg_timer_0_int_enable_clr_s
  {
    uint32_t CMPA                :1;
    uint32_t CMPB                :1;
    uint32_t CMPC                :1;
    uint32_t CMPD                :1;
    uint32_t CAPTURED            :1;
    uint32_t LO_OVERFLOW         :1;
    uint32_t HI_OVERFLOW         :1;
    uint32_t RSVD0               :25;
  }BF;
} reg_timer_0_int_enable_clr_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_0_INT_ENABLE_CLR           (*(volatile reg_timer_0_int_enable_clr_t*)((TIMER_BASE_ADDRESS + 0x38)))
#define REG_TIMER_0_INT_ENABLE_CLR_ADDR      (TIMER_BASE_ADDRESS + 0x38)
#define BP_TIMER_0_INT_ENABLE_CLR_RSVD0                                   7
#define BM_TIMER_0_INT_ENABLE_CLR_RSVD0                          0xFFFFFF80
#define BP_TIMER_0_INT_ENABLE_CLR_HI_OVERFLOW                             6
#define BM_TIMER_0_INT_ENABLE_CLR_HI_OVERFLOW                    0x00000040
#define BP_TIMER_0_INT_ENABLE_CLR_LO_OVERFLOW                             5
#define BM_TIMER_0_INT_ENABLE_CLR_LO_OVERFLOW                    0x00000020
#define BP_TIMER_0_INT_ENABLE_CLR_CAPTURED                                4
#define BM_TIMER_0_INT_ENABLE_CLR_CAPTURED                       0x00000010
#define BP_TIMER_0_INT_ENABLE_CLR_CMPD                                    3
#define BM_TIMER_0_INT_ENABLE_CLR_CMPD                           0x00000008
#define BP_TIMER_0_INT_ENABLE_CLR_CMPC                                    2
#define BM_TIMER_0_INT_ENABLE_CLR_CMPC                           0x00000004
#define BP_TIMER_0_INT_ENABLE_CLR_CMPB                                    1
#define BM_TIMER_0_INT_ENABLE_CLR_CMPB                           0x00000002
#define BP_TIMER_0_INT_ENABLE_CLR_CMPA                                    0
#define BM_TIMER_0_INT_ENABLE_CLR_CMPA                           0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_0_int_enable_tog_u
{
  uint32_t V;
  struct reg_timer_0_int_enable_tog_s
  {
    uint32_t CMPA                :1;
    uint32_t CMPB                :1;
    uint32_t CMPC                :1;
    uint32_t CMPD                :1;
    uint32_t CAPTURED            :1;
    uint32_t LO_OVERFLOW         :1;
    uint32_t HI_OVERFLOW         :1;
    uint32_t RSVD0               :25;
  }BF;
} reg_timer_0_int_enable_tog_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_0_INT_ENABLE_TOG           (*(volatile reg_timer_0_int_enable_tog_t*)((TIMER_BASE_ADDRESS + 0x3C)))
#define REG_TIMER_0_INT_ENABLE_TOG_ADDR      (TIMER_BASE_ADDRESS + 0x3C)
#define BP_TIMER_0_INT_ENABLE_TOG_RSVD0                                   7
#define BM_TIMER_0_INT_ENABLE_TOG_RSVD0                          0xFFFFFF80
#define BP_TIMER_0_INT_ENABLE_TOG_HI_OVERFLOW                             6
#define BM_TIMER_0_INT_ENABLE_TOG_HI_OVERFLOW                    0x00000040
#define BP_TIMER_0_INT_ENABLE_TOG_LO_OVERFLOW                             5
#define BM_TIMER_0_INT_ENABLE_TOG_LO_OVERFLOW                    0x00000020
#define BP_TIMER_0_INT_ENABLE_TOG_CAPTURED                                4
#define BM_TIMER_0_INT_ENABLE_TOG_CAPTURED                       0x00000010
#define BP_TIMER_0_INT_ENABLE_TOG_CMPD                                    3
#define BM_TIMER_0_INT_ENABLE_TOG_CMPD                           0x00000008
#define BP_TIMER_0_INT_ENABLE_TOG_CMPC                                    2
#define BM_TIMER_0_INT_ENABLE_TOG_CMPC                           0x00000004
#define BP_TIMER_0_INT_ENABLE_TOG_CMPB                                    1
#define BM_TIMER_0_INT_ENABLE_TOG_CMPB                           0x00000002
#define BP_TIMER_0_INT_ENABLE_TOG_CMPA                                    0
#define BM_TIMER_0_INT_ENABLE_TOG_CMPA                           0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_1_int_enable_u
{
  uint32_t V;
  struct reg_timer_1_int_enable_s
  {
    uint32_t CMPA                :1;
    uint32_t CMPB                :1;
    uint32_t CMPC                :1;
    uint32_t CMPD                :1;
    uint32_t CAPTURED            :1;
    uint32_t LO_OVERFLOW         :1;
    uint32_t HI_OVERFLOW         :1;
    uint32_t RSVD0               :25;
  }BF;
} reg_timer_1_int_enable_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_1_INT_ENABLE           (*(volatile reg_timer_1_int_enable_t*)((TIMER_BASE_ADDRESS + 0x40)))
#define REG_TIMER_1_INT_ENABLE_ADDR      (TIMER_BASE_ADDRESS + 0x40)
#define BP_TIMER_1_INT_ENABLE_RSVD0                                       7
#define BM_TIMER_1_INT_ENABLE_RSVD0                              0xFFFFFF80
#define BP_TIMER_1_INT_ENABLE_HI_OVERFLOW                                 6
#define BM_TIMER_1_INT_ENABLE_HI_OVERFLOW                        0x00000040
#define BP_TIMER_1_INT_ENABLE_LO_OVERFLOW                                 5
#define BM_TIMER_1_INT_ENABLE_LO_OVERFLOW                        0x00000020
#define BP_TIMER_1_INT_ENABLE_CAPTURED                                    4
#define BM_TIMER_1_INT_ENABLE_CAPTURED                           0x00000010
#define BP_TIMER_1_INT_ENABLE_CMPD                                        3
#define BM_TIMER_1_INT_ENABLE_CMPD                               0x00000008
#define BP_TIMER_1_INT_ENABLE_CMPC                                        2
#define BM_TIMER_1_INT_ENABLE_CMPC                               0x00000004
#define BP_TIMER_1_INT_ENABLE_CMPB                                        1
#define BM_TIMER_1_INT_ENABLE_CMPB                               0x00000002
#define BP_TIMER_1_INT_ENABLE_CMPA                                        0
#define BM_TIMER_1_INT_ENABLE_CMPA                               0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_1_int_enable_set_u
{
  uint32_t V;
  struct reg_timer_1_int_enable_set_s
  {
    uint32_t CMPA                :1;
    uint32_t CMPB                :1;
    uint32_t CMPC                :1;
    uint32_t CMPD                :1;
    uint32_t CAPTURED            :1;
    uint32_t LO_OVERFLOW         :1;
    uint32_t HI_OVERFLOW         :1;
    uint32_t RSVD0               :25;
  }BF;
} reg_timer_1_int_enable_set_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_1_INT_ENABLE_SET           (*(volatile reg_timer_1_int_enable_set_t*)((TIMER_BASE_ADDRESS + 0x44)))
#define REG_TIMER_1_INT_ENABLE_SET_ADDR      (TIMER_BASE_ADDRESS + 0x44)
#define BP_TIMER_1_INT_ENABLE_SET_RSVD0                                   7
#define BM_TIMER_1_INT_ENABLE_SET_RSVD0                          0xFFFFFF80
#define BP_TIMER_1_INT_ENABLE_SET_HI_OVERFLOW                             6
#define BM_TIMER_1_INT_ENABLE_SET_HI_OVERFLOW                    0x00000040
#define BP_TIMER_1_INT_ENABLE_SET_LO_OVERFLOW                             5
#define BM_TIMER_1_INT_ENABLE_SET_LO_OVERFLOW                    0x00000020
#define BP_TIMER_1_INT_ENABLE_SET_CAPTURED                                4
#define BM_TIMER_1_INT_ENABLE_SET_CAPTURED                       0x00000010
#define BP_TIMER_1_INT_ENABLE_SET_CMPD                                    3
#define BM_TIMER_1_INT_ENABLE_SET_CMPD                           0x00000008
#define BP_TIMER_1_INT_ENABLE_SET_CMPC                                    2
#define BM_TIMER_1_INT_ENABLE_SET_CMPC                           0x00000004
#define BP_TIMER_1_INT_ENABLE_SET_CMPB                                    1
#define BM_TIMER_1_INT_ENABLE_SET_CMPB                           0x00000002
#define BP_TIMER_1_INT_ENABLE_SET_CMPA                                    0
#define BM_TIMER_1_INT_ENABLE_SET_CMPA                           0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_1_int_enable_clr_u
{
  uint32_t V;
  struct reg_timer_1_int_enable_clr_s
  {
    uint32_t CMPA                :1;
    uint32_t CMPB                :1;
    uint32_t CMPC                :1;
    uint32_t CMPD                :1;
    uint32_t CAPTURED            :1;
    uint32_t LO_OVERFLOW         :1;
    uint32_t HI_OVERFLOW         :1;
    uint32_t RSVD0               :25;
  }BF;
} reg_timer_1_int_enable_clr_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_1_INT_ENABLE_CLR           (*(volatile reg_timer_1_int_enable_clr_t*)((TIMER_BASE_ADDRESS + 0x48)))
#define REG_TIMER_1_INT_ENABLE_CLR_ADDR      (TIMER_BASE_ADDRESS + 0x48)
#define BP_TIMER_1_INT_ENABLE_CLR_RSVD0                                   7
#define BM_TIMER_1_INT_ENABLE_CLR_RSVD0                          0xFFFFFF80
#define BP_TIMER_1_INT_ENABLE_CLR_HI_OVERFLOW                             6
#define BM_TIMER_1_INT_ENABLE_CLR_HI_OVERFLOW                    0x00000040
#define BP_TIMER_1_INT_ENABLE_CLR_LO_OVERFLOW                             5
#define BM_TIMER_1_INT_ENABLE_CLR_LO_OVERFLOW                    0x00000020
#define BP_TIMER_1_INT_ENABLE_CLR_CAPTURED                                4
#define BM_TIMER_1_INT_ENABLE_CLR_CAPTURED                       0x00000010
#define BP_TIMER_1_INT_ENABLE_CLR_CMPD                                    3
#define BM_TIMER_1_INT_ENABLE_CLR_CMPD                           0x00000008
#define BP_TIMER_1_INT_ENABLE_CLR_CMPC                                    2
#define BM_TIMER_1_INT_ENABLE_CLR_CMPC                           0x00000004
#define BP_TIMER_1_INT_ENABLE_CLR_CMPB                                    1
#define BM_TIMER_1_INT_ENABLE_CLR_CMPB                           0x00000002
#define BP_TIMER_1_INT_ENABLE_CLR_CMPA                                    0
#define BM_TIMER_1_INT_ENABLE_CLR_CMPA                           0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_1_int_enable_tog_u
{
  uint32_t V;
  struct reg_timer_1_int_enable_tog_s
  {
    uint32_t CMPA                :1;
    uint32_t CMPB                :1;
    uint32_t CMPC                :1;
    uint32_t CMPD                :1;
    uint32_t CAPTURED            :1;
    uint32_t LO_OVERFLOW         :1;
    uint32_t HI_OVERFLOW         :1;
    uint32_t RSVD0               :25;
  }BF;
} reg_timer_1_int_enable_tog_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_1_INT_ENABLE_TOG           (*(volatile reg_timer_1_int_enable_tog_t*)((TIMER_BASE_ADDRESS + 0x4C)))
#define REG_TIMER_1_INT_ENABLE_TOG_ADDR      (TIMER_BASE_ADDRESS + 0x4C)
#define BP_TIMER_1_INT_ENABLE_TOG_RSVD0                                   7
#define BM_TIMER_1_INT_ENABLE_TOG_RSVD0                          0xFFFFFF80
#define BP_TIMER_1_INT_ENABLE_TOG_HI_OVERFLOW                             6
#define BM_TIMER_1_INT_ENABLE_TOG_HI_OVERFLOW                    0x00000040
#define BP_TIMER_1_INT_ENABLE_TOG_LO_OVERFLOW                             5
#define BM_TIMER_1_INT_ENABLE_TOG_LO_OVERFLOW                    0x00000020
#define BP_TIMER_1_INT_ENABLE_TOG_CAPTURED                                4
#define BM_TIMER_1_INT_ENABLE_TOG_CAPTURED                       0x00000010
#define BP_TIMER_1_INT_ENABLE_TOG_CMPD                                    3
#define BM_TIMER_1_INT_ENABLE_TOG_CMPD                           0x00000008
#define BP_TIMER_1_INT_ENABLE_TOG_CMPC                                    2
#define BM_TIMER_1_INT_ENABLE_TOG_CMPC                           0x00000004
#define BP_TIMER_1_INT_ENABLE_TOG_CMPB                                    1
#define BM_TIMER_1_INT_ENABLE_TOG_CMPB                           0x00000002
#define BP_TIMER_1_INT_ENABLE_TOG_CMPA                                    0
#define BM_TIMER_1_INT_ENABLE_TOG_CMPA                           0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_int_status_u
{
  uint32_t V;
  struct reg_timer_int_status_s
  {
    uint32_t CMPA                :1;
    uint32_t CMPB                :1;
    uint32_t CMPC                :1;
    uint32_t CMPD                :1;
    uint32_t CAPTURED            :1;
    uint32_t LO_OVERFLOW         :1;
    uint32_t HI_OVERFLOW         :1;
    uint32_t RSVD0               :25;
  }BF;
} reg_timer_int_status_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_INT_STATUS           (*(volatile reg_timer_int_status_t*)((TIMER_BASE_ADDRESS + 0x50)))
#define REG_TIMER_INT_STATUS_ADDR      (TIMER_BASE_ADDRESS + 0x50)
#define BP_TIMER_INT_STATUS_RSVD0                                         7
#define BM_TIMER_INT_STATUS_RSVD0                                0xFFFFFF80
#define BP_TIMER_INT_STATUS_HI_OVERFLOW                                   6
#define BM_TIMER_INT_STATUS_HI_OVERFLOW                          0x00000040
#define BP_TIMER_INT_STATUS_LO_OVERFLOW                                   5
#define BM_TIMER_INT_STATUS_LO_OVERFLOW                          0x00000020
#define BP_TIMER_INT_STATUS_CAPTURED                                      4
#define BM_TIMER_INT_STATUS_CAPTURED                             0x00000010
#define BP_TIMER_INT_STATUS_CMPD                                          3
#define BM_TIMER_INT_STATUS_CMPD                                 0x00000008
#define BP_TIMER_INT_STATUS_CMPC                                          2
#define BM_TIMER_INT_STATUS_CMPC                                 0x00000004
#define BP_TIMER_INT_STATUS_CMPB                                          1
#define BM_TIMER_INT_STATUS_CMPB                                 0x00000002
#define BP_TIMER_INT_STATUS_CMPA                                          0
#define BM_TIMER_INT_STATUS_CMPA                                 0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_int_status_set_u
{
  uint32_t V;
  struct reg_timer_int_status_set_s
  {
    uint32_t CMPA                :1;
    uint32_t CMPB                :1;
    uint32_t CMPC                :1;
    uint32_t CMPD                :1;
    uint32_t CAPTURED            :1;
    uint32_t LO_OVERFLOW         :1;
    uint32_t HI_OVERFLOW         :1;
    uint32_t RSVD0               :25;
  }BF;
} reg_timer_int_status_set_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_INT_STATUS_SET           (*(volatile reg_timer_int_status_set_t*)((TIMER_BASE_ADDRESS + 0x54)))
#define REG_TIMER_INT_STATUS_SET_ADDR      (TIMER_BASE_ADDRESS + 0x54)
#define BP_TIMER_INT_STATUS_SET_RSVD0                                     7
#define BM_TIMER_INT_STATUS_SET_RSVD0                            0xFFFFFF80
#define BP_TIMER_INT_STATUS_SET_HI_OVERFLOW                               6
#define BM_TIMER_INT_STATUS_SET_HI_OVERFLOW                      0x00000040
#define BP_TIMER_INT_STATUS_SET_LO_OVERFLOW                               5
#define BM_TIMER_INT_STATUS_SET_LO_OVERFLOW                      0x00000020
#define BP_TIMER_INT_STATUS_SET_CAPTURED                                  4
#define BM_TIMER_INT_STATUS_SET_CAPTURED                         0x00000010
#define BP_TIMER_INT_STATUS_SET_CMPD                                      3
#define BM_TIMER_INT_STATUS_SET_CMPD                             0x00000008
#define BP_TIMER_INT_STATUS_SET_CMPC                                      2
#define BM_TIMER_INT_STATUS_SET_CMPC                             0x00000004
#define BP_TIMER_INT_STATUS_SET_CMPB                                      1
#define BM_TIMER_INT_STATUS_SET_CMPB                             0x00000002
#define BP_TIMER_INT_STATUS_SET_CMPA                                      0
#define BM_TIMER_INT_STATUS_SET_CMPA                             0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_int_status_clr_u
{
  uint32_t V;
  struct reg_timer_int_status_clr_s
  {
    uint32_t CMPA                :1;
    uint32_t CMPB                :1;
    uint32_t CMPC                :1;
    uint32_t CMPD                :1;
    uint32_t CAPTURED            :1;
    uint32_t LO_OVERFLOW         :1;
    uint32_t HI_OVERFLOW         :1;
    uint32_t RSVD0               :25;
  }BF;
} reg_timer_int_status_clr_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_INT_STATUS_CLR           (*(volatile reg_timer_int_status_clr_t*)((TIMER_BASE_ADDRESS + 0x58)))
#define REG_TIMER_INT_STATUS_CLR_ADDR      (TIMER_BASE_ADDRESS + 0x58)
#define BP_TIMER_INT_STATUS_CLR_RSVD0                                     7
#define BM_TIMER_INT_STATUS_CLR_RSVD0                            0xFFFFFF80
#define BP_TIMER_INT_STATUS_CLR_HI_OVERFLOW                               6
#define BM_TIMER_INT_STATUS_CLR_HI_OVERFLOW                      0x00000040
#define BP_TIMER_INT_STATUS_CLR_LO_OVERFLOW                               5
#define BM_TIMER_INT_STATUS_CLR_LO_OVERFLOW                      0x00000020
#define BP_TIMER_INT_STATUS_CLR_CAPTURED                                  4
#define BM_TIMER_INT_STATUS_CLR_CAPTURED                         0x00000010
#define BP_TIMER_INT_STATUS_CLR_CMPD                                      3
#define BM_TIMER_INT_STATUS_CLR_CMPD                             0x00000008
#define BP_TIMER_INT_STATUS_CLR_CMPC                                      2
#define BM_TIMER_INT_STATUS_CLR_CMPC                             0x00000004
#define BP_TIMER_INT_STATUS_CLR_CMPB                                      1
#define BM_TIMER_INT_STATUS_CLR_CMPB                             0x00000002
#define BP_TIMER_INT_STATUS_CLR_CMPA                                      0
#define BM_TIMER_INT_STATUS_CLR_CMPA                             0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_timer_int_status_tog_u
{
  uint32_t V;
  struct reg_timer_int_status_tog_s
  {
    uint32_t CMPA                :1;
    uint32_t CMPB                :1;
    uint32_t CMPC                :1;
    uint32_t CMPD                :1;
    uint32_t CAPTURED            :1;
    uint32_t LO_OVERFLOW         :1;
    uint32_t HI_OVERFLOW         :1;
    uint32_t RSVD0               :25;
  }BF;
} reg_timer_int_status_tog_t;

#endif  // __LANGUAGE_ASM__

#define REG_TIMER_INT_STATUS_TOG           (*(volatile reg_timer_int_status_tog_t*)((TIMER_BASE_ADDRESS + 0x5C)))
#define REG_TIMER_INT_STATUS_TOG_ADDR      (TIMER_BASE_ADDRESS + 0x5C)
#define BP_TIMER_INT_STATUS_TOG_RSVD0                                     7
#define BM_TIMER_INT_STATUS_TOG_RSVD0                            0xFFFFFF80
#define BP_TIMER_INT_STATUS_TOG_HI_OVERFLOW                               6
#define BM_TIMER_INT_STATUS_TOG_HI_OVERFLOW                      0x00000040
#define BP_TIMER_INT_STATUS_TOG_LO_OVERFLOW                               5
#define BM_TIMER_INT_STATUS_TOG_LO_OVERFLOW                      0x00000020
#define BP_TIMER_INT_STATUS_TOG_CAPTURED                                  4
#define BM_TIMER_INT_STATUS_TOG_CAPTURED                         0x00000010
#define BP_TIMER_INT_STATUS_TOG_CMPD                                      3
#define BM_TIMER_INT_STATUS_TOG_CMPD                             0x00000008
#define BP_TIMER_INT_STATUS_TOG_CMPC                                      2
#define BM_TIMER_INT_STATUS_TOG_CMPC                             0x00000004
#define BP_TIMER_INT_STATUS_TOG_CMPB                                      1
#define BM_TIMER_INT_STATUS_TOG_CMPB                             0x00000002
#define BP_TIMER_INT_STATUS_TOG_CMPA                                      0
#define BM_TIMER_INT_STATUS_TOG_CMPA                             0x00000001

#define GPIO8_BASE_ADDRESS 0x50030000


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_cfg_status_u
{
  uint32_t V;
  struct reg_gpio8_cfg_status_s
  {
    uint32_t SFTRST              :1;
    uint32_t RSVD0               :15;
    uint32_t IRQ2NVICA           :1;
    uint32_t IRQ2NVICB           :1;
    uint32_t CLK_EN_OVR          :1;
    uint32_t RSVD1               :13;
  }BF;
} reg_gpio8_cfg_status_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for GPIO8_CFG_STATUS_CLK_EN_OVR
//-------------------------------------------------------------------------
#define BFV_GPIO8_CFG_STATUS_CLK_EN_OVR_ENABLE                          0x1
#define BFV_GPIO8_CFG_STATUS_CLK_EN_OVR_DISABLE                         0x0

//-------------------------------------------------------------------------
// field value definitions for GPIO8_CFG_STATUS_SFTRST
//-------------------------------------------------------------------------
#define BFV_GPIO8_CFG_STATUS_SFTRST_RESET                               0x1

#define REG_GPIO8_CFG_STATUS           (*(volatile reg_gpio8_cfg_status_t*)((GPIO8_BASE_ADDRESS + 0x0)))
#define REG_GPIO8_CFG_STATUS_ADDR      (GPIO8_BASE_ADDRESS + 0x0)
#define BP_GPIO8_CFG_STATUS_RSVD0                                        19
#define BM_GPIO8_CFG_STATUS_RSVD0                                0xFFF80000
#define BP_GPIO8_CFG_STATUS_CLK_EN_OVR                                   18
#define BM_GPIO8_CFG_STATUS_CLK_EN_OVR                           0x00040000
#define BP_GPIO8_CFG_STATUS_IRQ2NVICB                                    17
#define BM_GPIO8_CFG_STATUS_IRQ2NVICB                            0x00020000
#define BP_GPIO8_CFG_STATUS_IRQ2NVICA                                    16
#define BM_GPIO8_CFG_STATUS_IRQ2NVICA                            0x00010000
#define BP_GPIO8_CFG_STATUS_RSVD1                                         1
#define BM_GPIO8_CFG_STATUS_RSVD1                                0x0000FFFE
#define BP_GPIO8_CFG_STATUS_SFTRST                                        0
#define BM_GPIO8_CFG_STATUS_SFTRST                               0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_debug0_read_only_u
{
  uint32_t V;
  struct reg_gpio8_debug0_read_only_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_debug0_read_only_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_DEBUG0_READ_ONLY           (*(volatile reg_gpio8_debug0_read_only_t*)((GPIO8_BASE_ADDRESS + 0x4)))
#define REG_GPIO8_DEBUG0_READ_ONLY_ADDR      (GPIO8_BASE_ADDRESS + 0x4)
#define BP_GPIO8_DEBUG0_READ_ONLY_VALUE                                   0
#define BM_GPIO8_DEBUG0_READ_ONLY_VALUE                          0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_debug1_read_only_u
{
  uint32_t V;
  struct reg_gpio8_debug1_read_only_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_debug1_read_only_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_DEBUG1_READ_ONLY           (*(volatile reg_gpio8_debug1_read_only_t*)((GPIO8_BASE_ADDRESS + 0x8)))
#define REG_GPIO8_DEBUG1_READ_ONLY_ADDR      (GPIO8_BASE_ADDRESS + 0x8)
#define BP_GPIO8_DEBUG1_READ_ONLY_VALUE                                   0
#define BM_GPIO8_DEBUG1_READ_ONLY_VALUE                          0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_polaritya_u
{
  uint32_t V;
  struct reg_gpio8_polaritya_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_polaritya_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_POLARITYA           (*(volatile reg_gpio8_polaritya_t*)((GPIO8_BASE_ADDRESS + 0xC)))
#define REG_GPIO8_POLARITYA_ADDR      (GPIO8_BASE_ADDRESS + 0xC)
#define BP_GPIO8_POLARITYA_VALUE                                          0
#define BM_GPIO8_POLARITYA_VALUE                                 0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_polaritya_set_u
{
  uint32_t V;
  struct reg_gpio8_polaritya_set_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_polaritya_set_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_POLARITYA_SET           (*(volatile reg_gpio8_polaritya_set_t*)((GPIO8_BASE_ADDRESS + 0x10)))
#define REG_GPIO8_POLARITYA_SET_ADDR      (GPIO8_BASE_ADDRESS + 0x10)
#define BP_GPIO8_POLARITYA_SET_VALUE                                      0
#define BM_GPIO8_POLARITYA_SET_VALUE                             0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_polaritya_clr_u
{
  uint32_t V;
  struct reg_gpio8_polaritya_clr_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_polaritya_clr_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_POLARITYA_CLR           (*(volatile reg_gpio8_polaritya_clr_t*)((GPIO8_BASE_ADDRESS + 0x14)))
#define REG_GPIO8_POLARITYA_CLR_ADDR      (GPIO8_BASE_ADDRESS + 0x14)
#define BP_GPIO8_POLARITYA_CLR_VALUE                                      0
#define BM_GPIO8_POLARITYA_CLR_VALUE                             0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_polaritya_tog_u
{
  uint32_t V;
  struct reg_gpio8_polaritya_tog_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_polaritya_tog_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_POLARITYA_TOG           (*(volatile reg_gpio8_polaritya_tog_t*)((GPIO8_BASE_ADDRESS + 0x18)))
#define REG_GPIO8_POLARITYA_TOG_ADDR      (GPIO8_BASE_ADDRESS + 0x18)
#define BP_GPIO8_POLARITYA_TOG_VALUE                                      0
#define BM_GPIO8_POLARITYA_TOG_VALUE                             0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_int_enablea_u
{
  uint32_t V;
  struct reg_gpio8_int_enablea_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_int_enablea_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_INT_ENABLEA           (*(volatile reg_gpio8_int_enablea_t*)((GPIO8_BASE_ADDRESS + 0x1C)))
#define REG_GPIO8_INT_ENABLEA_ADDR      (GPIO8_BASE_ADDRESS + 0x1C)
#define BP_GPIO8_INT_ENABLEA_VALUE                                        0
#define BM_GPIO8_INT_ENABLEA_VALUE                               0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_int_enablea_set_u
{
  uint32_t V;
  struct reg_gpio8_int_enablea_set_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_int_enablea_set_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_INT_ENABLEA_SET           (*(volatile reg_gpio8_int_enablea_set_t*)((GPIO8_BASE_ADDRESS + 0x20)))
#define REG_GPIO8_INT_ENABLEA_SET_ADDR      (GPIO8_BASE_ADDRESS + 0x20)
#define BP_GPIO8_INT_ENABLEA_SET_VALUE                                    0
#define BM_GPIO8_INT_ENABLEA_SET_VALUE                           0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_int_enablea_clr_u
{
  uint32_t V;
  struct reg_gpio8_int_enablea_clr_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_int_enablea_clr_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_INT_ENABLEA_CLR           (*(volatile reg_gpio8_int_enablea_clr_t*)((GPIO8_BASE_ADDRESS + 0x24)))
#define REG_GPIO8_INT_ENABLEA_CLR_ADDR      (GPIO8_BASE_ADDRESS + 0x24)
#define BP_GPIO8_INT_ENABLEA_CLR_VALUE                                    0
#define BM_GPIO8_INT_ENABLEA_CLR_VALUE                           0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_int_statusa_u
{
  uint32_t V;
  struct reg_gpio8_int_statusa_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_int_statusa_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_INT_STATUSA           (*(volatile reg_gpio8_int_statusa_t*)((GPIO8_BASE_ADDRESS + 0x28)))
#define REG_GPIO8_INT_STATUSA_ADDR      (GPIO8_BASE_ADDRESS + 0x28)
#define BP_GPIO8_INT_STATUSA_VALUE                                        0
#define BM_GPIO8_INT_STATUSA_VALUE                               0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_int_statusa_set_u
{
  uint32_t V;
  struct reg_gpio8_int_statusa_set_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_int_statusa_set_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_INT_STATUSA_SET           (*(volatile reg_gpio8_int_statusa_set_t*)((GPIO8_BASE_ADDRESS + 0x2C)))
#define REG_GPIO8_INT_STATUSA_SET_ADDR      (GPIO8_BASE_ADDRESS + 0x2C)
#define BP_GPIO8_INT_STATUSA_SET_VALUE                                    0
#define BM_GPIO8_INT_STATUSA_SET_VALUE                           0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_int_statusa_clr_u
{
  uint32_t V;
  struct reg_gpio8_int_statusa_clr_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_int_statusa_clr_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_INT_STATUSA_CLR           (*(volatile reg_gpio8_int_statusa_clr_t*)((GPIO8_BASE_ADDRESS + 0x30)))
#define REG_GPIO8_INT_STATUSA_CLR_ADDR      (GPIO8_BASE_ADDRESS + 0x30)
#define BP_GPIO8_INT_STATUSA_CLR_VALUE                                    0
#define BM_GPIO8_INT_STATUSA_CLR_VALUE                           0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_polarityb_u
{
  uint32_t V;
  struct reg_gpio8_polarityb_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_polarityb_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_POLARITYB           (*(volatile reg_gpio8_polarityb_t*)((GPIO8_BASE_ADDRESS + 0x34)))
#define REG_GPIO8_POLARITYB_ADDR      (GPIO8_BASE_ADDRESS + 0x34)
#define BP_GPIO8_POLARITYB_VALUE                                          0
#define BM_GPIO8_POLARITYB_VALUE                                 0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_polarityb_set_u
{
  uint32_t V;
  struct reg_gpio8_polarityb_set_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_polarityb_set_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_POLARITYB_SET           (*(volatile reg_gpio8_polarityb_set_t*)((GPIO8_BASE_ADDRESS + 0x38)))
#define REG_GPIO8_POLARITYB_SET_ADDR      (GPIO8_BASE_ADDRESS + 0x38)
#define BP_GPIO8_POLARITYB_SET_VALUE                                      0
#define BM_GPIO8_POLARITYB_SET_VALUE                             0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_polarityb_clr_u
{
  uint32_t V;
  struct reg_gpio8_polarityb_clr_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_polarityb_clr_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_POLARITYB_CLR           (*(volatile reg_gpio8_polarityb_clr_t*)((GPIO8_BASE_ADDRESS + 0x3C)))
#define REG_GPIO8_POLARITYB_CLR_ADDR      (GPIO8_BASE_ADDRESS + 0x3C)
#define BP_GPIO8_POLARITYB_CLR_VALUE                                      0
#define BM_GPIO8_POLARITYB_CLR_VALUE                             0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_polarityb_tog_u
{
  uint32_t V;
  struct reg_gpio8_polarityb_tog_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_polarityb_tog_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_POLARITYB_TOG           (*(volatile reg_gpio8_polarityb_tog_t*)((GPIO8_BASE_ADDRESS + 0x40)))
#define REG_GPIO8_POLARITYB_TOG_ADDR      (GPIO8_BASE_ADDRESS + 0x40)
#define BP_GPIO8_POLARITYB_TOG_VALUE                                      0
#define BM_GPIO8_POLARITYB_TOG_VALUE                             0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_int_enableb_u
{
  uint32_t V;
  struct reg_gpio8_int_enableb_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_int_enableb_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_INT_ENABLEB           (*(volatile reg_gpio8_int_enableb_t*)((GPIO8_BASE_ADDRESS + 0x44)))
#define REG_GPIO8_INT_ENABLEB_ADDR      (GPIO8_BASE_ADDRESS + 0x44)
#define BP_GPIO8_INT_ENABLEB_VALUE                                        0
#define BM_GPIO8_INT_ENABLEB_VALUE                               0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_int_enableb_set_u
{
  uint32_t V;
  struct reg_gpio8_int_enableb_set_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_int_enableb_set_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_INT_ENABLEB_SET           (*(volatile reg_gpio8_int_enableb_set_t*)((GPIO8_BASE_ADDRESS + 0x48)))
#define REG_GPIO8_INT_ENABLEB_SET_ADDR      (GPIO8_BASE_ADDRESS + 0x48)
#define BP_GPIO8_INT_ENABLEB_SET_VALUE                                    0
#define BM_GPIO8_INT_ENABLEB_SET_VALUE                           0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_int_enableb_clr_u
{
  uint32_t V;
  struct reg_gpio8_int_enableb_clr_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_int_enableb_clr_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_INT_ENABLEB_CLR           (*(volatile reg_gpio8_int_enableb_clr_t*)((GPIO8_BASE_ADDRESS + 0x4C)))
#define REG_GPIO8_INT_ENABLEB_CLR_ADDR      (GPIO8_BASE_ADDRESS + 0x4C)
#define BP_GPIO8_INT_ENABLEB_CLR_VALUE                                    0
#define BM_GPIO8_INT_ENABLEB_CLR_VALUE                           0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_int_statusb_u
{
  uint32_t V;
  struct reg_gpio8_int_statusb_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_int_statusb_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_INT_STATUSB           (*(volatile reg_gpio8_int_statusb_t*)((GPIO8_BASE_ADDRESS + 0x50)))
#define REG_GPIO8_INT_STATUSB_ADDR      (GPIO8_BASE_ADDRESS + 0x50)
#define BP_GPIO8_INT_STATUSB_VALUE                                        0
#define BM_GPIO8_INT_STATUSB_VALUE                               0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_int_statusb_set_u
{
  uint32_t V;
  struct reg_gpio8_int_statusb_set_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_int_statusb_set_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_INT_STATUSB_SET           (*(volatile reg_gpio8_int_statusb_set_t*)((GPIO8_BASE_ADDRESS + 0x54)))
#define REG_GPIO8_INT_STATUSB_SET_ADDR      (GPIO8_BASE_ADDRESS + 0x54)
#define BP_GPIO8_INT_STATUSB_SET_VALUE                                    0
#define BM_GPIO8_INT_STATUSB_SET_VALUE                           0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_int_statusb_clr_u
{
  uint32_t V;
  struct reg_gpio8_int_statusb_clr_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_int_statusb_clr_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_INT_STATUSB_CLR           (*(volatile reg_gpio8_int_statusb_clr_t*)((GPIO8_BASE_ADDRESS + 0x58)))
#define REG_GPIO8_INT_STATUSB_CLR_ADDR      (GPIO8_BASE_ADDRESS + 0x58)
#define BP_GPIO8_INT_STATUSB_CLR_VALUE                                    0
#define BM_GPIO8_INT_STATUSB_CLR_VALUE                           0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_input_enable_u
{
  uint32_t V;
  struct reg_gpio8_input_enable_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_input_enable_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_INPUT_ENABLE           (*(volatile reg_gpio8_input_enable_t*)((GPIO8_BASE_ADDRESS + 0x5C)))
#define REG_GPIO8_INPUT_ENABLE_ADDR      (GPIO8_BASE_ADDRESS + 0x5C)
#define BP_GPIO8_INPUT_ENABLE_VALUE                                       0
#define BM_GPIO8_INPUT_ENABLE_VALUE                              0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_drive_high_u
{
  uint32_t V;
  struct reg_gpio8_drive_high_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_gpio8_drive_high_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_DRIVE_HIGH           (*(volatile reg_gpio8_drive_high_t*)((GPIO8_BASE_ADDRESS + 0x68)))
#define REG_GPIO8_DRIVE_HIGH_ADDR      (GPIO8_BASE_ADDRESS + 0x68)
#define BP_GPIO8_DRIVE_HIGH_VALUE                                         0
#define BM_GPIO8_DRIVE_HIGH_VALUE                                0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_capture_sel_u
{
  uint32_t V;
  struct reg_gpio8_capture_sel_s
  {
    uint32_t BIT                 :5;
    uint32_t ENABLE              :1;
    uint32_t POLARITY            :1;
    uint32_t RSVD0               :24;
    uint32_t COLLECTOR           :1;
  }BF;
} reg_gpio8_capture_sel_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_CAPTURE_SEL           (*(volatile reg_gpio8_capture_sel_t*)((GPIO8_BASE_ADDRESS + 0x6C)))
#define REG_GPIO8_CAPTURE_SEL_ADDR      (GPIO8_BASE_ADDRESS + 0x6C)
#define BP_GPIO8_CAPTURE_SEL_COLLECTOR                                   31
#define BM_GPIO8_CAPTURE_SEL_COLLECTOR                           0x80000000
#define BP_GPIO8_CAPTURE_SEL_RSVD0                                        7
#define BM_GPIO8_CAPTURE_SEL_RSVD0                               0x7FFFFF80
#define BP_GPIO8_CAPTURE_SEL_POLARITY                                     6
#define BM_GPIO8_CAPTURE_SEL_POLARITY                            0x00000040
#define BP_GPIO8_CAPTURE_SEL_ENABLE                                       5
#define BM_GPIO8_CAPTURE_SEL_ENABLE                              0x00000020
#define BP_GPIO8_CAPTURE_SEL_BIT                                          0
#define BM_GPIO8_CAPTURE_SEL_BIT                                 0x0000001F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_spi0_ctrl_u
{
  uint32_t V;
  struct reg_gpio8_spi0_ctrl_s
  {
    uint32_t SPI0_CLK_OEN        :1;
    uint32_t SPI0_CLK_DRIVE      :1;
    uint32_t SPI0_MOSI_OEN       :1;
    uint32_t SPI0_MOSI_DRIVE     :1;
    uint32_t SPI0_MISO_IE        :1;
    uint32_t RSVD0               :27;
  }BF;
} reg_gpio8_spi0_ctrl_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_SPI0_CTRL           (*(volatile reg_gpio8_spi0_ctrl_t*)((GPIO8_BASE_ADDRESS + 0x70)))
#define REG_GPIO8_SPI0_CTRL_ADDR      (GPIO8_BASE_ADDRESS + 0x70)
#define BP_GPIO8_SPI0_CTRL_RSVD0                                          5
#define BM_GPIO8_SPI0_CTRL_RSVD0                                 0xFFFFFFE0
#define BP_GPIO8_SPI0_CTRL_SPI0_MISO_IE                                   4
#define BM_GPIO8_SPI0_CTRL_SPI0_MISO_IE                          0x00000010
#define BP_GPIO8_SPI0_CTRL_SPI0_MOSI_DRIVE                                3
#define BM_GPIO8_SPI0_CTRL_SPI0_MOSI_DRIVE                       0x00000008
#define BP_GPIO8_SPI0_CTRL_SPI0_MOSI_OEN                                  2
#define BM_GPIO8_SPI0_CTRL_SPI0_MOSI_OEN                         0x00000004
#define BP_GPIO8_SPI0_CTRL_SPI0_CLK_DRIVE                                 1
#define BM_GPIO8_SPI0_CTRL_SPI0_CLK_DRIVE                        0x00000002
#define BP_GPIO8_SPI0_CTRL_SPI0_CLK_OEN                                   0
#define BM_GPIO8_SPI0_CTRL_SPI0_CLK_OEN                          0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_gpio8_uart0_ctrl_u
{
  uint32_t V;
  struct reg_gpio8_uart0_ctrl_s
  {
    uint32_t UART0_TX_OEN        :1;
    uint32_t UART0_TX_DRIVE      :1;
    uint32_t UART0_RTS_OEN       :1;
    uint32_t UART0_RTS_DRIVE     :1;
    uint32_t UART0_RX_IE         :1;
    uint32_t UART0_CTS_IE        :1;
    uint32_t RSVD0               :26;
  }BF;
} reg_gpio8_uart0_ctrl_t;

#endif  // __LANGUAGE_ASM__

#define REG_GPIO8_UART0_CTRL           (*(volatile reg_gpio8_uart0_ctrl_t*)((GPIO8_BASE_ADDRESS + 0x74)))
#define REG_GPIO8_UART0_CTRL_ADDR      (GPIO8_BASE_ADDRESS + 0x74)
#define BP_GPIO8_UART0_CTRL_RSVD0                                         6
#define BM_GPIO8_UART0_CTRL_RSVD0                                0xFFFFFFC0
#define BP_GPIO8_UART0_CTRL_UART0_CTS_IE                                  5
#define BM_GPIO8_UART0_CTRL_UART0_CTS_IE                         0x00000020
#define BP_GPIO8_UART0_CTRL_UART0_RX_IE                                   4
#define BM_GPIO8_UART0_CTRL_UART0_RX_IE                          0x00000010
#define BP_GPIO8_UART0_CTRL_UART0_RTS_DRIVE                               3
#define BM_GPIO8_UART0_CTRL_UART0_RTS_DRIVE                      0x00000008
#define BP_GPIO8_UART0_CTRL_UART0_RTS_OEN                                 2
#define BM_GPIO8_UART0_CTRL_UART0_RTS_OEN                        0x00000004
#define BP_GPIO8_UART0_CTRL_UART0_TX_DRIVE                                1
#define BM_GPIO8_UART0_CTRL_UART0_TX_DRIVE                       0x00000002
#define BP_GPIO8_UART0_CTRL_UART0_TX_OEN                                  0
#define BM_GPIO8_UART0_CTRL_UART0_TX_OEN                         0x00000001

#define SOCCTRL_BASE_ADDRESS 0x50030080


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_cfg_status_u
{
  uint32_t V;
  struct reg_socctrl_cfg_status_s
  {
    uint32_t M3DSEN              :1;
    uint32_t CLK_EN_OVR          :1;
    uint32_t RSVD0               :2;
    uint32_t WFI_STALL           :1;
    uint32_t RSVD1               :23;
    uint32_t COLLECTOR           :1;
    uint32_t GPIO_PM_STATE       :1;
    uint32_t RSVD2               :2;
  }BF;
} reg_socctrl_cfg_status_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_CFG_STATUS_GPIO_PM_STATE
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_CFG_STATUS_GPIO_PM_STATE_NORMAL                     0x0
#define BFV_SOCCTRL_CFG_STATUS_GPIO_PM_STATE_ABNORMAL                   0x1

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_CFG_STATUS_WFI_STALL
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_CFG_STATUS_WFI_STALL_ENABLE                         0x1
#define BFV_SOCCTRL_CFG_STATUS_WFI_STALL_DISABLE                        0x0

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_CFG_STATUS_CLK_EN_OVR
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_CFG_STATUS_CLK_EN_OVR_ENABLE                        0x1
#define BFV_SOCCTRL_CFG_STATUS_CLK_EN_OVR_DISABLE                       0x0

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_CFG_STATUS_M3DSEN
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_CFG_STATUS_M3DSEN_ENABLE                            0x1
#define BFV_SOCCTRL_CFG_STATUS_M3DSEN_DISABLE                           0x0

#define REG_SOCCTRL_CFG_STATUS           (*(volatile reg_socctrl_cfg_status_t*)((SOCCTRL_BASE_ADDRESS + 0x0)))
#define REG_SOCCTRL_CFG_STATUS_ADDR      (SOCCTRL_BASE_ADDRESS + 0x0)
#define BP_SOCCTRL_CFG_STATUS_RSVD0                                      30
#define BM_SOCCTRL_CFG_STATUS_RSVD0                              0xC0000000
#define BP_SOCCTRL_CFG_STATUS_GPIO_PM_STATE                              29
#define BM_SOCCTRL_CFG_STATUS_GPIO_PM_STATE                      0x20000000
#define BP_SOCCTRL_CFG_STATUS_COLLECTOR                                  28
#define BM_SOCCTRL_CFG_STATUS_COLLECTOR                          0x10000000
#define BP_SOCCTRL_CFG_STATUS_RSVD1                                       5
#define BM_SOCCTRL_CFG_STATUS_RSVD1                              0x0FFFFFE0
#define BP_SOCCTRL_CFG_STATUS_WFI_STALL                                   4
#define BM_SOCCTRL_CFG_STATUS_WFI_STALL                          0x00000010
#define BP_SOCCTRL_CFG_STATUS_RSVD2                                       2
#define BM_SOCCTRL_CFG_STATUS_RSVD2                              0x0000000C
#define BP_SOCCTRL_CFG_STATUS_CLK_EN_OVR                                  1
#define BM_SOCCTRL_CFG_STATUS_CLK_EN_OVR                         0x00000002
#define BP_SOCCTRL_CFG_STATUS_M3DSEN                                      0
#define BM_SOCCTRL_CFG_STATUS_M3DSEN                             0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_flash_cfg_status_u
{
  uint32_t V;
  struct reg_socctrl_flash_cfg_status_s
  {
    uint32_t NUM_WS              :3;
    uint32_t RSVD0               :29;
  }BF;
} reg_socctrl_flash_cfg_status_t;

#endif  // __LANGUAGE_ASM__

#define REG_SOCCTRL_FLASH_CFG_STATUS           (*(volatile reg_socctrl_flash_cfg_status_t*)((SOCCTRL_BASE_ADDRESS + 0x4)))
#define REG_SOCCTRL_FLASH_CFG_STATUS_ADDR      (SOCCTRL_BASE_ADDRESS + 0x4)
#define BP_SOCCTRL_FLASH_CFG_STATUS_RSVD0                                 3
#define BM_SOCCTRL_FLASH_CFG_STATUS_RSVD0                        0xFFFFFFF8
#define BP_SOCCTRL_FLASH_CFG_STATUS_NUM_WS                                0
#define BM_SOCCTRL_FLASH_CFG_STATUS_NUM_WS                       0x00000007

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_m3_frequency_u
{
  uint32_t V;
  struct reg_socctrl_m3_frequency_s
  {
    uint32_t COUNT               :32;
  }BF;
} reg_socctrl_m3_frequency_t;

#endif  // __LANGUAGE_ASM__

#define REG_SOCCTRL_M3_FREQUENCY           (*(volatile reg_socctrl_m3_frequency_t*)((SOCCTRL_BASE_ADDRESS + 0x8)))
#define REG_SOCCTRL_M3_FREQUENCY_ADDR      (SOCCTRL_BASE_ADDRESS + 0x8)
#define BP_SOCCTRL_M3_FREQUENCY_COUNT                                     0
#define BM_SOCCTRL_M3_FREQUENCY_COUNT                            0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_dsp_frequency_u
{
  uint32_t V;
  struct reg_socctrl_dsp_frequency_s
  {
    uint32_t COUNT               :32;
  }BF;
} reg_socctrl_dsp_frequency_t;

#endif  // __LANGUAGE_ASM__

#define REG_SOCCTRL_DSP_FREQUENCY           (*(volatile reg_socctrl_dsp_frequency_t*)((SOCCTRL_BASE_ADDRESS + 0xC)))
#define REG_SOCCTRL_DSP_FREQUENCY_ADDR      (SOCCTRL_BASE_ADDRESS + 0xC)
#define BP_SOCCTRL_DSP_FREQUENCY_COUNT                                    0
#define BM_SOCCTRL_DSP_FREQUENCY_COUNT                           0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_dsp_csr_u
{
  uint32_t V;
  struct reg_socctrl_dsp_csr_s
  {
    uint32_t DSP_COMPLEX_RESET_N :1;
    uint32_t DSP_COMPLEX_STALL   :1;
    uint32_t RSVD0               :6;
    uint32_t DSP_TCLK            :1;
    uint32_t DSP_TMS             :1;
    uint32_t DSP_TDI             :1;
    uint32_t DSP_TRST_N          :1;
    uint32_t DSP_TDO             :1;
    uint32_t RSVD1               :19;
  }BF;
} reg_socctrl_dsp_csr_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_DSP_CSR_DSP_COMPLEX_STALL
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_DSP_CSR_DSP_COMPLEX_STALL_FORCE                     0x1
#define BFV_SOCCTRL_DSP_CSR_DSP_COMPLEX_STALL_RELEASE                   0x0

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_DSP_CSR_DSP_COMPLEX_RESET_N
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_DSP_CSR_DSP_COMPLEX_RESET_N_FORCE                   0x0
#define BFV_SOCCTRL_DSP_CSR_DSP_COMPLEX_RESET_N_RELEASE                 0x1

#define REG_SOCCTRL_DSP_CSR           (*(volatile reg_socctrl_dsp_csr_t*)((SOCCTRL_BASE_ADDRESS + 0x10)))
#define REG_SOCCTRL_DSP_CSR_ADDR      (SOCCTRL_BASE_ADDRESS + 0x10)
#define BP_SOCCTRL_DSP_CSR_RSVD0                                         13
#define BM_SOCCTRL_DSP_CSR_RSVD0                                 0xFFFFE000
#define BP_SOCCTRL_DSP_CSR_DSP_TDO                                       12
#define BM_SOCCTRL_DSP_CSR_DSP_TDO                               0x00001000
#define BP_SOCCTRL_DSP_CSR_DSP_TRST_N                                    11
#define BM_SOCCTRL_DSP_CSR_DSP_TRST_N                            0x00000800
#define BP_SOCCTRL_DSP_CSR_DSP_TDI                                       10
#define BM_SOCCTRL_DSP_CSR_DSP_TDI                               0x00000400
#define BP_SOCCTRL_DSP_CSR_DSP_TMS                                        9
#define BM_SOCCTRL_DSP_CSR_DSP_TMS                               0x00000200
#define BP_SOCCTRL_DSP_CSR_DSP_TCLK                                       8
#define BM_SOCCTRL_DSP_CSR_DSP_TCLK                              0x00000100
#define BP_SOCCTRL_DSP_CSR_RSVD1                                          2
#define BM_SOCCTRL_DSP_CSR_RSVD1                                 0x000000FC
#define BP_SOCCTRL_DSP_CSR_DSP_COMPLEX_STALL                              1
#define BM_SOCCTRL_DSP_CSR_DSP_COMPLEX_STALL                     0x00000002
#define BP_SOCCTRL_DSP_CSR_DSP_COMPLEX_RESET_N                            0
#define BM_SOCCTRL_DSP_CSR_DSP_COMPLEX_RESET_N                   0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_m3_dial_stall_csr_u
{
  uint32_t V;
  struct reg_socctrl_m3_dial_stall_csr_s
  {
    uint32_t GPIO0               :1;
    uint32_t GPIO1               :1;
    uint32_t TIMER0              :1;
    uint32_t TIMER1              :1;
    uint32_t UART0               :1;
    uint32_t UART1               :1;
    uint32_t SPI0                :1;
    uint32_t SPI1                :1;
    uint32_t I2C0                :1;
    uint32_t I2C1                :1;
    uint32_t RTC0                :1;
    uint32_t RTC1                :1;
    uint32_t DSP                 :1;
    uint32_t ADC                 :1;
    uint32_t PWM                 :1;
    uint32_t WDT                 :1;
    uint32_t RTC_TMR             :1;
    uint32_t AO_BOD              :1;
    uint32_t RSVD0               :13;
    uint32_t STALL               :1;
  }BF;
} reg_socctrl_m3_dial_stall_csr_t;

#endif  // __LANGUAGE_ASM__

#define REG_SOCCTRL_M3_DIAL_STALL_CSR           (*(volatile reg_socctrl_m3_dial_stall_csr_t*)((SOCCTRL_BASE_ADDRESS + 0x14)))
#define REG_SOCCTRL_M3_DIAL_STALL_CSR_ADDR      (SOCCTRL_BASE_ADDRESS + 0x14)
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_STALL                               31
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_STALL                       0x80000000
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_RSVD0                               18
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_RSVD0                       0x7FFC0000
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_AO_BOD                              17
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_AO_BOD                      0x00020000
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_RTC_TMR                             16
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_RTC_TMR                     0x00010000
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_WDT                                 15
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_WDT                         0x00008000
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_PWM                                 14
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_PWM                         0x00004000
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_ADC                                 13
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_ADC                         0x00002000
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_DSP                                 12
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_DSP                         0x00001000
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_RTC1                                11
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_RTC1                        0x00000800
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_RTC0                                10
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_RTC0                        0x00000400
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_I2C1                                 9
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_I2C1                        0x00000200
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_I2C0                                 8
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_I2C0                        0x00000100
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_SPI1                                 7
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_SPI1                        0x00000080
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_SPI0                                 6
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_SPI0                        0x00000040
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_UART1                                5
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_UART1                       0x00000020
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_UART0                                4
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_UART0                       0x00000010
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_TIMER1                               3
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_TIMER1                      0x00000008
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_TIMER0                               2
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_TIMER0                      0x00000004
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_GPIO1                                1
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_GPIO1                       0x00000002
#define BP_SOCCTRL_M3_DIAL_STALL_CSR_GPIO0                                0
#define BM_SOCCTRL_M3_DIAL_STALL_CSR_GPIO0                       0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_m3_dial_stall_set_u
{
  uint32_t V;
  struct reg_socctrl_m3_dial_stall_set_s
  {
    uint32_t GPIO0               :1;
    uint32_t GPIO1               :1;
    uint32_t TIMER0              :1;
    uint32_t TIMER1              :1;
    uint32_t UART0               :1;
    uint32_t UART1               :1;
    uint32_t SPI0                :1;
    uint32_t SPI1                :1;
    uint32_t I2C0                :1;
    uint32_t I2C1                :1;
    uint32_t RTC0                :1;
    uint32_t RTC1                :1;
    uint32_t DSP                 :1;
    uint32_t ADC                 :1;
    uint32_t PWM                 :1;
    uint32_t WDT                 :1;
    uint32_t RTC_TMR             :1;
    uint32_t AO_BOD              :1;
    uint32_t RSVD0               :13;
    uint32_t STALL               :1;
  }BF;
} reg_socctrl_m3_dial_stall_set_t;

#endif  // __LANGUAGE_ASM__

#define REG_SOCCTRL_M3_DIAL_STALL_SET           (*(volatile reg_socctrl_m3_dial_stall_set_t*)((SOCCTRL_BASE_ADDRESS + 0x18)))
#define REG_SOCCTRL_M3_DIAL_STALL_SET_ADDR      (SOCCTRL_BASE_ADDRESS + 0x18)
#define BP_SOCCTRL_M3_DIAL_STALL_SET_STALL                               31
#define BM_SOCCTRL_M3_DIAL_STALL_SET_STALL                       0x80000000
#define BP_SOCCTRL_M3_DIAL_STALL_SET_RSVD0                               18
#define BM_SOCCTRL_M3_DIAL_STALL_SET_RSVD0                       0x7FFC0000
#define BP_SOCCTRL_M3_DIAL_STALL_SET_AO_BOD                              17
#define BM_SOCCTRL_M3_DIAL_STALL_SET_AO_BOD                      0x00020000
#define BP_SOCCTRL_M3_DIAL_STALL_SET_RTC_TMR                             16
#define BM_SOCCTRL_M3_DIAL_STALL_SET_RTC_TMR                     0x00010000
#define BP_SOCCTRL_M3_DIAL_STALL_SET_WDT                                 15
#define BM_SOCCTRL_M3_DIAL_STALL_SET_WDT                         0x00008000
#define BP_SOCCTRL_M3_DIAL_STALL_SET_PWM                                 14
#define BM_SOCCTRL_M3_DIAL_STALL_SET_PWM                         0x00004000
#define BP_SOCCTRL_M3_DIAL_STALL_SET_ADC                                 13
#define BM_SOCCTRL_M3_DIAL_STALL_SET_ADC                         0x00002000
#define BP_SOCCTRL_M3_DIAL_STALL_SET_DSP                                 12
#define BM_SOCCTRL_M3_DIAL_STALL_SET_DSP                         0x00001000
#define BP_SOCCTRL_M3_DIAL_STALL_SET_RTC1                                11
#define BM_SOCCTRL_M3_DIAL_STALL_SET_RTC1                        0x00000800
#define BP_SOCCTRL_M3_DIAL_STALL_SET_RTC0                                10
#define BM_SOCCTRL_M3_DIAL_STALL_SET_RTC0                        0x00000400
#define BP_SOCCTRL_M3_DIAL_STALL_SET_I2C1                                 9
#define BM_SOCCTRL_M3_DIAL_STALL_SET_I2C1                        0x00000200
#define BP_SOCCTRL_M3_DIAL_STALL_SET_I2C0                                 8
#define BM_SOCCTRL_M3_DIAL_STALL_SET_I2C0                        0x00000100
#define BP_SOCCTRL_M3_DIAL_STALL_SET_SPI1                                 7
#define BM_SOCCTRL_M3_DIAL_STALL_SET_SPI1                        0x00000080
#define BP_SOCCTRL_M3_DIAL_STALL_SET_SPI0                                 6
#define BM_SOCCTRL_M3_DIAL_STALL_SET_SPI0                        0x00000040
#define BP_SOCCTRL_M3_DIAL_STALL_SET_UART1                                5
#define BM_SOCCTRL_M3_DIAL_STALL_SET_UART1                       0x00000020
#define BP_SOCCTRL_M3_DIAL_STALL_SET_UART0                                4
#define BM_SOCCTRL_M3_DIAL_STALL_SET_UART0                       0x00000010
#define BP_SOCCTRL_M3_DIAL_STALL_SET_TIMER1                               3
#define BM_SOCCTRL_M3_DIAL_STALL_SET_TIMER1                      0x00000008
#define BP_SOCCTRL_M3_DIAL_STALL_SET_TIMER0                               2
#define BM_SOCCTRL_M3_DIAL_STALL_SET_TIMER0                      0x00000004
#define BP_SOCCTRL_M3_DIAL_STALL_SET_GPIO1                                1
#define BM_SOCCTRL_M3_DIAL_STALL_SET_GPIO1                       0x00000002
#define BP_SOCCTRL_M3_DIAL_STALL_SET_GPIO0                                0
#define BM_SOCCTRL_M3_DIAL_STALL_SET_GPIO0                       0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_m3_dial_stall_clr_u
{
  uint32_t V;
  struct reg_socctrl_m3_dial_stall_clr_s
  {
    uint32_t GPIO0               :1;
    uint32_t GPIO1               :1;
    uint32_t TIMER0              :1;
    uint32_t TIMER1              :1;
    uint32_t UART0               :1;
    uint32_t UART1               :1;
    uint32_t SPI0                :1;
    uint32_t SPI1                :1;
    uint32_t I2C0                :1;
    uint32_t I2C1                :1;
    uint32_t RTC0                :1;
    uint32_t RTC1                :1;
    uint32_t DSP                 :1;
    uint32_t ADC                 :1;
    uint32_t PWM                 :1;
    uint32_t WDT                 :1;
    uint32_t RTC_TMR             :1;
    uint32_t AO_BOD              :1;
    uint32_t RSVD0               :13;
    uint32_t STALL               :1;
  }BF;
} reg_socctrl_m3_dial_stall_clr_t;

#endif  // __LANGUAGE_ASM__

#define REG_SOCCTRL_M3_DIAL_STALL_CLR           (*(volatile reg_socctrl_m3_dial_stall_clr_t*)((SOCCTRL_BASE_ADDRESS + 0x1C)))
#define REG_SOCCTRL_M3_DIAL_STALL_CLR_ADDR      (SOCCTRL_BASE_ADDRESS + 0x1C)
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_STALL                               31
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_STALL                       0x80000000
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_RSVD0                               18
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_RSVD0                       0x7FFC0000
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_AO_BOD                              17
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_AO_BOD                      0x00020000
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_RTC_TMR                             16
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_RTC_TMR                     0x00010000
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_WDT                                 15
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_WDT                         0x00008000
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_PWM                                 14
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_PWM                         0x00004000
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_ADC                                 13
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_ADC                         0x00002000
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_DSP                                 12
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_DSP                         0x00001000
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_RTC1                                11
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_RTC1                        0x00000800
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_RTC0                                10
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_RTC0                        0x00000400
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_I2C1                                 9
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_I2C1                        0x00000200
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_I2C0                                 8
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_I2C0                        0x00000100
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_SPI1                                 7
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_SPI1                        0x00000080
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_SPI0                                 6
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_SPI0                        0x00000040
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_UART1                                5
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_UART1                       0x00000020
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_UART0                                4
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_UART0                       0x00000010
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_TIMER1                               3
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_TIMER1                      0x00000008
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_TIMER0                               2
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_TIMER0                      0x00000004
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_GPIO1                                1
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_GPIO1                       0x00000002
#define BP_SOCCTRL_M3_DIAL_STALL_CLR_GPIO0                                0
#define BM_SOCCTRL_M3_DIAL_STALL_CLR_GPIO0                       0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_reset_status_u
{
  uint32_t V;
  struct reg_socctrl_reset_status_s
  {
    uint32_t POR                 :1;
    uint32_t M3_AIRCR_VECT       :1;
    uint32_t M3_AIRCR_SYS        :1;
    uint32_t M3_DAP              :1;
    uint32_t WDT                 :1;
    uint32_t PIN                 :1;
    uint32_t BROWN               :1;
    uint32_t RSVD0               :25;
  }BF;
} reg_socctrl_reset_status_t;

#endif  // __LANGUAGE_ASM__

#define REG_SOCCTRL_RESET_STATUS           (*(volatile reg_socctrl_reset_status_t*)((SOCCTRL_BASE_ADDRESS + 0x20)))
#define REG_SOCCTRL_RESET_STATUS_ADDR      (SOCCTRL_BASE_ADDRESS + 0x20)
#define BP_SOCCTRL_RESET_STATUS_RSVD0                                     7
#define BM_SOCCTRL_RESET_STATUS_RSVD0                            0xFFFFFF80
#define BP_SOCCTRL_RESET_STATUS_BROWN                                     6
#define BM_SOCCTRL_RESET_STATUS_BROWN                            0x00000040
#define BP_SOCCTRL_RESET_STATUS_PIN                                       5
#define BM_SOCCTRL_RESET_STATUS_PIN                              0x00000020
#define BP_SOCCTRL_RESET_STATUS_WDT                                       4
#define BM_SOCCTRL_RESET_STATUS_WDT                              0x00000010
#define BP_SOCCTRL_RESET_STATUS_M3_DAP                                    3
#define BM_SOCCTRL_RESET_STATUS_M3_DAP                           0x00000008
#define BP_SOCCTRL_RESET_STATUS_M3_AIRCR_SYS                              2
#define BM_SOCCTRL_RESET_STATUS_M3_AIRCR_SYS                     0x00000004
#define BP_SOCCTRL_RESET_STATUS_M3_AIRCR_VECT                             1
#define BM_SOCCTRL_RESET_STATUS_M3_AIRCR_VECT                    0x00000002
#define BP_SOCCTRL_RESET_STATUS_POR                                       0
#define BM_SOCCTRL_RESET_STATUS_POR                              0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_fwtracea_u
{
  uint32_t V;
  struct reg_socctrl_fwtracea_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_socctrl_fwtracea_t;

#endif  // __LANGUAGE_ASM__

#define REG_SOCCTRL_FWTRACEA           (*(volatile reg_socctrl_fwtracea_t*)((SOCCTRL_BASE_ADDRESS + 0x28)))
#define REG_SOCCTRL_FWTRACEA_ADDR      (SOCCTRL_BASE_ADDRESS + 0x28)
#define BP_SOCCTRL_FWTRACEA_VALUE                                         0
#define BM_SOCCTRL_FWTRACEA_VALUE                                0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_fwtraceb_u
{
  uint32_t V;
  struct reg_socctrl_fwtraceb_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_socctrl_fwtraceb_t;

#endif  // __LANGUAGE_ASM__

#define REG_SOCCTRL_FWTRACEB           (*(volatile reg_socctrl_fwtraceb_t*)((SOCCTRL_BASE_ADDRESS + 0x2C)))
#define REG_SOCCTRL_FWTRACEB_ADDR      (SOCCTRL_BASE_ADDRESS + 0x2C)
#define BP_SOCCTRL_FWTRACEB_VALUE                                         0
#define BM_SOCCTRL_FWTRACEB_VALUE                                0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_pmuxa_u
{
  uint32_t V;
  struct reg_socctrl_pmuxa_s
  {
    uint32_t GPIO0               :3;
    uint32_t RSVD0               :1;
    uint32_t GPIO1               :3;
    uint32_t RSVD1               :1;
    uint32_t GPIO2               :3;
    uint32_t RSVD2               :1;
    uint32_t GPIO3               :2;
    uint32_t RSVD3               :2;
    uint32_t GPIO4               :2;
    uint32_t RSVD4               :2;
    uint32_t GPIO5               :2;
    uint32_t RSVD5               :2;
    uint32_t GPIO6               :2;
    uint32_t RSVD6               :2;
    uint32_t GPIO7               :2;
    uint32_t RSVD7               :2;
  }BF;
} reg_socctrl_pmuxa_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXA_GPIO7
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXA_GPIO7_GPIO7                                   0x0
#define BFV_SOCCTRL_PMUXA_GPIO7_PWMCH7                                  0x1
#define BFV_SOCCTRL_PMUXA_GPIO7_DSP_UART_TX                             0x2
#define BFV_SOCCTRL_PMUXA_GPIO7_UART1TX                                 0x3

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXA_GPIO6
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXA_GPIO6_GPIO6                                   0x0
#define BFV_SOCCTRL_PMUXA_GPIO6_PWMCH6                                  0x1
#define BFV_SOCCTRL_PMUXA_GPIO6_FPANEL                                  0x2
#define BFV_SOCCTRL_PMUXA_GPIO6_CLKOUT                                  0x3

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXA_GPIO5
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXA_GPIO5_GPIO5                                   0x0
#define BFV_SOCCTRL_PMUXA_GPIO5_PWMCH5                                  0x1
#define BFV_SOCCTRL_PMUXA_GPIO5_UART1DBGA                               0x2
#define BFV_SOCCTRL_PMUXA_GPIO5_UART1CTS                                0x3

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXA_GPIO4
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXA_GPIO4_GPIO4                                   0x0
#define BFV_SOCCTRL_PMUXA_GPIO4_PWMCH4                                  0x1
#define BFV_SOCCTRL_PMUXA_GPIO4_UART1DBGB                               0x2
#define BFV_SOCCTRL_PMUXA_GPIO4_UART1RTS                                0x3

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXA_GPIO3
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXA_GPIO3_GPIO3                                   0x0
#define BFV_SOCCTRL_PMUXA_GPIO3_PWMCH3                                  0x1
#define BFV_SOCCTRL_PMUXA_GPIO3_UART1DBGC                               0x2
#define BFV_SOCCTRL_PMUXA_GPIO3_UART1RX                                 0x3

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXA_GPIO2
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXA_GPIO2_GPIO2                                   0x0
#define BFV_SOCCTRL_PMUXA_GPIO2_PWMCH2                                  0x1
#define BFV_SOCCTRL_PMUXA_GPIO2_UART0DBGA                               0x2
#define BFV_SOCCTRL_PMUXA_GPIO2_SPI2CLK                                 0x3
#define BFV_SOCCTRL_PMUXA_GPIO2_SPISLV2CLK                              0x4

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXA_GPIO1
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXA_GPIO1_GPIO1                                   0x0
#define BFV_SOCCTRL_PMUXA_GPIO1_PWMCH1                                  0x1
#define BFV_SOCCTRL_PMUXA_GPIO1_UART0DBGB                               0x2
#define BFV_SOCCTRL_PMUXA_GPIO1_SPI2MOSI                                0x3
#define BFV_SOCCTRL_PMUXA_GPIO1_SPISLV2MISO                             0x4

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXA_GPIO0
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXA_GPIO0_GPIO0                                   0x0
#define BFV_SOCCTRL_PMUXA_GPIO0_PWMCH0                                  0x1
#define BFV_SOCCTRL_PMUXA_GPIO0_UART0DBGC                               0x2
#define BFV_SOCCTRL_PMUXA_GPIO0_SPI2MISO                                0x3
#define BFV_SOCCTRL_PMUXA_GPIO0_SPISLV2MOSI                             0x4

#define REG_SOCCTRL_PMUXA           (*(volatile reg_socctrl_pmuxa_t*)((SOCCTRL_BASE_ADDRESS + 0x30)))
#define REG_SOCCTRL_PMUXA_ADDR      (SOCCTRL_BASE_ADDRESS + 0x30)
#define BP_SOCCTRL_PMUXA_RSVD0                                           30
#define BM_SOCCTRL_PMUXA_RSVD0                                   0xC0000000
#define BP_SOCCTRL_PMUXA_GPIO7                                           28
#define BM_SOCCTRL_PMUXA_GPIO7                                   0x30000000
#define BP_SOCCTRL_PMUXA_RSVD1                                           26
#define BM_SOCCTRL_PMUXA_RSVD1                                   0x0C000000
#define BP_SOCCTRL_PMUXA_GPIO6                                           24
#define BM_SOCCTRL_PMUXA_GPIO6                                   0x03000000
#define BP_SOCCTRL_PMUXA_RSVD2                                           22
#define BM_SOCCTRL_PMUXA_RSVD2                                   0x00C00000
#define BP_SOCCTRL_PMUXA_GPIO5                                           20
#define BM_SOCCTRL_PMUXA_GPIO5                                   0x00300000
#define BP_SOCCTRL_PMUXA_RSVD3                                           18
#define BM_SOCCTRL_PMUXA_RSVD3                                   0x000C0000
#define BP_SOCCTRL_PMUXA_GPIO4                                           16
#define BM_SOCCTRL_PMUXA_GPIO4                                   0x00030000
#define BP_SOCCTRL_PMUXA_RSVD4                                           14
#define BM_SOCCTRL_PMUXA_RSVD4                                   0x0000C000
#define BP_SOCCTRL_PMUXA_GPIO3                                           12
#define BM_SOCCTRL_PMUXA_GPIO3                                   0x00003000
#define BP_SOCCTRL_PMUXA_RSVD5                                           11
#define BM_SOCCTRL_PMUXA_RSVD5                                   0x00000800
#define BP_SOCCTRL_PMUXA_GPIO2                                            8
#define BM_SOCCTRL_PMUXA_GPIO2                                   0x00000700
#define BP_SOCCTRL_PMUXA_RSVD6                                            7
#define BM_SOCCTRL_PMUXA_RSVD6                                   0x00000080
#define BP_SOCCTRL_PMUXA_GPIO1                                            4
#define BM_SOCCTRL_PMUXA_GPIO1                                   0x00000070
#define BP_SOCCTRL_PMUXA_RSVD7                                            3
#define BM_SOCCTRL_PMUXA_RSVD7                                   0x00000008
#define BP_SOCCTRL_PMUXA_GPIO0                                            0
#define BM_SOCCTRL_PMUXA_GPIO0                                   0x00000007

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_pmuxb_u
{
  uint32_t V;
  struct reg_socctrl_pmuxb_s
  {
    uint32_t GPIO8               :2;
    uint32_t RSVD0               :2;
    uint32_t GPIO9               :2;
    uint32_t RSVD1               :2;
    uint32_t GPIO10              :2;
    uint32_t RSVD2               :2;
    uint32_t GPIO11              :3;
    uint32_t RSVD3               :1;
    uint32_t GPIO12              :1;
    uint32_t RSVD4               :3;
    uint32_t GPIO13              :1;
    uint32_t RSVD5               :3;
    uint32_t GPIO14              :2;
    uint32_t RSVD6               :2;
    uint32_t GPIO15              :2;
    uint32_t RSVD7               :2;
  }BF;
} reg_socctrl_pmuxb_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXB_GPIO15
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXB_GPIO15_GPIO15                                 0x0
#define BFV_SOCCTRL_PMUXB_GPIO15_I2S_DATA_IN                            0x1
#define BFV_SOCCTRL_PMUXB_GPIO15_PDM1DATA                               0x2

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXB_GPIO14
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXB_GPIO14_GPIO14                                 0x0
#define BFV_SOCCTRL_PMUXB_GPIO14_I2S_LRCLK                              0x1
#define BFV_SOCCTRL_PMUXB_GPIO14_PDM1CLK                                0x2

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXB_GPIO13
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXB_GPIO13_GPIO13                                 0x0
#define BFV_SOCCTRL_PMUXB_GPIO13_I2S_BCLK                               0x1

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXB_GPIO12
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXB_GPIO12_GPIO12                                 0x0
#define BFV_SOCCTRL_PMUXB_GPIO12_I2S_ACLK                               0x1

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXB_GPIO11
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXB_GPIO11_GPIO11                                 0x0
#define BFV_SOCCTRL_PMUXB_GPIO11_SPI2RDY                                0x2
#define BFV_SOCCTRL_PMUXB_GPIO11_SPI2CS3                                0x3
#define BFV_SOCCTRL_PMUXB_GPIO11_SPISLV2CS                              0x4

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXB_GPIO10
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXB_GPIO10_GPIO10                                 0x0
#define BFV_SOCCTRL_PMUXB_GPIO10_SPI2CS2                                0x3

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXB_GPIO9
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXB_GPIO9_GPIO9                                   0x0
#define BFV_SOCCTRL_PMUXB_GPIO9_I2C1SCK                                 0x1
#define BFV_SOCCTRL_PMUXB_GPIO9_PDM0DATA                                0x2
#define BFV_SOCCTRL_PMUXB_GPIO9_I2C2SCK                                 0x3

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXB_GPIO8
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXB_GPIO8_GPIO8                                   0x0
#define BFV_SOCCTRL_PMUXB_GPIO8_I2C1SDA                                 0x1
#define BFV_SOCCTRL_PMUXB_GPIO8_PDM0CLK                                 0x2
#define BFV_SOCCTRL_PMUXB_GPIO8_I2C2SDA                                 0x3

#define REG_SOCCTRL_PMUXB           (*(volatile reg_socctrl_pmuxb_t*)((SOCCTRL_BASE_ADDRESS + 0x34)))
#define REG_SOCCTRL_PMUXB_ADDR      (SOCCTRL_BASE_ADDRESS + 0x34)
#define BP_SOCCTRL_PMUXB_RSVD0                                           30
#define BM_SOCCTRL_PMUXB_RSVD0                                   0xC0000000
#define BP_SOCCTRL_PMUXB_GPIO15                                          28
#define BM_SOCCTRL_PMUXB_GPIO15                                  0x30000000
#define BP_SOCCTRL_PMUXB_RSVD1                                           26
#define BM_SOCCTRL_PMUXB_RSVD1                                   0x0C000000
#define BP_SOCCTRL_PMUXB_GPIO14                                          24
#define BM_SOCCTRL_PMUXB_GPIO14                                  0x03000000
#define BP_SOCCTRL_PMUXB_RSVD2                                           21
#define BM_SOCCTRL_PMUXB_RSVD2                                   0x00E00000
#define BP_SOCCTRL_PMUXB_GPIO13                                          20
#define BM_SOCCTRL_PMUXB_GPIO13                                  0x00100000
#define BP_SOCCTRL_PMUXB_RSVD3                                           17
#define BM_SOCCTRL_PMUXB_RSVD3                                   0x000E0000
#define BP_SOCCTRL_PMUXB_GPIO12                                          16
#define BM_SOCCTRL_PMUXB_GPIO12                                  0x00010000
#define BP_SOCCTRL_PMUXB_RSVD4                                           15
#define BM_SOCCTRL_PMUXB_RSVD4                                   0x00008000
#define BP_SOCCTRL_PMUXB_GPIO11                                          12
#define BM_SOCCTRL_PMUXB_GPIO11                                  0x00007000
#define BP_SOCCTRL_PMUXB_RSVD5                                           10
#define BM_SOCCTRL_PMUXB_RSVD5                                   0x00000C00
#define BP_SOCCTRL_PMUXB_GPIO10                                           8
#define BM_SOCCTRL_PMUXB_GPIO10                                  0x00000300
#define BP_SOCCTRL_PMUXB_RSVD6                                            6
#define BM_SOCCTRL_PMUXB_RSVD6                                   0x000000C0
#define BP_SOCCTRL_PMUXB_GPIO9                                            4
#define BM_SOCCTRL_PMUXB_GPIO9                                   0x00000030
#define BP_SOCCTRL_PMUXB_RSVD7                                            2
#define BM_SOCCTRL_PMUXB_RSVD7                                   0x0000000C
#define BP_SOCCTRL_PMUXB_GPIO8                                            0
#define BM_SOCCTRL_PMUXB_GPIO8                                   0x00000003

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_pmuxc_u
{
  uint32_t V;
  struct reg_socctrl_pmuxc_s
  {
    uint32_t GPIO16              :1;
    uint32_t RSVD0               :3;
    uint32_t GPIO17              :2;
    uint32_t RSVD1               :2;
    uint32_t GPIO18              :2;
    uint32_t RSVD2               :2;
    uint32_t GPIO19              :2;
    uint32_t RSVD3               :2;
    uint32_t GPIO20              :2;
    uint32_t RSVD4               :2;
    uint32_t GPIO21              :2;
    uint32_t RSVD5               :2;
    uint32_t GPIO22              :2;
    uint32_t RSVD6               :2;
    uint32_t GPIO23              :2;
    uint32_t RSVD7               :2;
  }BF;
} reg_socctrl_pmuxc_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXC_GPIO23
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXC_GPIO23_GPIO23                                 0x0
#define BFV_SOCCTRL_PMUXC_GPIO23_SPI0CS0                                0x1
#define BFV_SOCCTRL_PMUXC_GPIO23_SPISLV0CS                              0x2

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXC_GPIO22
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXC_GPIO22_GPIO22                                 0x0
#define BFV_SOCCTRL_PMUXC_GPIO22_UART1RTS                               0x1
#define BFV_SOCCTRL_PMUXC_GPIO22_DSP_JTAG_TDO                           0x2
#define BFV_SOCCTRL_PMUXC_GPIO22_CLKOUT                                 0x3

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXC_GPIO21
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXC_GPIO21_GPIO21                                 0x0
#define BFV_SOCCTRL_PMUXC_GPIO21_UART1CTS                               0x1
#define BFV_SOCCTRL_PMUXC_GPIO21_DSP_JTAG_TCLK                          0x2

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXC_GPIO20
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXC_GPIO20_GPIO20                                 0x0
#define BFV_SOCCTRL_PMUXC_GPIO20_UART1TX                                0x1
#define BFV_SOCCTRL_PMUXC_GPIO20_DSP_UART_TX                            0x2
#define BFV_SOCCTRL_PMUXC_GPIO20_FPANEL                                 0x3

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXC_GPIO19
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXC_GPIO19_GPIO19                                 0x0
#define BFV_SOCCTRL_PMUXC_GPIO19_UART1RX                                0x1
#define BFV_SOCCTRL_PMUXC_GPIO19_DSP_JTAG_TRST_N                        0x2

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXC_GPIO18
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXC_GPIO18_GPIO18                                 0x0
#define BFV_SOCCTRL_PMUXC_GPIO18_I2C0SCK                                0x1
#define BFV_SOCCTRL_PMUXC_GPIO18_DSP_JTAG_TDI                           0x2
#define BFV_SOCCTRL_PMUXC_GPIO18_PDM0DATA                               0x3

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXC_GPIO17
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXC_GPIO17_GPIO17                                 0x0
#define BFV_SOCCTRL_PMUXC_GPIO17_I2C0SDA                                0x1
#define BFV_SOCCTRL_PMUXC_GPIO17_DSP_JTAG_TMS                           0x2
#define BFV_SOCCTRL_PMUXC_GPIO17_PDM0CLK                                0x3

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXC_GPIO16
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXC_GPIO16_GPIO16                                 0x0
#define BFV_SOCCTRL_PMUXC_GPIO16_I2S_DATA_OUT                           0x1

#define REG_SOCCTRL_PMUXC           (*(volatile reg_socctrl_pmuxc_t*)((SOCCTRL_BASE_ADDRESS + 0x38)))
#define REG_SOCCTRL_PMUXC_ADDR      (SOCCTRL_BASE_ADDRESS + 0x38)
#define BP_SOCCTRL_PMUXC_RSVD0                                           30
#define BM_SOCCTRL_PMUXC_RSVD0                                   0xC0000000
#define BP_SOCCTRL_PMUXC_GPIO23                                          28
#define BM_SOCCTRL_PMUXC_GPIO23                                  0x30000000
#define BP_SOCCTRL_PMUXC_RSVD1                                           26
#define BM_SOCCTRL_PMUXC_RSVD1                                   0x0C000000
#define BP_SOCCTRL_PMUXC_GPIO22                                          24
#define BM_SOCCTRL_PMUXC_GPIO22                                  0x03000000
#define BP_SOCCTRL_PMUXC_RSVD2                                           22
#define BM_SOCCTRL_PMUXC_RSVD2                                   0x00C00000
#define BP_SOCCTRL_PMUXC_GPIO21                                          20
#define BM_SOCCTRL_PMUXC_GPIO21                                  0x00300000
#define BP_SOCCTRL_PMUXC_RSVD3                                           18
#define BM_SOCCTRL_PMUXC_RSVD3                                   0x000C0000
#define BP_SOCCTRL_PMUXC_GPIO20                                          16
#define BM_SOCCTRL_PMUXC_GPIO20                                  0x00030000
#define BP_SOCCTRL_PMUXC_RSVD4                                           14
#define BM_SOCCTRL_PMUXC_RSVD4                                   0x0000C000
#define BP_SOCCTRL_PMUXC_GPIO19                                          12
#define BM_SOCCTRL_PMUXC_GPIO19                                  0x00003000
#define BP_SOCCTRL_PMUXC_RSVD5                                           10
#define BM_SOCCTRL_PMUXC_RSVD5                                   0x00000C00
#define BP_SOCCTRL_PMUXC_GPIO18                                           8
#define BM_SOCCTRL_PMUXC_GPIO18                                  0x00000300
#define BP_SOCCTRL_PMUXC_RSVD6                                            6
#define BM_SOCCTRL_PMUXC_RSVD6                                   0x000000C0
#define BP_SOCCTRL_PMUXC_GPIO17                                           4
#define BM_SOCCTRL_PMUXC_GPIO17                                  0x00000030
#define BP_SOCCTRL_PMUXC_RSVD7                                            1
#define BM_SOCCTRL_PMUXC_RSVD7                                   0x0000000E
#define BP_SOCCTRL_PMUXC_GPIO16                                           0
#define BM_SOCCTRL_PMUXC_GPIO16                                  0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_pmuxd_u
{
  uint32_t V;
  struct reg_socctrl_pmuxd_s
  {
    uint32_t GPIO24              :1;
    uint32_t RSVD0               :3;
    uint32_t GPIO25              :1;
    uint32_t RSVD1               :3;
    uint32_t GPIO26              :2;
    uint32_t RSVD2               :2;
    uint32_t GPIO27              :3;
    uint32_t RSVD3               :1;
    uint32_t GPIO28              :3;
    uint32_t RSVD4               :1;
    uint32_t GPIO29              :3;
    uint32_t RSVD5               :1;
    uint32_t GPIO30              :3;
    uint32_t RSVD6               :1;
    uint32_t GPIO31              :2;
    uint32_t RSVD7               :2;
  }BF;
} reg_socctrl_pmuxd_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXD_GPIO31
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXD_GPIO31_GPIO31                                 0x0
#define BFV_SOCCTRL_PMUXD_GPIO31_SPI1CS1                                0x1
#define BFV_SOCCTRL_PMUXD_GPIO31_SPI1RDY                                0x2
#define BFV_SOCCTRL_PMUXD_GPIO31_SPI2CS1                                0x3

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXD_GPIO30
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXD_GPIO30_GPIO30                                 0x0
#define BFV_SOCCTRL_PMUXD_GPIO30_SPI1CS0                                0x1
#define BFV_SOCCTRL_PMUXD_GPIO30_SPI2RDY                                0x2
#define BFV_SOCCTRL_PMUXD_GPIO30_SPI2CS0                                0x3
#define BFV_SOCCTRL_PMUXD_GPIO30_SPISLV1CS                              0x4
#define BFV_SOCCTRL_PMUXD_GPIO30_SPISLV2CS                              0x5

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXD_GPIO29
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXD_GPIO29_GPIO29                                 0x0
#define BFV_SOCCTRL_PMUXD_GPIO29_SPI1CLK                                0x1
#define BFV_SOCCTRL_PMUXD_GPIO29_I2C1SCK                                0x2
#define BFV_SOCCTRL_PMUXD_GPIO29_SPI2CLK                                0x3
#define BFV_SOCCTRL_PMUXD_GPIO29_SPISLV1CLK                             0x4
#define BFV_SOCCTRL_PMUXD_GPIO29_SPISLV2CLK                             0x5

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXD_GPIO28
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXD_GPIO28_GPIO28                                 0x0
#define BFV_SOCCTRL_PMUXD_GPIO28_SPI1MOSI                               0x1
#define BFV_SOCCTRL_PMUXD_GPIO28_I2C1SDA                                0x2
#define BFV_SOCCTRL_PMUXD_GPIO28_SPI2MOSI                               0x3
#define BFV_SOCCTRL_PMUXD_GPIO28_SPISLV1MISO                            0x4
#define BFV_SOCCTRL_PMUXD_GPIO28_SPISLV2MISO                            0x5

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXD_GPIO27
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXD_GPIO27_GPIO27                                 0x0
#define BFV_SOCCTRL_PMUXD_GPIO27_SPI1MISO                               0x1
#define BFV_SOCCTRL_PMUXD_GPIO27_SPI2MISO                               0x3
#define BFV_SOCCTRL_PMUXD_GPIO27_SPISLV1MOSI                            0x4
#define BFV_SOCCTRL_PMUXD_GPIO27_SPISLV2MOSI                            0x5

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXD_GPIO26
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXD_GPIO26_GPIO26                                 0x0
#define BFV_SOCCTRL_PMUXD_GPIO26_SPI0CS3                                0x1
#define BFV_SOCCTRL_PMUXD_GPIO26_SPI0RDY                                0x2

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXD_GPIO25
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXD_GPIO25_GPIO25                                 0x0
#define BFV_SOCCTRL_PMUXD_GPIO25_SPI0CS2                                0x1

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXD_GPIO24
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXD_GPIO24_GPIO24                                 0x0
#define BFV_SOCCTRL_PMUXD_GPIO24_SPI0CS1                                0x1

#define REG_SOCCTRL_PMUXD           (*(volatile reg_socctrl_pmuxd_t*)((SOCCTRL_BASE_ADDRESS + 0x3C)))
#define REG_SOCCTRL_PMUXD_ADDR      (SOCCTRL_BASE_ADDRESS + 0x3C)
#define BP_SOCCTRL_PMUXD_RSVD0                                           30
#define BM_SOCCTRL_PMUXD_RSVD0                                   0xC0000000
#define BP_SOCCTRL_PMUXD_GPIO31                                          28
#define BM_SOCCTRL_PMUXD_GPIO31                                  0x30000000
#define BP_SOCCTRL_PMUXD_RSVD1                                           27
#define BM_SOCCTRL_PMUXD_RSVD1                                   0x08000000
#define BP_SOCCTRL_PMUXD_GPIO30                                          24
#define BM_SOCCTRL_PMUXD_GPIO30                                  0x07000000
#define BP_SOCCTRL_PMUXD_RSVD2                                           23
#define BM_SOCCTRL_PMUXD_RSVD2                                   0x00800000
#define BP_SOCCTRL_PMUXD_GPIO29                                          20
#define BM_SOCCTRL_PMUXD_GPIO29                                  0x00700000
#define BP_SOCCTRL_PMUXD_RSVD3                                           19
#define BM_SOCCTRL_PMUXD_RSVD3                                   0x00080000
#define BP_SOCCTRL_PMUXD_GPIO28                                          16
#define BM_SOCCTRL_PMUXD_GPIO28                                  0x00070000
#define BP_SOCCTRL_PMUXD_RSVD4                                           15
#define BM_SOCCTRL_PMUXD_RSVD4                                   0x00008000
#define BP_SOCCTRL_PMUXD_GPIO27                                          12
#define BM_SOCCTRL_PMUXD_GPIO27                                  0x00007000
#define BP_SOCCTRL_PMUXD_RSVD5                                           10
#define BM_SOCCTRL_PMUXD_RSVD5                                   0x00000C00
#define BP_SOCCTRL_PMUXD_GPIO26                                           8
#define BM_SOCCTRL_PMUXD_GPIO26                                  0x00000300
#define BP_SOCCTRL_PMUXD_RSVD6                                            5
#define BM_SOCCTRL_PMUXD_RSVD6                                   0x000000E0
#define BP_SOCCTRL_PMUXD_GPIO25                                           4
#define BM_SOCCTRL_PMUXD_GPIO25                                  0x00000010
#define BP_SOCCTRL_PMUXD_RSVD7                                            1
#define BM_SOCCTRL_PMUXD_RSVD7                                   0x0000000E
#define BP_SOCCTRL_PMUXD_GPIO24                                           0
#define BM_SOCCTRL_PMUXD_GPIO24                                  0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_pmuxe_u
{
  uint32_t V;
  struct reg_socctrl_pmuxe_s
  {
    uint32_t SPI0CLK             :2;
    uint32_t RSVD0               :2;
    uint32_t SPI0MOSI            :2;
    uint32_t RSVD1               :2;
    uint32_t SPI0MISO            :1;
    uint32_t RSVD2               :23;
  }BF;
} reg_socctrl_pmuxe_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXE_SPI0MISO
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXE_SPI0MISO_SPI0MISO                             0x0
#define BFV_SOCCTRL_PMUXE_SPI0MISO_SPISLV0MOSI                          0x1

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXE_SPI0MOSI
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXE_SPI0MOSI_MOSI                                 0x0
#define BFV_SOCCTRL_PMUXE_SPI0MOSI_I2C0SDA                              0x1
#define BFV_SOCCTRL_PMUXE_SPI0MOSI_SPISLV0MISO                          0x2

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_PMUXE_SPI0CLK
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_PMUXE_SPI0CLK_SPI0CLK                               0x0
#define BFV_SOCCTRL_PMUXE_SPI0CLK_I2C0SCK                               0x1
#define BFV_SOCCTRL_PMUXE_SPI0CLK_SPISLV0SCK                            0x2

#define REG_SOCCTRL_PMUXE           (*(volatile reg_socctrl_pmuxe_t*)((SOCCTRL_BASE_ADDRESS + 0x40)))
#define REG_SOCCTRL_PMUXE_ADDR      (SOCCTRL_BASE_ADDRESS + 0x40)
#define BP_SOCCTRL_PMUXE_RSVD0                                            9
#define BM_SOCCTRL_PMUXE_RSVD0                                   0xFFFFFE00
#define BP_SOCCTRL_PMUXE_SPI0MISO                                         8
#define BM_SOCCTRL_PMUXE_SPI0MISO                                0x00000100
#define BP_SOCCTRL_PMUXE_RSVD1                                            6
#define BM_SOCCTRL_PMUXE_RSVD1                                   0x000000C0
#define BP_SOCCTRL_PMUXE_SPI0MOSI                                         4
#define BM_SOCCTRL_PMUXE_SPI0MOSI                                0x00000030
#define BP_SOCCTRL_PMUXE_RSVD2                                            2
#define BM_SOCCTRL_PMUXE_RSVD2                                   0x0000000C
#define BP_SOCCTRL_PMUXE_SPI0CLK                                          0
#define BM_SOCCTRL_PMUXE_SPI0CLK                                 0x00000003

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_clk_cfg_u
{
  uint32_t V;
  struct reg_socctrl_clk_cfg_s
  {
    uint32_t ADC_CLK_SEL         :2;
    uint32_t RSVD0               :2;
    uint32_t UST_CLK_SEL         :2;
    uint32_t RSVD1               :2;
    uint32_t DSP_CLK_SEL         :2;
    uint32_t RSVD2               :2;
    uint32_t I2C_CLK_SEL         :1;
    uint32_t RSVD3               :19;
  }BF;
} reg_socctrl_clk_cfg_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_CLK_CFG_I2C_CLK_SEL
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_CLK_CFG_I2C_CLK_SEL_2MHZ                            0x0
#define BFV_SOCCTRL_CLK_CFG_I2C_CLK_SEL_4MHZ                            0x1

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_CLK_CFG_DSP_CLK_SEL
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_CLK_CFG_DSP_CLK_SEL_4MHZ                            0x0
#define BFV_SOCCTRL_CLK_CFG_DSP_CLK_SEL_8MHZ                            0x1
#define BFV_SOCCTRL_CLK_CFG_DSP_CLK_SEL_2MHZ                            0x2

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_CLK_CFG_UST_CLK_SEL
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_CLK_CFG_UST_CLK_SEL_4MHZ                            0x0
#define BFV_SOCCTRL_CLK_CFG_UST_CLK_SEL_8MHZ                            0x1
#define BFV_SOCCTRL_CLK_CFG_UST_CLK_SEL_2MHZ                            0x2

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_CLK_CFG_ADC_CLK_SEL
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_CLK_CFG_ADC_CLK_SEL_1MHZ_HFO                        0x0
#define BFV_SOCCTRL_CLK_CFG_ADC_CLK_SEL_2MHZ_HFO                        0x1
#define BFV_SOCCTRL_CLK_CFG_ADC_CLK_SEL_2MHZ_XTAL                       0x2
#define BFV_SOCCTRL_CLK_CFG_ADC_CLK_SEL_2MHZ_PAD                        0x3

#define REG_SOCCTRL_CLK_CFG           (*(volatile reg_socctrl_clk_cfg_t*)((SOCCTRL_BASE_ADDRESS + 0x50)))
#define REG_SOCCTRL_CLK_CFG_ADDR      (SOCCTRL_BASE_ADDRESS + 0x50)
#define BP_SOCCTRL_CLK_CFG_RSVD0                                         13
#define BM_SOCCTRL_CLK_CFG_RSVD0                                 0xFFFFE000
#define BP_SOCCTRL_CLK_CFG_I2C_CLK_SEL                                   12
#define BM_SOCCTRL_CLK_CFG_I2C_CLK_SEL                           0x00001000
#define BP_SOCCTRL_CLK_CFG_RSVD1                                         10
#define BM_SOCCTRL_CLK_CFG_RSVD1                                 0x00000C00
#define BP_SOCCTRL_CLK_CFG_DSP_CLK_SEL                                    8
#define BM_SOCCTRL_CLK_CFG_DSP_CLK_SEL                           0x00000300
#define BP_SOCCTRL_CLK_CFG_RSVD2                                          6
#define BM_SOCCTRL_CLK_CFG_RSVD2                                 0x000000C0
#define BP_SOCCTRL_CLK_CFG_UST_CLK_SEL                                    4
#define BM_SOCCTRL_CLK_CFG_UST_CLK_SEL                           0x00000030
#define BP_SOCCTRL_CLK_CFG_RSVD3                                          2
#define BM_SOCCTRL_CLK_CFG_RSVD3                                 0x0000000C
#define BP_SOCCTRL_CLK_CFG_ADC_CLK_SEL                                    0
#define BM_SOCCTRL_CLK_CFG_ADC_CLK_SEL                           0x00000003

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_tsense_ctrl_u
{
  uint32_t V;
  struct reg_socctrl_tsense_ctrl_s
  {
    uint32_t RST_N               :1;
    uint32_t RSVD0               :3;
    uint32_t READY               :1;
    uint32_t SATURATED           :1;
    uint32_t RSVD1               :26;
  }BF;
} reg_socctrl_tsense_ctrl_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_TSENSE_CTRL_SATURATED
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_TSENSE_CTRL_SATURATED_NORMAL                        0x0
#define BFV_SOCCTRL_TSENSE_CTRL_SATURATED_SATURATED                     0x1

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_TSENSE_CTRL_READY
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_TSENSE_CTRL_READY_WAITING                           0x0
#define BFV_SOCCTRL_TSENSE_CTRL_READY_READY                             0x1

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_TSENSE_CTRL_RST_N
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_TSENSE_CTRL_RST_N_RESET                             0x0
#define BFV_SOCCTRL_TSENSE_CTRL_RST_N_RUN                               0x1

#define REG_SOCCTRL_TSENSE_CTRL           (*(volatile reg_socctrl_tsense_ctrl_t*)((SOCCTRL_BASE_ADDRESS + 0x60)))
#define REG_SOCCTRL_TSENSE_CTRL_ADDR      (SOCCTRL_BASE_ADDRESS + 0x60)
#define BP_SOCCTRL_TSENSE_CTRL_RSVD0                                      6
#define BM_SOCCTRL_TSENSE_CTRL_RSVD0                             0xFFFFFFC0
#define BP_SOCCTRL_TSENSE_CTRL_SATURATED                                  5
#define BM_SOCCTRL_TSENSE_CTRL_SATURATED                         0x00000020
#define BP_SOCCTRL_TSENSE_CTRL_READY                                      4
#define BM_SOCCTRL_TSENSE_CTRL_READY                             0x00000010
#define BP_SOCCTRL_TSENSE_CTRL_RSVD1                                      1
#define BM_SOCCTRL_TSENSE_CTRL_RSVD1                             0x0000000E
#define BP_SOCCTRL_TSENSE_CTRL_RST_N                                      0
#define BM_SOCCTRL_TSENSE_CTRL_RST_N                             0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_tsense_freq_u
{
  uint32_t V;
  struct reg_socctrl_tsense_freq_s
  {
    uint32_t VALUE               :16;
    uint32_t RSVD0               :16;
  }BF;
} reg_socctrl_tsense_freq_t;

#endif  // __LANGUAGE_ASM__

#define REG_SOCCTRL_TSENSE_FREQ           (*(volatile reg_socctrl_tsense_freq_t*)((SOCCTRL_BASE_ADDRESS + 0x64)))
#define REG_SOCCTRL_TSENSE_FREQ_ADDR      (SOCCTRL_BASE_ADDRESS + 0x64)
#define BP_SOCCTRL_TSENSE_FREQ_RSVD0                                     16
#define BM_SOCCTRL_TSENSE_FREQ_RSVD0                             0xFFFF0000
#define BP_SOCCTRL_TSENSE_FREQ_VALUE                                      0
#define BM_SOCCTRL_TSENSE_FREQ_VALUE                             0x0000FFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_fpanel_u
{
  uint32_t V;
  struct reg_socctrl_fpanel_s
  {
    uint32_t RUN_STATE           :1;
    uint32_t CONTINUOUS          :1;
    uint32_t M3_OSC              :1;
    uint32_t DSP_OSC             :1;
    uint32_t OEN                 :1;
    uint32_t CLK_DISABLE         :1;
    uint32_t M3_OSC_DIV          :3;
    uint32_t DSP_OSC_DIV         :3;
    uint32_t RSVD0               :20;
  }BF;
} reg_socctrl_fpanel_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_FPANEL_DSP_OSC_DIV
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_FPANEL_DSP_OSC_DIV_DIV_BY_1                         0x0
#define BFV_SOCCTRL_FPANEL_DSP_OSC_DIV_DIV_BY_2                         0x1
#define BFV_SOCCTRL_FPANEL_DSP_OSC_DIV_DIV_BY_4                         0x2
#define BFV_SOCCTRL_FPANEL_DSP_OSC_DIV_DIV_BY_8                         0x3
#define BFV_SOCCTRL_FPANEL_DSP_OSC_DIV_DIV_BY_16                        0x4

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_FPANEL_M3_OSC_DIV
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_FPANEL_M3_OSC_DIV_DIV_BY_1                          0x0
#define BFV_SOCCTRL_FPANEL_M3_OSC_DIV_DIV_BY_2                          0x1
#define BFV_SOCCTRL_FPANEL_M3_OSC_DIV_DIV_BY_4                          0x2
#define BFV_SOCCTRL_FPANEL_M3_OSC_DIV_DIV_BY_8                          0x3
#define BFV_SOCCTRL_FPANEL_M3_OSC_DIV_DIV_BY_16                         0x4

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_FPANEL_DSP_OSC
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_FPANEL_DSP_OSC_ENABLE                               0x1
#define BFV_SOCCTRL_FPANEL_DSP_OSC_DISABLE                              0x0

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_FPANEL_M3_OSC
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_FPANEL_M3_OSC_ENABLE                                0x1
#define BFV_SOCCTRL_FPANEL_M3_OSC_DISABLE                               0x0

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_FPANEL_CONTINUOUS
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_FPANEL_CONTINUOUS_ALWAYS                            0x1
#define BFV_SOCCTRL_FPANEL_CONTINUOUS_LAUNCHED                          0x0

//-------------------------------------------------------------------------
// field value definitions for SOCCTRL_FPANEL_RUN_STATE
//-------------------------------------------------------------------------
#define BFV_SOCCTRL_FPANEL_RUN_STATE_HALT                               0x0
#define BFV_SOCCTRL_FPANEL_RUN_STATE_RUN                                0x1

#define REG_SOCCTRL_FPANEL           (*(volatile reg_socctrl_fpanel_t*)((SOCCTRL_BASE_ADDRESS + 0x74)))
#define REG_SOCCTRL_FPANEL_ADDR      (SOCCTRL_BASE_ADDRESS + 0x74)
#define BP_SOCCTRL_FPANEL_RSVD0                                          12
#define BM_SOCCTRL_FPANEL_RSVD0                                  0xFFFFF000
#define BP_SOCCTRL_FPANEL_DSP_OSC_DIV                                     9
#define BM_SOCCTRL_FPANEL_DSP_OSC_DIV                            0x00000E00
#define BP_SOCCTRL_FPANEL_M3_OSC_DIV                                      6
#define BM_SOCCTRL_FPANEL_M3_OSC_DIV                             0x000001C0
#define BP_SOCCTRL_FPANEL_CLK_DISABLE                                     5
#define BM_SOCCTRL_FPANEL_CLK_DISABLE                            0x00000020
#define BP_SOCCTRL_FPANEL_OEN                                             4
#define BM_SOCCTRL_FPANEL_OEN                                    0x00000010
#define BP_SOCCTRL_FPANEL_DSP_OSC                                         3
#define BM_SOCCTRL_FPANEL_DSP_OSC                                0x00000008
#define BP_SOCCTRL_FPANEL_M3_OSC                                          2
#define BM_SOCCTRL_FPANEL_M3_OSC                                 0x00000004
#define BP_SOCCTRL_FPANEL_CONTINUOUS                                      1
#define BM_SOCCTRL_FPANEL_CONTINUOUS                             0x00000002
#define BP_SOCCTRL_FPANEL_RUN_STATE                                       0
#define BM_SOCCTRL_FPANEL_RUN_STATE                              0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_socctrl_debug_read_only_u
{
  uint32_t V;
  struct reg_socctrl_debug_read_only_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_socctrl_debug_read_only_t;

#endif  // __LANGUAGE_ASM__

#define REG_SOCCTRL_DEBUG_READ_ONLY           (*(volatile reg_socctrl_debug_read_only_t*)((SOCCTRL_BASE_ADDRESS + 0x7C)))
#define REG_SOCCTRL_DEBUG_READ_ONLY_ADDR      (SOCCTRL_BASE_ADDRESS + 0x7C)
#define BP_SOCCTRL_DEBUG_READ_ONLY_VALUE                                  0
#define BM_SOCCTRL_DEBUG_READ_ONLY_VALUE                         0xFFFFFFFF

#define I2C_BASE_ADDRESS 0x50040000
#define I2C_OFFSET(n) (n * 0x80)


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c_config_u
{
  uint32_t V;
  struct reg_i2c_config_s
  {
    uint32_t RD_PUSHES_TX_FIFO   :1;
    uint32_t IGNORE_NACK         :1;
    uint32_t STALL_IF_RXFULL     :1;
    uint32_t END                 :1;
    uint32_t RSVD0               :2;
    uint32_t BYTE2_END           :1;
    uint32_t EN_RXFIFO_AT_START  :1;
    uint32_t RX_FIFO_INT_LEVEL   :5;
    uint32_t HOLD_AT_ACK         :1;
    uint32_t RSVD1               :18;
  }BF;
} reg_i2c_config_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C_CONFIG(N)       (*(volatile reg_i2c_config_t*)((I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x0)))
#define REG_I2C_CONFIG_ADDR(N)  (I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x0)
#define BP_I2C_CONFIG_RSVD0                                              14
#define BM_I2C_CONFIG_RSVD0                                      0xFFFFC000
#define BP_I2C_CONFIG_HOLD_AT_ACK                                        13
#define BM_I2C_CONFIG_HOLD_AT_ACK                                0x00002000
#define BP_I2C_CONFIG_RX_FIFO_INT_LEVEL                                   8
#define BM_I2C_CONFIG_RX_FIFO_INT_LEVEL                          0x00001F00
#define BP_I2C_CONFIG_EN_RXFIFO_AT_START                                  7
#define BM_I2C_CONFIG_EN_RXFIFO_AT_START                         0x00000080
#define BP_I2C_CONFIG_BYTE2_END                                           6
#define BM_I2C_CONFIG_BYTE2_END                                  0x00000040
#define BP_I2C_CONFIG_RSVD1                                               4
#define BM_I2C_CONFIG_RSVD1                                      0x00000030
#define BP_I2C_CONFIG_END                                                 3
#define BM_I2C_CONFIG_END                                        0x00000008
#define BP_I2C_CONFIG_STALL_IF_RXFULL                                     2
#define BM_I2C_CONFIG_STALL_IF_RXFULL                            0x00000004
#define BP_I2C_CONFIG_IGNORE_NACK                                         1
#define BM_I2C_CONFIG_IGNORE_NACK                                0x00000002
#define BP_I2C_CONFIG_RD_PUSHES_TX_FIFO                                   0
#define BM_I2C_CONFIG_RD_PUSHES_TX_FIFO                          0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c_txrx_1byte_fifo_data_u
{
  uint32_t V;
  struct reg_i2c_txrx_1byte_fifo_data_s
  {
    uint32_t DATA                :8;
    uint32_t RSVD0               :24;
  }BF;
} reg_i2c_txrx_1byte_fifo_data_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C_TXRX_1BYTE_FIFO_DATA(N)       (*(volatile reg_i2c_txrx_1byte_fifo_data_t*)((I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x4)))
#define REG_I2C_TXRX_1BYTE_FIFO_DATA_ADDR(N)  (I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x4)
#define BP_I2C_TXRX_1BYTE_FIFO_DATA_RSVD0                                 8
#define BM_I2C_TXRX_1BYTE_FIFO_DATA_RSVD0                        0xFFFFFF00
#define BP_I2C_TXRX_1BYTE_FIFO_DATA_DATA                                  0
#define BM_I2C_TXRX_1BYTE_FIFO_DATA_DATA                         0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c_status_u
{
  uint32_t V;
  struct reg_i2c_status_s
  {
    uint32_t START_BUSY          :1;
    uint32_t NACK_ESCAPE         :1;
    uint32_t SM_IN_NACK_HOLD     :1;
    uint32_t TXFIFO_HAS_LEVEL_SPACE:1;
    uint32_t TXFIFO_HAS_1SPACE   :1;
    uint32_t RXFIFO_HAS_1DATA    :1;
    uint32_t XMIT_COMPLETE       :1;
    uint32_t RX_FIFO_HIT_LEVEL   :1;
    uint32_t CMD_DONE            :1;
    uint32_t RSVD0               :23;
  }BF;
} reg_i2c_status_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C_STATUS(N)       (*(volatile reg_i2c_status_t*)((I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0xC)))
#define REG_I2C_STATUS_ADDR(N)  (I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0xC)
#define BP_I2C_STATUS_RSVD0                                               9
#define BM_I2C_STATUS_RSVD0                                      0xFFFFFE00
#define BP_I2C_STATUS_CMD_DONE                                            8
#define BM_I2C_STATUS_CMD_DONE                                   0x00000100
#define BP_I2C_STATUS_RX_FIFO_HIT_LEVEL                                   7
#define BM_I2C_STATUS_RX_FIFO_HIT_LEVEL                          0x00000080
#define BP_I2C_STATUS_XMIT_COMPLETE                                       6
#define BM_I2C_STATUS_XMIT_COMPLETE                              0x00000040
#define BP_I2C_STATUS_RXFIFO_HAS_1DATA                                    5
#define BM_I2C_STATUS_RXFIFO_HAS_1DATA                           0x00000020
#define BP_I2C_STATUS_TXFIFO_HAS_1SPACE                                   4
#define BM_I2C_STATUS_TXFIFO_HAS_1SPACE                          0x00000010
#define BP_I2C_STATUS_TXFIFO_HAS_LEVEL_SPACE                              3
#define BM_I2C_STATUS_TXFIFO_HAS_LEVEL_SPACE                     0x00000008
#define BP_I2C_STATUS_SM_IN_NACK_HOLD                                     2
#define BM_I2C_STATUS_SM_IN_NACK_HOLD                            0x00000004
#define BP_I2C_STATUS_NACK_ESCAPE                                         1
#define BM_I2C_STATUS_NACK_ESCAPE                                0x00000002
#define BP_I2C_STATUS_START_BUSY                                          0
#define BM_I2C_STATUS_START_BUSY                                 0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c_tx_fifo_debug_u
{
  uint32_t V;
  struct reg_i2c_tx_fifo_debug_s
  {
    uint32_t ENTRIES             :5;
    uint32_t RSVD0               :1;
    uint32_t OFLOW               :1;
    uint32_t UFLOW               :1;
    uint32_t MAX_ENTRIES         :5;
    uint32_t RSVD1               :19;
  }BF;
} reg_i2c_tx_fifo_debug_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C_TX_FIFO_DEBUG(N)       (*(volatile reg_i2c_tx_fifo_debug_t*)((I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x10)))
#define REG_I2C_TX_FIFO_DEBUG_ADDR(N)  (I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x10)
#define BP_I2C_TX_FIFO_DEBUG_RSVD0                                       13
#define BM_I2C_TX_FIFO_DEBUG_RSVD0                               0xFFFFE000
#define BP_I2C_TX_FIFO_DEBUG_MAX_ENTRIES                                  8
#define BM_I2C_TX_FIFO_DEBUG_MAX_ENTRIES                         0x00001F00
#define BP_I2C_TX_FIFO_DEBUG_UFLOW                                        7
#define BM_I2C_TX_FIFO_DEBUG_UFLOW                               0x00000080
#define BP_I2C_TX_FIFO_DEBUG_OFLOW                                        6
#define BM_I2C_TX_FIFO_DEBUG_OFLOW                               0x00000040
#define BP_I2C_TX_FIFO_DEBUG_RSVD1                                        5
#define BM_I2C_TX_FIFO_DEBUG_RSVD1                               0x00000020
#define BP_I2C_TX_FIFO_DEBUG_ENTRIES                                      0
#define BM_I2C_TX_FIFO_DEBUG_ENTRIES                             0x0000001F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c_rx_fifo_debug_u
{
  uint32_t V;
  struct reg_i2c_rx_fifo_debug_s
  {
    uint32_t ENTRIES             :5;
    uint32_t RSVD0               :1;
    uint32_t OFLOW               :1;
    uint32_t UFLOW               :1;
    uint32_t MAX_ENTRIES         :5;
    uint32_t RSVD1               :19;
  }BF;
} reg_i2c_rx_fifo_debug_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C_RX_FIFO_DEBUG(N)       (*(volatile reg_i2c_rx_fifo_debug_t*)((I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x14)))
#define REG_I2C_RX_FIFO_DEBUG_ADDR(N)  (I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x14)
#define BP_I2C_RX_FIFO_DEBUG_RSVD0                                       13
#define BM_I2C_RX_FIFO_DEBUG_RSVD0                               0xFFFFE000
#define BP_I2C_RX_FIFO_DEBUG_MAX_ENTRIES                                  8
#define BM_I2C_RX_FIFO_DEBUG_MAX_ENTRIES                         0x00001F00
#define BP_I2C_RX_FIFO_DEBUG_UFLOW                                        7
#define BM_I2C_RX_FIFO_DEBUG_UFLOW                               0x00000080
#define BP_I2C_RX_FIFO_DEBUG_OFLOW                                        6
#define BM_I2C_RX_FIFO_DEBUG_OFLOW                               0x00000040
#define BP_I2C_RX_FIFO_DEBUG_RSVD1                                        5
#define BM_I2C_RX_FIFO_DEBUG_RSVD1                               0x00000020
#define BP_I2C_RX_FIFO_DEBUG_ENTRIES                                      0
#define BM_I2C_RX_FIFO_DEBUG_ENTRIES                             0x0000001F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c_general_debug_u
{
  uint32_t V;
  struct reg_i2c_general_debug_s
  {
    uint32_t STATE_REG           :5;
    uint32_t I2C_SCL_OEN         :1;
    uint32_t I2C_SCL_LOCAL       :1;
    uint32_t I2C_SDA_OEN         :1;
    uint32_t I2C_SDA_LOCAL       :1;
    uint32_t STRETCH_ACTIVE      :1;
    uint32_t BB_SCL_OEN          :1;
    uint32_t BB_SDA_OEN          :1;
    uint32_t EN_BIT_BANG         :1;
    uint32_t MONITOR_EN          :1;
    uint32_t MONITOR_SDA         :1;
    uint32_t LAST_BYTE_HAD_NACK  :1;
    uint32_t RSVD0               :16;
  }BF;
} reg_i2c_general_debug_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C_GENERAL_DEBUG(N)       (*(volatile reg_i2c_general_debug_t*)((I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x1C)))
#define REG_I2C_GENERAL_DEBUG_ADDR(N)  (I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x1C)
#define BP_I2C_GENERAL_DEBUG_RSVD0                                       16
#define BM_I2C_GENERAL_DEBUG_RSVD0                               0xFFFF0000
#define BP_I2C_GENERAL_DEBUG_LAST_BYTE_HAD_NACK                          15
#define BM_I2C_GENERAL_DEBUG_LAST_BYTE_HAD_NACK                  0x00008000
#define BP_I2C_GENERAL_DEBUG_MONITOR_SDA                                 14
#define BM_I2C_GENERAL_DEBUG_MONITOR_SDA                         0x00004000
#define BP_I2C_GENERAL_DEBUG_MONITOR_EN                                  13
#define BM_I2C_GENERAL_DEBUG_MONITOR_EN                          0x00002000
#define BP_I2C_GENERAL_DEBUG_EN_BIT_BANG                                 12
#define BM_I2C_GENERAL_DEBUG_EN_BIT_BANG                         0x00001000
#define BP_I2C_GENERAL_DEBUG_BB_SDA_OEN                                  11
#define BM_I2C_GENERAL_DEBUG_BB_SDA_OEN                          0x00000800
#define BP_I2C_GENERAL_DEBUG_BB_SCL_OEN                                  10
#define BM_I2C_GENERAL_DEBUG_BB_SCL_OEN                          0x00000400
#define BP_I2C_GENERAL_DEBUG_STRETCH_ACTIVE                               9
#define BM_I2C_GENERAL_DEBUG_STRETCH_ACTIVE                      0x00000200
#define BP_I2C_GENERAL_DEBUG_I2C_SDA_LOCAL                                8
#define BM_I2C_GENERAL_DEBUG_I2C_SDA_LOCAL                       0x00000100
#define BP_I2C_GENERAL_DEBUG_I2C_SDA_OEN                                  7
#define BM_I2C_GENERAL_DEBUG_I2C_SDA_OEN                         0x00000080
#define BP_I2C_GENERAL_DEBUG_I2C_SCL_LOCAL                                6
#define BM_I2C_GENERAL_DEBUG_I2C_SCL_LOCAL                       0x00000040
#define BP_I2C_GENERAL_DEBUG_I2C_SCL_OEN                                  5
#define BM_I2C_GENERAL_DEBUG_I2C_SCL_OEN                         0x00000020
#define BP_I2C_GENERAL_DEBUG_STATE_REG                                    0
#define BM_I2C_GENERAL_DEBUG_STATE_REG                           0x0000001F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c_int_en_u
{
  uint32_t V;
  struct reg_i2c_int_en_s
  {
    uint32_t RSVD0               :2;
    uint32_t UNACK_EN            :1;
    uint32_t TXFIFO_HAS_LEVEL_SPACE_EN:1;
    uint32_t TX_DATA_EN          :1;
    uint32_t RX_DATA_EN          :1;
    uint32_t TX_COMPLETE_EN      :1;
    uint32_t RX_HIT_LEVEL_EN     :1;
    uint32_t CMD_DONE            :1;
    uint32_t RSVD1               :2;
    uint32_t TXFIFO_HAS_LEVEL_SPACE_EN_DSTRDY:1;
    uint32_t TX_DATA_EN_DSTRDY   :1;
    uint32_t RX_DATA_EN_SRCRDY   :1;
    uint32_t RSVD2               :1;
    uint32_t RX_HIT_LEVEL_EN_SRCRDY:1;
    uint32_t RSVD3               :16;
  }BF;
} reg_i2c_int_en_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C_INT_EN(N)       (*(volatile reg_i2c_int_en_t*)((I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x20)))
#define REG_I2C_INT_EN_ADDR(N)  (I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x20)
#define BP_I2C_INT_EN_RSVD0                                              16
#define BM_I2C_INT_EN_RSVD0                                      0xFFFF0000
#define BP_I2C_INT_EN_RX_HIT_LEVEL_EN_SRCRDY                             15
#define BM_I2C_INT_EN_RX_HIT_LEVEL_EN_SRCRDY                     0x00008000
#define BP_I2C_INT_EN_RSVD1                                              14
#define BM_I2C_INT_EN_RSVD1                                      0x00004000
#define BP_I2C_INT_EN_RX_DATA_EN_SRCRDY                                  13
#define BM_I2C_INT_EN_RX_DATA_EN_SRCRDY                          0x00002000
#define BP_I2C_INT_EN_TX_DATA_EN_DSTRDY                                  12
#define BM_I2C_INT_EN_TX_DATA_EN_DSTRDY                          0x00001000
#define BP_I2C_INT_EN_TXFIFO_HAS_LEVEL_SPACE_EN_DSTRDY                   11
#define BM_I2C_INT_EN_TXFIFO_HAS_LEVEL_SPACE_EN_DSTRDY           0x00000800
#define BP_I2C_INT_EN_RSVD2                                               9
#define BM_I2C_INT_EN_RSVD2                                      0x00000600
#define BP_I2C_INT_EN_CMD_DONE                                            8
#define BM_I2C_INT_EN_CMD_DONE                                   0x00000100
#define BP_I2C_INT_EN_RX_HIT_LEVEL_EN                                     7
#define BM_I2C_INT_EN_RX_HIT_LEVEL_EN                            0x00000080
#define BP_I2C_INT_EN_TX_COMPLETE_EN                                      6
#define BM_I2C_INT_EN_TX_COMPLETE_EN                             0x00000040
#define BP_I2C_INT_EN_RX_DATA_EN                                          5
#define BM_I2C_INT_EN_RX_DATA_EN                                 0x00000020
#define BP_I2C_INT_EN_TX_DATA_EN                                          4
#define BM_I2C_INT_EN_TX_DATA_EN                                 0x00000010
#define BP_I2C_INT_EN_TXFIFO_HAS_LEVEL_SPACE_EN                           3
#define BM_I2C_INT_EN_TXFIFO_HAS_LEVEL_SPACE_EN                  0x00000008
#define BP_I2C_INT_EN_UNACK_EN                                            2
#define BM_I2C_INT_EN_UNACK_EN                                   0x00000004
#define BP_I2C_INT_EN_RSVD3                                               0
#define BM_I2C_INT_EN_RSVD3                                      0x00000003

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c_cmd_fifo_data_u
{
  uint32_t V;
  struct reg_i2c_cmd_fifo_data_s
  {
    uint32_t CMD_SRD             :2;
    uint32_t EXP_1NACK           :1;
    uint32_t RSVD0               :1;
    uint32_t CMD_NACK            :2;
    uint32_t CMD_RXFIFO          :2;
    uint32_t RSVD1               :24;
  }BF;
} reg_i2c_cmd_fifo_data_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for I2C_CMD_FIFO_DATA_CMD_RXFIFO
//-------------------------------------------------------------------------
#define BFV_I2C_CMD_FIFO_DATA_CMD_RXFIFO_NOTHING                        0x0
#define BFV_I2C_CMD_FIFO_DATA_CMD_RXFIFO_DISABLE_RXFIFO                 0x1
#define BFV_I2C_CMD_FIFO_DATA_CMD_RXFIFO_ENABLE_RXFIFO                  0x3

//-------------------------------------------------------------------------
// field value definitions for I2C_CMD_FIFO_DATA_CMD_NACK
//-------------------------------------------------------------------------
#define BFV_I2C_CMD_FIFO_DATA_CMD_NACK_NOTHING                          0x0
#define BFV_I2C_CMD_FIFO_DATA_CMD_NACK_DRIVE_NACK_LOW                   0x1
#define BFV_I2C_CMD_FIFO_DATA_CMD_NACK_DRIVE_NACK_HIGH                  0x3

//-------------------------------------------------------------------------
// field value definitions for I2C_CMD_FIFO_DATA_CMD_SRD
//-------------------------------------------------------------------------
#define BFV_I2C_CMD_FIFO_DATA_CMD_SRD_NOTHING                           0x0
#define BFV_I2C_CMD_FIFO_DATA_CMD_SRD_RESTART                           0x1
#define BFV_I2C_CMD_FIFO_DATA_CMD_SRD_STOP                              0x2
#define BFV_I2C_CMD_FIFO_DATA_CMD_SRD_DUMMYBYTE                         0x3

#define REG_I2C_CMD_FIFO_DATA(N)       (*(volatile reg_i2c_cmd_fifo_data_t*)((I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x24)))
#define REG_I2C_CMD_FIFO_DATA_ADDR(N)  (I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x24)
#define BP_I2C_CMD_FIFO_DATA_RSVD0                                        8
#define BM_I2C_CMD_FIFO_DATA_RSVD0                               0xFFFFFF00
#define BP_I2C_CMD_FIFO_DATA_CMD_RXFIFO                                   6
#define BM_I2C_CMD_FIFO_DATA_CMD_RXFIFO                          0x000000C0
#define BP_I2C_CMD_FIFO_DATA_CMD_NACK                                     4
#define BM_I2C_CMD_FIFO_DATA_CMD_NACK                            0x00000030
#define BP_I2C_CMD_FIFO_DATA_RSVD1                                        3
#define BM_I2C_CMD_FIFO_DATA_RSVD1                               0x00000008
#define BP_I2C_CMD_FIFO_DATA_EXP_1NACK                                    2
#define BM_I2C_CMD_FIFO_DATA_EXP_1NACK                           0x00000004
#define BP_I2C_CMD_FIFO_DATA_CMD_SRD                                      0
#define BM_I2C_CMD_FIFO_DATA_CMD_SRD                             0x00000003

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c_config2_u
{
  uint32_t V;
  struct reg_i2c_config2_s
  {
    uint32_t SDA_HYSTERISIS_LEVEL:4;
    uint32_t DISABLE_SDA_HYSTERSIS:1;
    uint32_t DISABLE_METAFLOP    :1;
    uint32_t CLR_STICKY          :1;
    uint32_t SOFT_RST            :1;
    uint32_t CLK_ON              :1;
    uint32_t AGGR_CLK_GATING     :1;
    uint32_t SCL_HYSTERISIS_LEVEL:4;
    uint32_t DISABLE_SCL_HYSTERSIS:1;
    uint32_t RSVD0               :17;
  }BF;
} reg_i2c_config2_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C_CONFIG2(N)       (*(volatile reg_i2c_config2_t*)((I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x28)))
#define REG_I2C_CONFIG2_ADDR(N)  (I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x28)
#define BP_I2C_CONFIG2_RSVD0                                             15
#define BM_I2C_CONFIG2_RSVD0                                     0xFFFF8000
#define BP_I2C_CONFIG2_DISABLE_SCL_HYSTERSIS                             14
#define BM_I2C_CONFIG2_DISABLE_SCL_HYSTERSIS                     0x00004000
#define BP_I2C_CONFIG2_SCL_HYSTERISIS_LEVEL                              10
#define BM_I2C_CONFIG2_SCL_HYSTERISIS_LEVEL                      0x00003C00
#define BP_I2C_CONFIG2_AGGR_CLK_GATING                                    9
#define BM_I2C_CONFIG2_AGGR_CLK_GATING                           0x00000200
#define BP_I2C_CONFIG2_CLK_ON                                             8
#define BM_I2C_CONFIG2_CLK_ON                                    0x00000100
#define BP_I2C_CONFIG2_SOFT_RST                                           7
#define BM_I2C_CONFIG2_SOFT_RST                                  0x00000080
#define BP_I2C_CONFIG2_CLR_STICKY                                         6
#define BM_I2C_CONFIG2_CLR_STICKY                                0x00000040
#define BP_I2C_CONFIG2_DISABLE_METAFLOP                                   5
#define BM_I2C_CONFIG2_DISABLE_METAFLOP                          0x00000020
#define BP_I2C_CONFIG2_DISABLE_SDA_HYSTERSIS                              4
#define BM_I2C_CONFIG2_DISABLE_SDA_HYSTERSIS                     0x00000010
#define BP_I2C_CONFIG2_SDA_HYSTERISIS_LEVEL                               0
#define BM_I2C_CONFIG2_SDA_HYSTERISIS_LEVEL                      0x0000000F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c_clk_config1_u
{
  uint32_t V;
  struct reg_i2c_clk_config1_s
  {
    uint32_t CYCLE_TIME          :8;
    uint32_t IBG_TIME            :8;
    uint32_t RSVD0               :16;
  }BF;
} reg_i2c_clk_config1_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C_CLK_CONFIG1(N)       (*(volatile reg_i2c_clk_config1_t*)((I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x30)))
#define REG_I2C_CLK_CONFIG1_ADDR(N)  (I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x30)
#define BP_I2C_CLK_CONFIG1_RSVD0                                         16
#define BM_I2C_CLK_CONFIG1_RSVD0                                 0xFFFF0000
#define BP_I2C_CLK_CONFIG1_IBG_TIME                                       8
#define BM_I2C_CLK_CONFIG1_IBG_TIME                              0x0000FF00
#define BP_I2C_CLK_CONFIG1_CYCLE_TIME                                     0
#define BM_I2C_CLK_CONFIG1_CYCLE_TIME                            0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c_clk_config2_u
{
  uint32_t V;
  struct reg_i2c_clk_config2_s
  {
    uint32_t TX_TIME             :8;
    uint32_t RX_TIME             :8;
    uint32_t RSVD0               :16;
  }BF;
} reg_i2c_clk_config2_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C_CLK_CONFIG2(N)       (*(volatile reg_i2c_clk_config2_t*)((I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x34)))
#define REG_I2C_CLK_CONFIG2_ADDR(N)  (I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x34)
#define BP_I2C_CLK_CONFIG2_RSVD0                                         16
#define BM_I2C_CLK_CONFIG2_RSVD0                                 0xFFFF0000
#define BP_I2C_CLK_CONFIG2_RX_TIME                                        8
#define BM_I2C_CLK_CONFIG2_RX_TIME                               0x0000FF00
#define BP_I2C_CLK_CONFIG2_TX_TIME                                        0
#define BM_I2C_CLK_CONFIG2_TX_TIME                               0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c_clk_config3_u
{
  uint32_t V;
  struct reg_i2c_clk_config3_s
  {
    uint32_t PE_TIME             :8;
    uint32_t NE_TIME             :8;
    uint32_t RSVD0               :16;
  }BF;
} reg_i2c_clk_config3_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C_CLK_CONFIG3(N)       (*(volatile reg_i2c_clk_config3_t*)((I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x38)))
#define REG_I2C_CLK_CONFIG3_ADDR(N)  (I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x38)
#define BP_I2C_CLK_CONFIG3_RSVD0                                         16
#define BM_I2C_CLK_CONFIG3_RSVD0                                 0xFFFF0000
#define BP_I2C_CLK_CONFIG3_NE_TIME                                        8
#define BM_I2C_CLK_CONFIG3_NE_TIME                               0x0000FF00
#define BP_I2C_CLK_CONFIG3_PE_TIME                                        0
#define BM_I2C_CLK_CONFIG3_PE_TIME                               0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c_scl_config_u
{
  uint32_t V;
  struct reg_i2c_scl_config_s
  {
    uint32_t MIN_SCL_HIGH        :7;
    uint32_t RSVD0               :1;
    uint32_t HARD_DRIVE_SCL      :1;
    uint32_t DISABLE_SCL_HIGH_CHK:1;
    uint32_t DISABLE_FULL_STRETCH_SUPPORT:1;
    uint32_t RSVD1               :21;
  }BF;
} reg_i2c_scl_config_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C_SCL_CONFIG(N)       (*(volatile reg_i2c_scl_config_t*)((I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x3C)))
#define REG_I2C_SCL_CONFIG_ADDR(N)  (I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x3C)
#define BP_I2C_SCL_CONFIG_RSVD0                                          11
#define BM_I2C_SCL_CONFIG_RSVD0                                  0xFFFFF800
#define BP_I2C_SCL_CONFIG_DISABLE_FULL_STRETCH_SUPPORT                   10
#define BM_I2C_SCL_CONFIG_DISABLE_FULL_STRETCH_SUPPORT           0x00000400
#define BP_I2C_SCL_CONFIG_DISABLE_SCL_HIGH_CHK                            9
#define BM_I2C_SCL_CONFIG_DISABLE_SCL_HIGH_CHK                   0x00000200
#define BP_I2C_SCL_CONFIG_HARD_DRIVE_SCL                                  8
#define BM_I2C_SCL_CONFIG_HARD_DRIVE_SCL                         0x00000100
#define BP_I2C_SCL_CONFIG_RSVD1                                           7
#define BM_I2C_SCL_CONFIG_RSVD1                                  0x00000080
#define BP_I2C_SCL_CONFIG_MIN_SCL_HIGH                                    0
#define BM_I2C_SCL_CONFIG_MIN_SCL_HIGH                           0x0000007F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c_rx_2byte_fifo_data_u
{
  uint32_t V;
  struct reg_i2c_rx_2byte_fifo_data_s
  {
    uint32_t DATA                :16;
    uint32_t RSVD0               :16;
  }BF;
} reg_i2c_rx_2byte_fifo_data_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C_RX_2BYTE_FIFO_DATA(N)       (*(volatile reg_i2c_rx_2byte_fifo_data_t*)((I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x40)))
#define REG_I2C_RX_2BYTE_FIFO_DATA_ADDR(N)  (I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x40)
#define BP_I2C_RX_2BYTE_FIFO_DATA_RSVD0                                  16
#define BM_I2C_RX_2BYTE_FIFO_DATA_RSVD0                          0xFFFF0000
#define BP_I2C_RX_2BYTE_FIFO_DATA_DATA                                    0
#define BM_I2C_RX_2BYTE_FIFO_DATA_DATA                           0x0000FFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c_rx_4byte_fifo_data_u
{
  uint32_t V;
  struct reg_i2c_rx_4byte_fifo_data_s
  {
    uint32_t DATA                :32;
  }BF;
} reg_i2c_rx_4byte_fifo_data_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C_RX_4BYTE_FIFO_DATA(N)       (*(volatile reg_i2c_rx_4byte_fifo_data_t*)((I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x44)))
#define REG_I2C_RX_4BYTE_FIFO_DATA_ADDR(N)  (I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x44)
#define BP_I2C_RX_4BYTE_FIFO_DATA_DATA                                    0
#define BM_I2C_RX_4BYTE_FIFO_DATA_DATA                           0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c_rise_time_debug_u
{
  uint32_t V;
  struct reg_i2c_rise_time_debug_s
  {
    uint32_t VALUE               :8;
    uint32_t RSVD0               :24;
  }BF;
} reg_i2c_rise_time_debug_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C_RISE_TIME_DEBUG(N)       (*(volatile reg_i2c_rise_time_debug_t*)((I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x48)))
#define REG_I2C_RISE_TIME_DEBUG_ADDR(N)  (I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x48)
#define BP_I2C_RISE_TIME_DEBUG_RSVD0                                      8
#define BM_I2C_RISE_TIME_DEBUG_RSVD0                             0xFFFFFF00
#define BP_I2C_RISE_TIME_DEBUG_VALUE                                      0
#define BM_I2C_RISE_TIME_DEBUG_VALUE                             0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c_dummy_bytes_u
{
  uint32_t V;
  struct reg_i2c_dummy_bytes_s
  {
    uint32_t VALUE               :16;
    uint32_t RSVD0               :16;
  }BF;
} reg_i2c_dummy_bytes_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C_DUMMY_BYTES(N)       (*(volatile reg_i2c_dummy_bytes_t*)((I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x4C)))
#define REG_I2C_DUMMY_BYTES_ADDR(N)  (I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x4C)
#define BP_I2C_DUMMY_BYTES_RSVD0                                         16
#define BM_I2C_DUMMY_BYTES_RSVD0                                 0xFFFF0000
#define BP_I2C_DUMMY_BYTES_VALUE                                          0
#define BM_I2C_DUMMY_BYTES_VALUE                                 0x0000FFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c_tx_1byte_data_cmd_fifo_u
{
  uint32_t V;
  struct reg_i2c_tx_1byte_data_cmd_fifo_s
  {
    uint32_t DATA                :8;
    uint32_t CMD                 :8;
    uint32_t RSVD0               :16;
  }BF;
} reg_i2c_tx_1byte_data_cmd_fifo_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C_TX_1BYTE_DATA_CMD_FIFO(N)       (*(volatile reg_i2c_tx_1byte_data_cmd_fifo_t*)((I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x50)))
#define REG_I2C_TX_1BYTE_DATA_CMD_FIFO_ADDR(N)  (I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x50)
#define BP_I2C_TX_1BYTE_DATA_CMD_FIFO_RSVD0                              16
#define BM_I2C_TX_1BYTE_DATA_CMD_FIFO_RSVD0                      0xFFFF0000
#define BP_I2C_TX_1BYTE_DATA_CMD_FIFO_CMD                                 8
#define BM_I2C_TX_1BYTE_DATA_CMD_FIFO_CMD                        0x0000FF00
#define BP_I2C_TX_1BYTE_DATA_CMD_FIFO_DATA                                0
#define BM_I2C_TX_1BYTE_DATA_CMD_FIFO_DATA                       0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2c_int_act_u
{
  uint32_t V;
  struct reg_i2c_int_act_s
  {
    uint32_t RSVD0               :2;
    uint32_t UNACK_ACT           :1;
    uint32_t TXFIFO_HAS_LEVEL_SPACE_ACT:1;
    uint32_t TX_DATA_ACT         :1;
    uint32_t RX_DATA_ACT         :1;
    uint32_t TX_COMPLETE_ACT     :1;
    uint32_t RX_HIT_LEVEL_ACT    :1;
    uint32_t CMD_DONE_ACT        :1;
    uint32_t RSVD1               :23;
  }BF;
} reg_i2c_int_act_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2C_INT_ACT(N)       (*(volatile reg_i2c_int_act_t*)((I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x54)))
#define REG_I2C_INT_ACT_ADDR(N)  (I2C_BASE_ADDRESS + I2C_OFFSET(N) + 0x54)
#define BP_I2C_INT_ACT_RSVD0                                              9
#define BM_I2C_INT_ACT_RSVD0                                     0xFFFFFE00
#define BP_I2C_INT_ACT_CMD_DONE_ACT                                       8
#define BM_I2C_INT_ACT_CMD_DONE_ACT                              0x00000100
#define BP_I2C_INT_ACT_RX_HIT_LEVEL_ACT                                   7
#define BM_I2C_INT_ACT_RX_HIT_LEVEL_ACT                          0x00000080
#define BP_I2C_INT_ACT_TX_COMPLETE_ACT                                    6
#define BM_I2C_INT_ACT_TX_COMPLETE_ACT                           0x00000040
#define BP_I2C_INT_ACT_RX_DATA_ACT                                        5
#define BM_I2C_INT_ACT_RX_DATA_ACT                               0x00000020
#define BP_I2C_INT_ACT_TX_DATA_ACT                                        4
#define BM_I2C_INT_ACT_TX_DATA_ACT                               0x00000010
#define BP_I2C_INT_ACT_TXFIFO_HAS_LEVEL_SPACE_ACT                         3
#define BM_I2C_INT_ACT_TXFIFO_HAS_LEVEL_SPACE_ACT                0x00000008
#define BP_I2C_INT_ACT_UNACK_ACT                                          2
#define BM_I2C_INT_ACT_UNACK_ACT                                 0x00000004
#define BP_I2C_INT_ACT_RSVD1                                              0
#define BM_I2C_INT_ACT_RSVD1                                     0x00000003

#define I2S_BASE_ADDRESS 0x50050100


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2s_csr_u
{
  uint32_t V;
  struct reg_i2s_csr_s
  {
    uint32_t I2S_EN              :1;
    uint32_t RSVD0               :31;
  }BF;
} reg_i2s_csr_t;

#endif  // __LANGUAGE_ASM__

#define REG_I2S_CSR           (*(volatile reg_i2s_csr_t*)((I2S_BASE_ADDRESS + 0x0)))
#define REG_I2S_CSR_ADDR      (I2S_BASE_ADDRESS + 0x0)
#define BP_I2S_CSR_RSVD0                                                  1
#define BM_I2S_CSR_RSVD0                                         0xFFFFFFFE
#define BP_I2S_CSR_I2S_EN                                                 0
#define BM_I2S_CSR_I2S_EN                                        0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_i2s_csr2_u
{
  uint32_t V;
  struct reg_i2s_csr2_s
  {
    uint32_t SAMPLE_FREQ         :2;
    uint32_t BIT64_MODE          :1;
    uint32_t SFTRST              :1;
    uint32_t RSVD0               :28;
  }BF;
} reg_i2s_csr2_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for I2S_CSR2_SFTRST
//-------------------------------------------------------------------------
#define BFV_I2S_CSR2_SFTRST_RST                                         0x1

#define REG_I2S_CSR2           (*(volatile reg_i2s_csr2_t*)((I2S_BASE_ADDRESS + 0x4)))
#define REG_I2S_CSR2_ADDR      (I2S_BASE_ADDRESS + 0x4)
#define BP_I2S_CSR2_RSVD0                                                 4
#define BM_I2S_CSR2_RSVD0                                        0xFFFFFFF0
#define BP_I2S_CSR2_SFTRST                                                3
#define BM_I2S_CSR2_SFTRST                                       0x00000008
#define BP_I2S_CSR2_BIT64_MODE                                            2
#define BM_I2S_CSR2_BIT64_MODE                                   0x00000004
#define BP_I2S_CSR2_SAMPLE_FREQ                                           0
#define BM_I2S_CSR2_SAMPLE_FREQ                                  0x00000003

#define PDM_BASE_ADDRESS 0x50050200
#define PDM_OFFSET(n) (n * 0x100)


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pdm_pcma_ctrl_u
{
  uint32_t V;
  struct reg_pdm_pcma_ctrl_s
  {
    uint32_t EN                  :1;
    uint32_t SFTRST              :1;
    uint32_t RSVD0               :30;
  }BF;
} reg_pdm_pcma_ctrl_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for PDM_PCMA_CTRL_SFTRST
//-------------------------------------------------------------------------
#define BFV_PDM_PCMA_CTRL_SFTRST_RST                                    0x1

//-------------------------------------------------------------------------
// field value definitions for PDM_PCMA_CTRL_EN
//-------------------------------------------------------------------------
#define BFV_PDM_PCMA_CTRL_EN_DISABLE                                    0x0
#define BFV_PDM_PCMA_CTRL_EN_ENABLE                                     0x1

#define REG_PDM_PCMA_CTRL(N)       (*(volatile reg_pdm_pcma_ctrl_t*)((PDM_BASE_ADDRESS + PDM_OFFSET(N) + 0x0)))
#define REG_PDM_PCMA_CTRL_ADDR(N)  (PDM_BASE_ADDRESS + PDM_OFFSET(N) + 0x0)
#define BP_PDM_PCMA_CTRL_RSVD0                                            2
#define BM_PDM_PCMA_CTRL_RSVD0                                   0xFFFFFFFC
#define BP_PDM_PCMA_CTRL_SFTRST                                           1
#define BM_PDM_PCMA_CTRL_SFTRST                                  0x00000002
#define BP_PDM_PCMA_CTRL_EN                                               0
#define BM_PDM_PCMA_CTRL_EN                                      0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pdm_pdm_core_conf_u
{
  uint32_t V;
  struct reg_pdm_pdm_core_conf_s
  {
    uint32_t LRSWAP              :1;
    uint32_t SOFT_MUTE           :1;
    uint32_t S_CYCLES            :3;
    uint32_t HPGAIN              :4;
    uint32_t ADCHPD              :1;
    uint32_t MCLKDIV             :4;
    uint32_t SINC_RATE           :7;
    uint32_t PGA_L               :5;
    uint32_t PGA_R               :5;
    uint32_t RSVD0               :1;
  }BF;
} reg_pdm_pdm_core_conf_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for PDM_PDM_CORE_CONF_PGA_R
//-------------------------------------------------------------------------
#define BFV_PDM_PDM_CORE_CONF_PGA_R_M12DB                               0x0
#define BFV_PDM_PDM_CORE_CONF_PGA_R_M10P5DB                             0x1
#define BFV_PDM_PDM_CORE_CONF_PGA_R_34P5DB                             0x1F

//-------------------------------------------------------------------------
// field value definitions for PDM_PDM_CORE_CONF_PGA_L
//-------------------------------------------------------------------------
#define BFV_PDM_PDM_CORE_CONF_PGA_L_M12DB                               0x0
#define BFV_PDM_PDM_CORE_CONF_PGA_L_M10P5DB                             0x1
#define BFV_PDM_PDM_CORE_CONF_PGA_L_34P5DB                             0x1F

//-------------------------------------------------------------------------
// field value definitions for PDM_PDM_CORE_CONF_SOFT_MUTE
//-------------------------------------------------------------------------
#define BFV_PDM_PDM_CORE_CONF_SOFT_MUTE_DISABLE                         0x0
#define BFV_PDM_PDM_CORE_CONF_SOFT_MUTE_ENABLE                          0x1

//-------------------------------------------------------------------------
// field value definitions for PDM_PDM_CORE_CONF_LRSWAP
//-------------------------------------------------------------------------
#define BFV_PDM_PDM_CORE_CONF_LRSWAP_NORMAL                             0x0
#define BFV_PDM_PDM_CORE_CONF_LRSWAP_SWAP                               0x1

#define REG_PDM_PDM_CORE_CONF(N)       (*(volatile reg_pdm_pdm_core_conf_t*)((PDM_BASE_ADDRESS + PDM_OFFSET(N) + 0x4)))
#define REG_PDM_PDM_CORE_CONF_ADDR(N)  (PDM_BASE_ADDRESS + PDM_OFFSET(N) + 0x4)
#define BP_PDM_PDM_CORE_CONF_RSVD0                                       31
#define BM_PDM_PDM_CORE_CONF_RSVD0                               0x80000000
#define BP_PDM_PDM_CORE_CONF_PGA_R                                       26
#define BM_PDM_PDM_CORE_CONF_PGA_R                               0x7C000000
#define BP_PDM_PDM_CORE_CONF_PGA_L                                       21
#define BM_PDM_PDM_CORE_CONF_PGA_L                               0x03E00000
#define BP_PDM_PDM_CORE_CONF_SINC_RATE                                   14
#define BM_PDM_PDM_CORE_CONF_SINC_RATE                           0x001FC000
#define BP_PDM_PDM_CORE_CONF_MCLKDIV                                     10
#define BM_PDM_PDM_CORE_CONF_MCLKDIV                             0x00003C00
#define BP_PDM_PDM_CORE_CONF_ADCHPD                                       9
#define BM_PDM_PDM_CORE_CONF_ADCHPD                              0x00000200
#define BP_PDM_PDM_CORE_CONF_HPGAIN                                       5
#define BM_PDM_PDM_CORE_CONF_HPGAIN                              0x000001E0
#define BP_PDM_PDM_CORE_CONF_S_CYCLES                                     2
#define BM_PDM_PDM_CORE_CONF_S_CYCLES                            0x0000001C
#define BP_PDM_PDM_CORE_CONF_SOFT_MUTE                                    1
#define BM_PDM_PDM_CORE_CONF_SOFT_MUTE                           0x00000002
#define BP_PDM_PDM_CORE_CONF_LRSWAP                                       0
#define BM_PDM_PDM_CORE_CONF_LRSWAP                              0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pdm_pdm_core2_conf_u
{
  uint32_t V;
  struct reg_pdm_pdm_core2_conf_s
  {
    uint32_t PCM_CHSET           :2;
    uint32_t DIV_MCLKQ           :2;
    uint32_t PDMCKO_DLY          :3;
    uint32_t SEL_STEP            :1;
    uint32_t RSVD0               :24;
  }BF;
} reg_pdm_pdm_core2_conf_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for PDM_PDM_CORE2_CONF_SEL_STEP
//-------------------------------------------------------------------------
#define BFV_PDM_PDM_CORE2_CONF_SEL_STEP_LOW                             0x0
#define BFV_PDM_PDM_CORE2_CONF_SEL_STEP_HIGH                            0x1

//-------------------------------------------------------------------------
// field value definitions for PDM_PDM_CORE2_CONF_PDMCKO_DLY
//-------------------------------------------------------------------------
#define BFV_PDM_PDM_CORE2_CONF_PDMCKO_DLY_NONE                          0x0
#define BFV_PDM_PDM_CORE2_CONF_PDMCKO_DLY_ONE                           0x1
#define BFV_PDM_PDM_CORE2_CONF_PDMCKO_DLY_SEVEN                         0x7

//-------------------------------------------------------------------------
// field value definitions for PDM_PDM_CORE2_CONF_DIV_MCLKQ
//-------------------------------------------------------------------------
#define BFV_PDM_PDM_CORE2_CONF_DIV_MCLKQ_BYPASS                         0x0
#define BFV_PDM_PDM_CORE2_CONF_DIV_MCLKQ_DIV_BY_1                       0x1
#define BFV_PDM_PDM_CORE2_CONF_DIV_MCLKQ_DIV_BY_2                       0x2
#define BFV_PDM_PDM_CORE2_CONF_DIV_MCLKQ_DIV_BY_3                       0x3

//-------------------------------------------------------------------------
// field value definitions for PDM_PDM_CORE2_CONF_PCM_CHSET
//-------------------------------------------------------------------------
#define BFV_PDM_PDM_CORE2_CONF_PCM_CHSET_DISABLE                        0x0
#define BFV_PDM_PDM_CORE2_CONF_PCM_CHSET_MONO_L                         0x1
#define BFV_PDM_PDM_CORE2_CONF_PCM_CHSET_MONO_R                         0x2
#define BFV_PDM_PDM_CORE2_CONF_PCM_CHSET_STEREO                         0x3

#define REG_PDM_PDM_CORE2_CONF(N)       (*(volatile reg_pdm_pdm_core2_conf_t*)((PDM_BASE_ADDRESS + PDM_OFFSET(N) + 0x8)))
#define REG_PDM_PDM_CORE2_CONF_ADDR(N)  (PDM_BASE_ADDRESS + PDM_OFFSET(N) + 0x8)
#define BP_PDM_PDM_CORE2_CONF_RSVD0                                       8
#define BM_PDM_PDM_CORE2_CONF_RSVD0                              0xFFFFFF00
#define BP_PDM_PDM_CORE2_CONF_SEL_STEP                                    7
#define BM_PDM_PDM_CORE2_CONF_SEL_STEP                           0x00000080
#define BP_PDM_PDM_CORE2_CONF_PDMCKO_DLY                                  4
#define BM_PDM_PDM_CORE2_CONF_PDMCKO_DLY                         0x00000070
#define BP_PDM_PDM_CORE2_CONF_DIV_MCLKQ                                   2
#define BM_PDM_PDM_CORE2_CONF_DIV_MCLKQ                          0x0000000C
#define BP_PDM_PDM_CORE2_CONF_PCM_CHSET                                   0
#define BM_PDM_PDM_CORE2_CONF_PCM_CHSET                          0x00000003

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pdm_pdm_ctrl_conf_u
{
  uint32_t V;
  struct reg_pdm_pdm_ctrl_conf_s
  {
    uint32_t PDM_CNTL            :32;
  }BF;
} reg_pdm_pdm_ctrl_conf_t;

#endif  // __LANGUAGE_ASM__

#define REG_PDM_PDM_CTRL_CONF(N)       (*(volatile reg_pdm_pdm_ctrl_conf_t*)((PDM_BASE_ADDRESS + PDM_OFFSET(N) + 0xC)))
#define REG_PDM_PDM_CTRL_CONF_ADDR(N)  (PDM_BASE_ADDRESS + PDM_OFFSET(N) + 0xC)
#define BP_PDM_PDM_CTRL_CONF_PDM_CNTL                                     0
#define BM_PDM_PDM_CTRL_CONF_PDM_CNTL                            0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pdm_debug0_u
{
  uint32_t V;
  struct reg_pdm_debug0_s
  {
    uint32_t ENABLE              :1;
    uint32_t SELECT              :1;
    uint32_t DBG_RESET           :1;
    uint32_t ONE_SHOT            :1;
    uint32_t RSVD0               :28;
  }BF;
} reg_pdm_debug0_t;

#endif  // __LANGUAGE_ASM__

#define REG_PDM_DEBUG0(N)       (*(volatile reg_pdm_debug0_t*)((PDM_BASE_ADDRESS + PDM_OFFSET(N) + 0x10)))
#define REG_PDM_DEBUG0_ADDR(N)  (PDM_BASE_ADDRESS + PDM_OFFSET(N) + 0x10)
#define BP_PDM_DEBUG0_RSVD0                                               4
#define BM_PDM_DEBUG0_RSVD0                                      0xFFFFFFF0
#define BP_PDM_DEBUG0_ONE_SHOT                                            3
#define BM_PDM_DEBUG0_ONE_SHOT                                   0x00000008
#define BP_PDM_DEBUG0_DBG_RESET                                           2
#define BM_PDM_DEBUG0_DBG_RESET                                  0x00000004
#define BP_PDM_DEBUG0_SELECT                                              1
#define BM_PDM_DEBUG0_SELECT                                     0x00000002
#define BP_PDM_DEBUG0_ENABLE                                              0
#define BM_PDM_DEBUG0_ENABLE                                     0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_pdm_debug1_u
{
  uint32_t V;
  struct reg_pdm_debug1_s
  {
    uint32_t DATA                :31;
    uint32_t TOGGLE              :1;
  }BF;
} reg_pdm_debug1_t;

#endif  // __LANGUAGE_ASM__

#define REG_PDM_DEBUG1(N)       (*(volatile reg_pdm_debug1_t*)((PDM_BASE_ADDRESS + PDM_OFFSET(N) + 0x14)))
#define REG_PDM_DEBUG1_ADDR(N)  (PDM_BASE_ADDRESS + PDM_OFFSET(N) + 0x14)
#define BP_PDM_DEBUG1_TOGGLE                                             31
#define BM_PDM_DEBUG1_TOGGLE                                     0x80000000
#define BP_PDM_DEBUG1_DATA                                                0
#define BM_PDM_DEBUG1_DATA                                       0x7FFFFFFF

#define ADC_BASE_ADDRESS 0x50050000


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_adc_cntrl_u
{
  uint32_t V;
  struct reg_adc_cntrl_s
  {
    uint32_t INT_EN              :1;
    uint32_t MODE                :1;
    uint32_t CALIBRATE           :1;
    uint32_t PERIODIC            :1;
    uint32_t DMA                 :1;
    uint32_t GRAB_DELAY          :2;
    uint32_t SFTRST              :1;
    uint32_t CAPTURE_CNT         :8;
    uint32_t RSVD0               :16;
  }BF;
} reg_adc_cntrl_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for ADC_CNTRL_GRAB_DELAY
//-------------------------------------------------------------------------
#define BFV_ADC_CNTRL_GRAB_DELAY_IMMED                                  0x0
#define BFV_ADC_CNTRL_GRAB_DELAY_1CLK                                   0x1
#define BFV_ADC_CNTRL_GRAB_DELAY_2CLK                                   0x2
#define BFV_ADC_CNTRL_GRAB_DELAY_3CLK                                   0x3

//-------------------------------------------------------------------------
// field value definitions for ADC_CNTRL_DMA
//-------------------------------------------------------------------------
#define BFV_ADC_CNTRL_DMA_DISABLE                                       0x0
#define BFV_ADC_CNTRL_DMA_ENABLE                                        0x1

//-------------------------------------------------------------------------
// field value definitions for ADC_CNTRL_PERIODIC
//-------------------------------------------------------------------------
#define BFV_ADC_CNTRL_PERIODIC_DISABLE                                  0x0
#define BFV_ADC_CNTRL_PERIODIC_ENABLE                                   0x1

//-------------------------------------------------------------------------
// field value definitions for ADC_CNTRL_CALIBRATE
//-------------------------------------------------------------------------
#define BFV_ADC_CNTRL_CALIBRATE_OFF                                     0x0
#define BFV_ADC_CNTRL_CALIBRATE_ON                                      0x1

//-------------------------------------------------------------------------
// field value definitions for ADC_CNTRL_MODE
//-------------------------------------------------------------------------
#define BFV_ADC_CNTRL_MODE_SLEEP                                        0x0
#define BFV_ADC_CNTRL_MODE_RUN                                          0x1

//-------------------------------------------------------------------------
// field value definitions for ADC_CNTRL_INT_EN
//-------------------------------------------------------------------------
#define BFV_ADC_CNTRL_INT_EN_DISABLE                                    0x0
#define BFV_ADC_CNTRL_INT_EN_ENABLE                                     0x1

#define REG_ADC_CNTRL           (*(volatile reg_adc_cntrl_t*)((ADC_BASE_ADDRESS + 0x0)))
#define REG_ADC_CNTRL_ADDR      (ADC_BASE_ADDRESS + 0x0)
#define BP_ADC_CNTRL_RSVD0                                               16
#define BM_ADC_CNTRL_RSVD0                                       0xFFFF0000
#define BP_ADC_CNTRL_CAPTURE_CNT                                          8
#define BM_ADC_CNTRL_CAPTURE_CNT                                 0x0000FF00
#define BP_ADC_CNTRL_SFTRST                                               7
#define BM_ADC_CNTRL_SFTRST                                      0x00000080
#define BP_ADC_CNTRL_GRAB_DELAY                                           5
#define BM_ADC_CNTRL_GRAB_DELAY                                  0x00000060
#define BP_ADC_CNTRL_DMA                                                  4
#define BM_ADC_CNTRL_DMA                                         0x00000010
#define BP_ADC_CNTRL_PERIODIC                                             3
#define BM_ADC_CNTRL_PERIODIC                                    0x00000008
#define BP_ADC_CNTRL_CALIBRATE                                            2
#define BM_ADC_CNTRL_CALIBRATE                                   0x00000004
#define BP_ADC_CNTRL_MODE                                                 1
#define BM_ADC_CNTRL_MODE                                        0x00000002
#define BP_ADC_CNTRL_INT_EN                                               0
#define BM_ADC_CNTRL_INT_EN                                      0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_adc_clock_div_u
{
  uint32_t V;
  struct reg_adc_clock_div_s
  {
    uint32_t VALUE               :20;
    uint32_t RSVD0               :12;
  }BF;
} reg_adc_clock_div_t;

#endif  // __LANGUAGE_ASM__

#define REG_ADC_CLOCK_DIV           (*(volatile reg_adc_clock_div_t*)((ADC_BASE_ADDRESS + 0x4)))
#define REG_ADC_CLOCK_DIV_ADDR      (ADC_BASE_ADDRESS + 0x4)
#define BP_ADC_CLOCK_DIV_RSVD0                                           20
#define BM_ADC_CLOCK_DIV_RSVD0                                   0xFFF00000
#define BP_ADC_CLOCK_DIV_VALUE                                            0
#define BM_ADC_CLOCK_DIV_VALUE                                   0x000FFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_adc_src_u
{
  uint32_t V;
  struct reg_adc_src_s
  {
    uint32_t DIFF                :1;
    uint32_t TOGGLE              :1;
    uint32_t RSVD0               :2;
    uint32_t SEL                 :1;
    uint32_t RSVD1               :27;
  }BF;
} reg_adc_src_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for ADC_SRC_SEL
//-------------------------------------------------------------------------
#define BFV_ADC_SRC_SEL_CHAN0                                           0x0
#define BFV_ADC_SRC_SEL_CHAN1                                           0x1

//-------------------------------------------------------------------------
// field value definitions for ADC_SRC_TOGGLE
//-------------------------------------------------------------------------
#define BFV_ADC_SRC_TOGGLE_TOGGLE                                       0x1
#define BFV_ADC_SRC_TOGGLE_REGISTER                                     0x0

//-------------------------------------------------------------------------
// field value definitions for ADC_SRC_DIFF
//-------------------------------------------------------------------------
#define BFV_ADC_SRC_DIFF_ENABLE                                         0x1
#define BFV_ADC_SRC_DIFF_DISABLE                                        0x0

#define REG_ADC_SRC           (*(volatile reg_adc_src_t*)((ADC_BASE_ADDRESS + 0x8)))
#define REG_ADC_SRC_ADDR      (ADC_BASE_ADDRESS + 0x8)
#define BP_ADC_SRC_RSVD0                                                  5
#define BM_ADC_SRC_RSVD0                                         0xFFFFFFE0
#define BP_ADC_SRC_SEL                                                    4
#define BM_ADC_SRC_SEL                                           0x00000010
#define BP_ADC_SRC_RSVD1                                                  2
#define BM_ADC_SRC_RSVD1                                         0x0000000C
#define BP_ADC_SRC_TOGGLE                                                 1
#define BM_ADC_SRC_TOGGLE                                        0x00000002
#define BP_ADC_SRC_DIFF                                                   0
#define BM_ADC_SRC_DIFF                                          0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_adc_int_stat_u
{
  uint32_t V;
  struct reg_adc_int_stat_s
  {
    uint32_t READY               :1;
    uint32_t RSVD0               :3;
    uint32_t SFIFO               :1;
    uint32_t RSVD1               :27;
  }BF;
} reg_adc_int_stat_t;

#endif  // __LANGUAGE_ASM__

#define REG_ADC_INT_STAT           (*(volatile reg_adc_int_stat_t*)((ADC_BASE_ADDRESS + 0xC)))
#define REG_ADC_INT_STAT_ADDR      (ADC_BASE_ADDRESS + 0xC)
#define BP_ADC_INT_STAT_RSVD0                                             5
#define BM_ADC_INT_STAT_RSVD0                                    0xFFFFFFE0
#define BP_ADC_INT_STAT_SFIFO                                             4
#define BM_ADC_INT_STAT_SFIFO                                    0x00000010
#define BP_ADC_INT_STAT_RSVD1                                             1
#define BM_ADC_INT_STAT_RSVD1                                    0x0000000E
#define BP_ADC_INT_STAT_READY                                             0
#define BM_ADC_INT_STAT_READY                                    0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_adc_start_u
{
  uint32_t V;
  struct reg_adc_start_s
  {
    uint32_t NOW                 :8;
    uint32_t RSVD0               :24;
  }BF;
} reg_adc_start_t;

#endif  // __LANGUAGE_ASM__

#define REG_ADC_START           (*(volatile reg_adc_start_t*)((ADC_BASE_ADDRESS + 0x10)))
#define REG_ADC_START_ADDR      (ADC_BASE_ADDRESS + 0x10)
#define BP_ADC_START_RSVD0                                                8
#define BM_ADC_START_RSVD0                                       0xFFFFFF00
#define BP_ADC_START_NOW                                                  0
#define BM_ADC_START_NOW                                         0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_adc_sample_u
{
  uint32_t V;
  struct reg_adc_sample_s
  {
    uint32_t DATA                :12;
    uint32_t RSVD0               :3;
    uint32_t OFLOW               :1;
    uint32_t RSVD1               :16;
  }BF;
} reg_adc_sample_t;

#endif  // __LANGUAGE_ASM__

#define REG_ADC_SAMPLE           (*(volatile reg_adc_sample_t*)((ADC_BASE_ADDRESS + 0x14)))
#define REG_ADC_SAMPLE_ADDR      (ADC_BASE_ADDRESS + 0x14)
#define BP_ADC_SAMPLE_RSVD0                                              16
#define BM_ADC_SAMPLE_RSVD0                                      0xFFFF0000
#define BP_ADC_SAMPLE_OFLOW                                              15
#define BM_ADC_SAMPLE_OFLOW                                      0x00008000
#define BP_ADC_SAMPLE_RSVD1                                              12
#define BM_ADC_SAMPLE_RSVD1                                      0x00007000
#define BP_ADC_SAMPLE_DATA                                                0
#define BM_ADC_SAMPLE_DATA                                       0x00000FFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_adc_offset_u
{
  uint32_t V;
  struct reg_adc_offset_s
  {
    uint32_t VALUE               :13;
    uint32_t RSVD0               :19;
  }BF;
} reg_adc_offset_t;

#endif  // __LANGUAGE_ASM__

#define REG_ADC_OFFSET           (*(volatile reg_adc_offset_t*)((ADC_BASE_ADDRESS + 0x18)))
#define REG_ADC_OFFSET_ADDR      (ADC_BASE_ADDRESS + 0x18)
#define BP_ADC_OFFSET_RSVD0                                              13
#define BM_ADC_OFFSET_RSVD0                                      0xFFFFE000
#define BP_ADC_OFFSET_VALUE                                               0
#define BM_ADC_OFFSET_VALUE                                      0x00001FFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_adc_debuga_u
{
  uint32_t V;
  struct reg_adc_debuga_s
  {
    uint32_t TRIGGER             :1;
    uint32_t DONE                :1;
    uint32_t READY_TOG           :1;
    uint32_t POSTPROC            :1;
    uint32_t RSVD0               :27;
    uint32_t COLLECTOR           :1;
  }BF;
} reg_adc_debuga_t;

#endif  // __LANGUAGE_ASM__

#define REG_ADC_DEBUGA           (*(volatile reg_adc_debuga_t*)((ADC_BASE_ADDRESS + 0x1C)))
#define REG_ADC_DEBUGA_ADDR      (ADC_BASE_ADDRESS + 0x1C)
#define BP_ADC_DEBUGA_COLLECTOR                                          31
#define BM_ADC_DEBUGA_COLLECTOR                                  0x80000000
#define BP_ADC_DEBUGA_RSVD0                                               4
#define BM_ADC_DEBUGA_RSVD0                                      0x7FFFFFF0
#define BP_ADC_DEBUGA_POSTPROC                                            3
#define BM_ADC_DEBUGA_POSTPROC                                   0x00000008
#define BP_ADC_DEBUGA_READY_TOG                                           2
#define BM_ADC_DEBUGA_READY_TOG                                  0x00000004
#define BP_ADC_DEBUGA_DONE                                                1
#define BM_ADC_DEBUGA_DONE                                       0x00000002
#define BP_ADC_DEBUGA_TRIGGER                                             0
#define BM_ADC_DEBUGA_TRIGGER                                    0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_adc_debugb_u
{
  uint32_t V;
  struct reg_adc_debugb_s
  {
    uint32_t RAW_VALUE           :20;
    uint32_t FINAL_VALUE         :12;
  }BF;
} reg_adc_debugb_t;

#endif  // __LANGUAGE_ASM__

#define REG_ADC_DEBUGB           (*(volatile reg_adc_debugb_t*)((ADC_BASE_ADDRESS + 0x20)))
#define REG_ADC_DEBUGB_ADDR      (ADC_BASE_ADDRESS + 0x20)
#define BP_ADC_DEBUGB_FINAL_VALUE                                        20
#define BM_ADC_DEBUGB_FINAL_VALUE                                0xFFF00000
#define BP_ADC_DEBUGB_RAW_VALUE                                           0
#define BM_ADC_DEBUGB_RAW_VALUE                                  0x000FFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_adc_debugc_u
{
  uint32_t V;
  struct reg_adc_debugc_s
  {
    uint32_t PERIODIC_CNT        :20;
    uint32_t RSVD0               :12;
  }BF;
} reg_adc_debugc_t;

#endif  // __LANGUAGE_ASM__

#define REG_ADC_DEBUGC           (*(volatile reg_adc_debugc_t*)((ADC_BASE_ADDRESS + 0x24)))
#define REG_ADC_DEBUGC_ADDR      (ADC_BASE_ADDRESS + 0x24)
#define BP_ADC_DEBUGC_RSVD0                                              20
#define BM_ADC_DEBUGC_RSVD0                                      0xFFF00000
#define BP_ADC_DEBUGC_PERIODIC_CNT                                        0
#define BM_ADC_DEBUGC_PERIODIC_CNT                               0x000FFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_adc_dbg_read_only_u
{
  uint32_t V;
  struct reg_adc_dbg_read_only_s
  {
    uint32_t VALUE               :32;
  }BF;
} reg_adc_dbg_read_only_t;

#endif  // __LANGUAGE_ASM__

#define REG_ADC_DBG_READ_ONLY           (*(volatile reg_adc_dbg_read_only_t*)((ADC_BASE_ADDRESS + 0x28)))
#define REG_ADC_DBG_READ_ONLY_ADDR      (ADC_BASE_ADDRESS + 0x28)
#define BP_ADC_DBG_READ_ONLY_VALUE                                        0
#define BM_ADC_DBG_READ_ONLY_VALUE                               0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_adc_sfifo_cfg_u
{
  uint32_t V;
  struct reg_adc_sfifo_cfg_s
  {
    uint32_t ENABLE              :1;
    uint32_t INT_EN              :1;
    uint32_t CLR                 :1;
    uint32_t RSVD0               :1;
    uint32_t FULL                :4;
    uint32_t RSVD1               :24;
  }BF;
} reg_adc_sfifo_cfg_t;

#endif  // __LANGUAGE_ASM__

#define REG_ADC_SFIFO_CFG           (*(volatile reg_adc_sfifo_cfg_t*)((ADC_BASE_ADDRESS + 0x2C)))
#define REG_ADC_SFIFO_CFG_ADDR      (ADC_BASE_ADDRESS + 0x2C)
#define BP_ADC_SFIFO_CFG_RSVD0                                            8
#define BM_ADC_SFIFO_CFG_RSVD0                                   0xFFFFFF00
#define BP_ADC_SFIFO_CFG_FULL                                             4
#define BM_ADC_SFIFO_CFG_FULL                                    0x000000F0
#define BP_ADC_SFIFO_CFG_RSVD1                                            3
#define BM_ADC_SFIFO_CFG_RSVD1                                   0x00000008
#define BP_ADC_SFIFO_CFG_CLR                                              2
#define BM_ADC_SFIFO_CFG_CLR                                     0x00000004
#define BP_ADC_SFIFO_CFG_INT_EN                                           1
#define BM_ADC_SFIFO_CFG_INT_EN                                  0x00000002
#define BP_ADC_SFIFO_CFG_ENABLE                                           0
#define BM_ADC_SFIFO_CFG_ENABLE                                  0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_adc_sfifo_u
{
  uint32_t V;
  struct reg_adc_sfifo_s
  {
    uint32_t SAMP0               :12;
    uint32_t OFLOW0              :1;
    uint32_t RSVD0               :1;
    uint32_t VALID0              :1;
    uint32_t LOST                :1;
    uint32_t SAMP1               :12;
    uint32_t OFLOW1              :1;
    uint32_t RSVD1               :1;
    uint32_t VALID1              :1;
    uint32_t RSVD2               :1;
  }BF;
} reg_adc_sfifo_t;

#endif  // __LANGUAGE_ASM__

#define REG_ADC_SFIFO           (*(volatile reg_adc_sfifo_t*)((ADC_BASE_ADDRESS + 0x30)))
#define REG_ADC_SFIFO_ADDR      (ADC_BASE_ADDRESS + 0x30)
#define BP_ADC_SFIFO_RSVD0                                               31
#define BM_ADC_SFIFO_RSVD0                                       0x80000000
#define BP_ADC_SFIFO_VALID1                                              30
#define BM_ADC_SFIFO_VALID1                                      0x40000000
#define BP_ADC_SFIFO_RSVD1                                               29
#define BM_ADC_SFIFO_RSVD1                                       0x20000000
#define BP_ADC_SFIFO_OFLOW1                                              28
#define BM_ADC_SFIFO_OFLOW1                                      0x10000000
#define BP_ADC_SFIFO_SAMP1                                               16
#define BM_ADC_SFIFO_SAMP1                                       0x0FFF0000
#define BP_ADC_SFIFO_LOST                                                15
#define BM_ADC_SFIFO_LOST                                        0x00008000
#define BP_ADC_SFIFO_VALID0                                              14
#define BM_ADC_SFIFO_VALID0                                      0x00004000
#define BP_ADC_SFIFO_RSVD2                                               13
#define BM_ADC_SFIFO_RSVD2                                       0x00002000
#define BP_ADC_SFIFO_OFLOW0                                              12
#define BM_ADC_SFIFO_OFLOW0                                      0x00001000
#define BP_ADC_SFIFO_SAMP0                                                0
#define BM_ADC_SFIFO_SAMP0                                       0x00000FFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_adc_sfifo_stat_u
{
  uint32_t V;
  struct reg_adc_sfifo_stat_s
  {
    uint32_t SIZE                :4;
    uint32_t FULL                :1;
    uint32_t EMPTY               :1;
    uint32_t LOW                 :1;
    uint32_t RSVD0               :25;
  }BF;
} reg_adc_sfifo_stat_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for ADC_SFIFO_STAT_LOW
//-------------------------------------------------------------------------
#define BFV_ADC_SFIFO_STAT_LOW_LOW                                      0x1

//-------------------------------------------------------------------------
// field value definitions for ADC_SFIFO_STAT_EMPTY
//-------------------------------------------------------------------------
#define BFV_ADC_SFIFO_STAT_EMPTY_EMPTY                                  0x1

//-------------------------------------------------------------------------
// field value definitions for ADC_SFIFO_STAT_FULL
//-------------------------------------------------------------------------
#define BFV_ADC_SFIFO_STAT_FULL_FULL                                    0x1

#define REG_ADC_SFIFO_STAT           (*(volatile reg_adc_sfifo_stat_t*)((ADC_BASE_ADDRESS + 0x34)))
#define REG_ADC_SFIFO_STAT_ADDR      (ADC_BASE_ADDRESS + 0x34)
#define BP_ADC_SFIFO_STAT_RSVD0                                           7
#define BM_ADC_SFIFO_STAT_RSVD0                                  0xFFFFFF80
#define BP_ADC_SFIFO_STAT_LOW                                             6
#define BM_ADC_SFIFO_STAT_LOW                                    0x00000040
#define BP_ADC_SFIFO_STAT_EMPTY                                           5
#define BM_ADC_SFIFO_STAT_EMPTY                                  0x00000020
#define BP_ADC_SFIFO_STAT_FULL                                            4
#define BM_ADC_SFIFO_STAT_FULL                                   0x00000010
#define BP_ADC_SFIFO_STAT_SIZE                                            0
#define BM_ADC_SFIFO_STAT_SIZE                                   0x0000000F

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_adc_toggle_u
{
  uint32_t V;
  struct reg_adc_toggle_s
  {
    uint32_t STATE               :1;
    uint32_t RSVD0               :31;
  }BF;
} reg_adc_toggle_t;

#endif  // __LANGUAGE_ASM__

#define REG_ADC_TOGGLE           (*(volatile reg_adc_toggle_t*)((ADC_BASE_ADDRESS + 0x38)))
#define REG_ADC_TOGGLE_ADDR      (ADC_BASE_ADDRESS + 0x38)
#define BP_ADC_TOGGLE_RSVD0                                               1
#define BM_ADC_TOGGLE_RSVD0                                      0xFFFFFFFE
#define BP_ADC_TOGGLE_STATE                                               0
#define BM_ADC_TOGGLE_STATE                                      0x00000001

#define NVIC_BASE_ADDRESS 0xE000E000


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_eiser0_u
{
  uint32_t V;
  struct reg_nvic_eiser0_s
  {
    uint32_t GPIO0               :1;
    uint32_t GPIO1               :1;
    uint32_t TIMER0              :1;
    uint32_t TIMER1              :1;
    uint32_t UART0               :1;
    uint32_t UART1               :1;
    uint32_t SPI0                :1;
    uint32_t SPI1                :1;
    uint32_t I2C0                :1;
    uint32_t I2C1                :1;
    uint32_t RTC0                :1;
    uint32_t RTC1                :1;
    uint32_t DSP                 :1;
    uint32_t ADC                 :1;
    uint32_t PWM                 :1;
    uint32_t WDT                 :1;
    uint32_t RTC_TMR             :1;
    uint32_t AO_BOD              :1;
    uint32_t SW0                 :1;
    uint32_t SW1                 :1;
    uint32_t SW2                 :1;
    uint32_t SW3                 :1;
    uint32_t RSVD0               :10;
  }BF;
} reg_nvic_eiser0_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_EISER0           (*(volatile reg_nvic_eiser0_t*)((NVIC_BASE_ADDRESS + 0x100)))
#define REG_NVIC_EISER0_ADDR      (NVIC_BASE_ADDRESS + 0x100)
#define BP_NVIC_EISER0_RSVD0                                             22
#define BM_NVIC_EISER0_RSVD0                                     0xFFC00000
#define BP_NVIC_EISER0_SW3                                               21
#define BM_NVIC_EISER0_SW3                                       0x00200000
#define BP_NVIC_EISER0_SW2                                               20
#define BM_NVIC_EISER0_SW2                                       0x00100000
#define BP_NVIC_EISER0_SW1                                               19
#define BM_NVIC_EISER0_SW1                                       0x00080000
#define BP_NVIC_EISER0_SW0                                               18
#define BM_NVIC_EISER0_SW0                                       0x00040000
#define BP_NVIC_EISER0_AO_BOD                                            17
#define BM_NVIC_EISER0_AO_BOD                                    0x00020000
#define BP_NVIC_EISER0_RTC_TMR                                           16
#define BM_NVIC_EISER0_RTC_TMR                                   0x00010000
#define BP_NVIC_EISER0_WDT                                               15
#define BM_NVIC_EISER0_WDT                                       0x00008000
#define BP_NVIC_EISER0_PWM                                               14
#define BM_NVIC_EISER0_PWM                                       0x00004000
#define BP_NVIC_EISER0_ADC                                               13
#define BM_NVIC_EISER0_ADC                                       0x00002000
#define BP_NVIC_EISER0_DSP                                               12
#define BM_NVIC_EISER0_DSP                                       0x00001000
#define BP_NVIC_EISER0_RTC1                                              11
#define BM_NVIC_EISER0_RTC1                                      0x00000800
#define BP_NVIC_EISER0_RTC0                                              10
#define BM_NVIC_EISER0_RTC0                                      0x00000400
#define BP_NVIC_EISER0_I2C1                                               9
#define BM_NVIC_EISER0_I2C1                                      0x00000200
#define BP_NVIC_EISER0_I2C0                                               8
#define BM_NVIC_EISER0_I2C0                                      0x00000100
#define BP_NVIC_EISER0_SPI1                                               7
#define BM_NVIC_EISER0_SPI1                                      0x00000080
#define BP_NVIC_EISER0_SPI0                                               6
#define BM_NVIC_EISER0_SPI0                                      0x00000040
#define BP_NVIC_EISER0_UART1                                              5
#define BM_NVIC_EISER0_UART1                                     0x00000020
#define BP_NVIC_EISER0_UART0                                              4
#define BM_NVIC_EISER0_UART0                                     0x00000010
#define BP_NVIC_EISER0_TIMER1                                             3
#define BM_NVIC_EISER0_TIMER1                                    0x00000008
#define BP_NVIC_EISER0_TIMER0                                             2
#define BM_NVIC_EISER0_TIMER0                                    0x00000004
#define BP_NVIC_EISER0_GPIO1                                              1
#define BM_NVIC_EISER0_GPIO1                                     0x00000002
#define BP_NVIC_EISER0_GPIO0                                              0
#define BM_NVIC_EISER0_GPIO0                                     0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_eicer0_u
{
  uint32_t V;
  struct reg_nvic_eicer0_s
  {
    uint32_t GPIO0               :1;
    uint32_t GPIO1               :1;
    uint32_t TIMER0              :1;
    uint32_t TIMER1              :1;
    uint32_t UART0               :1;
    uint32_t UART1               :1;
    uint32_t SPI0                :1;
    uint32_t SPI1                :1;
    uint32_t I2C0                :1;
    uint32_t I2C1                :1;
    uint32_t RTC0                :1;
    uint32_t RTC1                :1;
    uint32_t DSP                 :1;
    uint32_t ADC                 :1;
    uint32_t PWM                 :1;
    uint32_t WDT                 :1;
    uint32_t RTC_TMR             :1;
    uint32_t AO_BOD              :1;
    uint32_t SW0                 :1;
    uint32_t SW1                 :1;
    uint32_t SW2                 :1;
    uint32_t SW3                 :1;
    uint32_t RSVD0               :10;
  }BF;
} reg_nvic_eicer0_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_EICER0           (*(volatile reg_nvic_eicer0_t*)((NVIC_BASE_ADDRESS + 0x180)))
#define REG_NVIC_EICER0_ADDR      (NVIC_BASE_ADDRESS + 0x180)
#define BP_NVIC_EICER0_RSVD0                                             22
#define BM_NVIC_EICER0_RSVD0                                     0xFFC00000
#define BP_NVIC_EICER0_SW3                                               21
#define BM_NVIC_EICER0_SW3                                       0x00200000
#define BP_NVIC_EICER0_SW2                                               20
#define BM_NVIC_EICER0_SW2                                       0x00100000
#define BP_NVIC_EICER0_SW1                                               19
#define BM_NVIC_EICER0_SW1                                       0x00080000
#define BP_NVIC_EICER0_SW0                                               18
#define BM_NVIC_EICER0_SW0                                       0x00040000
#define BP_NVIC_EICER0_AO_BOD                                            17
#define BM_NVIC_EICER0_AO_BOD                                    0x00020000
#define BP_NVIC_EICER0_RTC_TMR                                           16
#define BM_NVIC_EICER0_RTC_TMR                                   0x00010000
#define BP_NVIC_EICER0_WDT                                               15
#define BM_NVIC_EICER0_WDT                                       0x00008000
#define BP_NVIC_EICER0_PWM                                               14
#define BM_NVIC_EICER0_PWM                                       0x00004000
#define BP_NVIC_EICER0_ADC                                               13
#define BM_NVIC_EICER0_ADC                                       0x00002000
#define BP_NVIC_EICER0_DSP                                               12
#define BM_NVIC_EICER0_DSP                                       0x00001000
#define BP_NVIC_EICER0_RTC1                                              11
#define BM_NVIC_EICER0_RTC1                                      0x00000800
#define BP_NVIC_EICER0_RTC0                                              10
#define BM_NVIC_EICER0_RTC0                                      0x00000400
#define BP_NVIC_EICER0_I2C1                                               9
#define BM_NVIC_EICER0_I2C1                                      0x00000200
#define BP_NVIC_EICER0_I2C0                                               8
#define BM_NVIC_EICER0_I2C0                                      0x00000100
#define BP_NVIC_EICER0_SPI1                                               7
#define BM_NVIC_EICER0_SPI1                                      0x00000080
#define BP_NVIC_EICER0_SPI0                                               6
#define BM_NVIC_EICER0_SPI0                                      0x00000040
#define BP_NVIC_EICER0_UART1                                              5
#define BM_NVIC_EICER0_UART1                                     0x00000020
#define BP_NVIC_EICER0_UART0                                              4
#define BM_NVIC_EICER0_UART0                                     0x00000010
#define BP_NVIC_EICER0_TIMER1                                             3
#define BM_NVIC_EICER0_TIMER1                                    0x00000008
#define BP_NVIC_EICER0_TIMER0                                             2
#define BM_NVIC_EICER0_TIMER0                                    0x00000004
#define BP_NVIC_EICER0_GPIO1                                              1
#define BM_NVIC_EICER0_GPIO1                                     0x00000002
#define BP_NVIC_EICER0_GPIO0                                              0
#define BM_NVIC_EICER0_GPIO0                                     0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_eispr0_u
{
  uint32_t V;
  struct reg_nvic_eispr0_s
  {
    uint32_t GPIO0               :1;
    uint32_t GPIO1               :1;
    uint32_t TIMER0              :1;
    uint32_t TIMER1              :1;
    uint32_t UART0               :1;
    uint32_t UART1               :1;
    uint32_t SPI0                :1;
    uint32_t SPI1                :1;
    uint32_t I2C0                :1;
    uint32_t I2C1                :1;
    uint32_t RTC0                :1;
    uint32_t RTC1                :1;
    uint32_t DSP                 :1;
    uint32_t ADC                 :1;
    uint32_t PWM                 :1;
    uint32_t WDT                 :1;
    uint32_t RTC_TMR             :1;
    uint32_t AO_BOD              :1;
    uint32_t SW0                 :1;
    uint32_t SW1                 :1;
    uint32_t SW2                 :1;
    uint32_t SW3                 :1;
    uint32_t RSVD0               :10;
  }BF;
} reg_nvic_eispr0_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_EISPR0           (*(volatile reg_nvic_eispr0_t*)((NVIC_BASE_ADDRESS + 0x200)))
#define REG_NVIC_EISPR0_ADDR      (NVIC_BASE_ADDRESS + 0x200)
#define BP_NVIC_EISPR0_RSVD0                                             22
#define BM_NVIC_EISPR0_RSVD0                                     0xFFC00000
#define BP_NVIC_EISPR0_SW3                                               21
#define BM_NVIC_EISPR0_SW3                                       0x00200000
#define BP_NVIC_EISPR0_SW2                                               20
#define BM_NVIC_EISPR0_SW2                                       0x00100000
#define BP_NVIC_EISPR0_SW1                                               19
#define BM_NVIC_EISPR0_SW1                                       0x00080000
#define BP_NVIC_EISPR0_SW0                                               18
#define BM_NVIC_EISPR0_SW0                                       0x00040000
#define BP_NVIC_EISPR0_AO_BOD                                            17
#define BM_NVIC_EISPR0_AO_BOD                                    0x00020000
#define BP_NVIC_EISPR0_RTC_TMR                                           16
#define BM_NVIC_EISPR0_RTC_TMR                                   0x00010000
#define BP_NVIC_EISPR0_WDT                                               15
#define BM_NVIC_EISPR0_WDT                                       0x00008000
#define BP_NVIC_EISPR0_PWM                                               14
#define BM_NVIC_EISPR0_PWM                                       0x00004000
#define BP_NVIC_EISPR0_ADC                                               13
#define BM_NVIC_EISPR0_ADC                                       0x00002000
#define BP_NVIC_EISPR0_DSP                                               12
#define BM_NVIC_EISPR0_DSP                                       0x00001000
#define BP_NVIC_EISPR0_RTC1                                              11
#define BM_NVIC_EISPR0_RTC1                                      0x00000800
#define BP_NVIC_EISPR0_RTC0                                              10
#define BM_NVIC_EISPR0_RTC0                                      0x00000400
#define BP_NVIC_EISPR0_I2C1                                               9
#define BM_NVIC_EISPR0_I2C1                                      0x00000200
#define BP_NVIC_EISPR0_I2C0                                               8
#define BM_NVIC_EISPR0_I2C0                                      0x00000100
#define BP_NVIC_EISPR0_SPI1                                               7
#define BM_NVIC_EISPR0_SPI1                                      0x00000080
#define BP_NVIC_EISPR0_SPI0                                               6
#define BM_NVIC_EISPR0_SPI0                                      0x00000040
#define BP_NVIC_EISPR0_UART1                                              5
#define BM_NVIC_EISPR0_UART1                                     0x00000020
#define BP_NVIC_EISPR0_UART0                                              4
#define BM_NVIC_EISPR0_UART0                                     0x00000010
#define BP_NVIC_EISPR0_TIMER1                                             3
#define BM_NVIC_EISPR0_TIMER1                                    0x00000008
#define BP_NVIC_EISPR0_TIMER0                                             2
#define BM_NVIC_EISPR0_TIMER0                                    0x00000004
#define BP_NVIC_EISPR0_GPIO1                                              1
#define BM_NVIC_EISPR0_GPIO1                                     0x00000002
#define BP_NVIC_EISPR0_GPIO0                                              0
#define BM_NVIC_EISPR0_GPIO0                                     0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_eicpr0_u
{
  uint32_t V;
  struct reg_nvic_eicpr0_s
  {
    uint32_t GPIO0               :1;
    uint32_t GPIO1               :1;
    uint32_t TIMER0              :1;
    uint32_t TIMER1              :1;
    uint32_t UART0               :1;
    uint32_t UART1               :1;
    uint32_t SPI0                :1;
    uint32_t SPI1                :1;
    uint32_t I2C0                :1;
    uint32_t I2C1                :1;
    uint32_t RTC0                :1;
    uint32_t RTC1                :1;
    uint32_t DSP                 :1;
    uint32_t ADC                 :1;
    uint32_t PWM                 :1;
    uint32_t WDT                 :1;
    uint32_t RTC_TMR             :1;
    uint32_t AO_BOD              :1;
    uint32_t SW0                 :1;
    uint32_t SW1                 :1;
    uint32_t SW2                 :1;
    uint32_t SW3                 :1;
    uint32_t RSVD0               :10;
  }BF;
} reg_nvic_eicpr0_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_EICPR0           (*(volatile reg_nvic_eicpr0_t*)((NVIC_BASE_ADDRESS + 0x280)))
#define REG_NVIC_EICPR0_ADDR      (NVIC_BASE_ADDRESS + 0x280)
#define BP_NVIC_EICPR0_RSVD0                                             22
#define BM_NVIC_EICPR0_RSVD0                                     0xFFC00000
#define BP_NVIC_EICPR0_SW3                                               21
#define BM_NVIC_EICPR0_SW3                                       0x00200000
#define BP_NVIC_EICPR0_SW2                                               20
#define BM_NVIC_EICPR0_SW2                                       0x00100000
#define BP_NVIC_EICPR0_SW1                                               19
#define BM_NVIC_EICPR0_SW1                                       0x00080000
#define BP_NVIC_EICPR0_SW0                                               18
#define BM_NVIC_EICPR0_SW0                                       0x00040000
#define BP_NVIC_EICPR0_AO_BOD                                            17
#define BM_NVIC_EICPR0_AO_BOD                                    0x00020000
#define BP_NVIC_EICPR0_RTC_TMR                                           16
#define BM_NVIC_EICPR0_RTC_TMR                                   0x00010000
#define BP_NVIC_EICPR0_WDT                                               15
#define BM_NVIC_EICPR0_WDT                                       0x00008000
#define BP_NVIC_EICPR0_PWM                                               14
#define BM_NVIC_EICPR0_PWM                                       0x00004000
#define BP_NVIC_EICPR0_ADC                                               13
#define BM_NVIC_EICPR0_ADC                                       0x00002000
#define BP_NVIC_EICPR0_DSP                                               12
#define BM_NVIC_EICPR0_DSP                                       0x00001000
#define BP_NVIC_EICPR0_RTC1                                              11
#define BM_NVIC_EICPR0_RTC1                                      0x00000800
#define BP_NVIC_EICPR0_RTC0                                              10
#define BM_NVIC_EICPR0_RTC0                                      0x00000400
#define BP_NVIC_EICPR0_I2C1                                               9
#define BM_NVIC_EICPR0_I2C1                                      0x00000200
#define BP_NVIC_EICPR0_I2C0                                               8
#define BM_NVIC_EICPR0_I2C0                                      0x00000100
#define BP_NVIC_EICPR0_SPI1                                               7
#define BM_NVIC_EICPR0_SPI1                                      0x00000080
#define BP_NVIC_EICPR0_SPI0                                               6
#define BM_NVIC_EICPR0_SPI0                                      0x00000040
#define BP_NVIC_EICPR0_UART1                                              5
#define BM_NVIC_EICPR0_UART1                                     0x00000020
#define BP_NVIC_EICPR0_UART0                                              4
#define BM_NVIC_EICPR0_UART0                                     0x00000010
#define BP_NVIC_EICPR0_TIMER1                                             3
#define BM_NVIC_EICPR0_TIMER1                                    0x00000008
#define BP_NVIC_EICPR0_TIMER0                                             2
#define BM_NVIC_EICPR0_TIMER0                                    0x00000004
#define BP_NVIC_EICPR0_GPIO1                                              1
#define BM_NVIC_EICPR0_GPIO1                                     0x00000002
#define BP_NVIC_EICPR0_GPIO0                                              0
#define BM_NVIC_EICPR0_GPIO0                                     0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_eiabr0_u
{
  uint32_t V;
  struct reg_nvic_eiabr0_s
  {
    uint32_t GPIO0               :1;
    uint32_t GPIO1               :1;
    uint32_t TIMER0              :1;
    uint32_t TIMER1              :1;
    uint32_t UART0               :1;
    uint32_t UART1               :1;
    uint32_t SPI0                :1;
    uint32_t SPI1                :1;
    uint32_t I2C0                :1;
    uint32_t I2C1                :1;
    uint32_t RTC0                :1;
    uint32_t RTC1                :1;
    uint32_t DSP                 :1;
    uint32_t ADC                 :1;
    uint32_t PWM                 :1;
    uint32_t WDT                 :1;
    uint32_t RTC_TMR             :1;
    uint32_t AO_BOD              :1;
    uint32_t SW0                 :1;
    uint32_t SW1                 :1;
    uint32_t SW2                 :1;
    uint32_t SW3                 :1;
    uint32_t RSVD0               :10;
  }BF;
} reg_nvic_eiabr0_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_EIABR0           (*(volatile reg_nvic_eiabr0_t*)((NVIC_BASE_ADDRESS + 0x300)))
#define REG_NVIC_EIABR0_ADDR      (NVIC_BASE_ADDRESS + 0x300)
#define BP_NVIC_EIABR0_RSVD0                                             22
#define BM_NVIC_EIABR0_RSVD0                                     0xFFC00000
#define BP_NVIC_EIABR0_SW3                                               21
#define BM_NVIC_EIABR0_SW3                                       0x00200000
#define BP_NVIC_EIABR0_SW2                                               20
#define BM_NVIC_EIABR0_SW2                                       0x00100000
#define BP_NVIC_EIABR0_SW1                                               19
#define BM_NVIC_EIABR0_SW1                                       0x00080000
#define BP_NVIC_EIABR0_SW0                                               18
#define BM_NVIC_EIABR0_SW0                                       0x00040000
#define BP_NVIC_EIABR0_AO_BOD                                            17
#define BM_NVIC_EIABR0_AO_BOD                                    0x00020000
#define BP_NVIC_EIABR0_RTC_TMR                                           16
#define BM_NVIC_EIABR0_RTC_TMR                                   0x00010000
#define BP_NVIC_EIABR0_WDT                                               15
#define BM_NVIC_EIABR0_WDT                                       0x00008000
#define BP_NVIC_EIABR0_PWM                                               14
#define BM_NVIC_EIABR0_PWM                                       0x00004000
#define BP_NVIC_EIABR0_ADC                                               13
#define BM_NVIC_EIABR0_ADC                                       0x00002000
#define BP_NVIC_EIABR0_DSP                                               12
#define BM_NVIC_EIABR0_DSP                                       0x00001000
#define BP_NVIC_EIABR0_RTC1                                              11
#define BM_NVIC_EIABR0_RTC1                                      0x00000800
#define BP_NVIC_EIABR0_RTC0                                              10
#define BM_NVIC_EIABR0_RTC0                                      0x00000400
#define BP_NVIC_EIABR0_I2C1                                               9
#define BM_NVIC_EIABR0_I2C1                                      0x00000200
#define BP_NVIC_EIABR0_I2C0                                               8
#define BM_NVIC_EIABR0_I2C0                                      0x00000100
#define BP_NVIC_EIABR0_SPI1                                               7
#define BM_NVIC_EIABR0_SPI1                                      0x00000080
#define BP_NVIC_EIABR0_SPI0                                               6
#define BM_NVIC_EIABR0_SPI0                                      0x00000040
#define BP_NVIC_EIABR0_UART1                                              5
#define BM_NVIC_EIABR0_UART1                                     0x00000020
#define BP_NVIC_EIABR0_UART0                                              4
#define BM_NVIC_EIABR0_UART0                                     0x00000010
#define BP_NVIC_EIABR0_TIMER1                                             3
#define BM_NVIC_EIABR0_TIMER1                                    0x00000008
#define BP_NVIC_EIABR0_TIMER0                                             2
#define BM_NVIC_EIABR0_TIMER0                                    0x00000004
#define BP_NVIC_EIABR0_GPIO1                                              1
#define BM_NVIC_EIABR0_GPIO1                                     0x00000002
#define BP_NVIC_EIABR0_GPIO0                                              0
#define BM_NVIC_EIABR0_GPIO0                                     0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_eiplr0_u
{
  uint32_t V;
  struct reg_nvic_eiplr0_s
  {
    uint32_t PRI_V0              :8;
    uint32_t PRI_V1              :8;
    uint32_t PRI_V2              :8;
    uint32_t PRI_V3              :8;
  }BF;
} reg_nvic_eiplr0_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_EIPLR0           (*(volatile reg_nvic_eiplr0_t*)((NVIC_BASE_ADDRESS + 0x400)))
#define REG_NVIC_EIPLR0_ADDR      (NVIC_BASE_ADDRESS + 0x400)
#define BP_NVIC_EIPLR0_PRI_V3                                            24
#define BM_NVIC_EIPLR0_PRI_V3                                    0xFF000000
#define BP_NVIC_EIPLR0_PRI_V2                                            16
#define BM_NVIC_EIPLR0_PRI_V2                                    0x00FF0000
#define BP_NVIC_EIPLR0_PRI_V1                                             8
#define BM_NVIC_EIPLR0_PRI_V1                                    0x0000FF00
#define BP_NVIC_EIPLR0_PRI_V0                                             0
#define BM_NVIC_EIPLR0_PRI_V0                                    0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_eiplr1_u
{
  uint32_t V;
  struct reg_nvic_eiplr1_s
  {
    uint32_t PRI_V4              :8;
    uint32_t PRI_V5              :8;
    uint32_t PRI_V6              :8;
    uint32_t PRI_V7              :8;
  }BF;
} reg_nvic_eiplr1_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_EIPLR1           (*(volatile reg_nvic_eiplr1_t*)((NVIC_BASE_ADDRESS + 0x404)))
#define REG_NVIC_EIPLR1_ADDR      (NVIC_BASE_ADDRESS + 0x404)
#define BP_NVIC_EIPLR1_PRI_V7                                            24
#define BM_NVIC_EIPLR1_PRI_V7                                    0xFF000000
#define BP_NVIC_EIPLR1_PRI_V6                                            16
#define BM_NVIC_EIPLR1_PRI_V6                                    0x00FF0000
#define BP_NVIC_EIPLR1_PRI_V5                                             8
#define BM_NVIC_EIPLR1_PRI_V5                                    0x0000FF00
#define BP_NVIC_EIPLR1_PRI_V4                                             0
#define BM_NVIC_EIPLR1_PRI_V4                                    0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_eiplr2_u
{
  uint32_t V;
  struct reg_nvic_eiplr2_s
  {
    uint32_t PRI_V8              :8;
    uint32_t PRI_V9              :8;
    uint32_t PRI_V10             :8;
    uint32_t PRI_V11             :8;
  }BF;
} reg_nvic_eiplr2_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_EIPLR2           (*(volatile reg_nvic_eiplr2_t*)((NVIC_BASE_ADDRESS + 0x408)))
#define REG_NVIC_EIPLR2_ADDR      (NVIC_BASE_ADDRESS + 0x408)
#define BP_NVIC_EIPLR2_PRI_V11                                           24
#define BM_NVIC_EIPLR2_PRI_V11                                   0xFF000000
#define BP_NVIC_EIPLR2_PRI_V10                                           16
#define BM_NVIC_EIPLR2_PRI_V10                                   0x00FF0000
#define BP_NVIC_EIPLR2_PRI_V9                                             8
#define BM_NVIC_EIPLR2_PRI_V9                                    0x0000FF00
#define BP_NVIC_EIPLR2_PRI_V8                                             0
#define BM_NVIC_EIPLR2_PRI_V8                                    0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_eiplr3_u
{
  uint32_t V;
  struct reg_nvic_eiplr3_s
  {
    uint32_t PRI_V12             :8;
    uint32_t PRI_V13             :8;
    uint32_t PRI_V14             :8;
    uint32_t PRI_V15             :8;
  }BF;
} reg_nvic_eiplr3_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_EIPLR3           (*(volatile reg_nvic_eiplr3_t*)((NVIC_BASE_ADDRESS + 0x40C)))
#define REG_NVIC_EIPLR3_ADDR      (NVIC_BASE_ADDRESS + 0x40C)
#define BP_NVIC_EIPLR3_PRI_V15                                           24
#define BM_NVIC_EIPLR3_PRI_V15                                   0xFF000000
#define BP_NVIC_EIPLR3_PRI_V14                                           16
#define BM_NVIC_EIPLR3_PRI_V14                                   0x00FF0000
#define BP_NVIC_EIPLR3_PRI_V13                                            8
#define BM_NVIC_EIPLR3_PRI_V13                                   0x0000FF00
#define BP_NVIC_EIPLR3_PRI_V12                                            0
#define BM_NVIC_EIPLR3_PRI_V12                                   0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_eiplr4_u
{
  uint32_t V;
  struct reg_nvic_eiplr4_s
  {
    uint32_t PRI_V16             :8;
    uint32_t PRI_V17             :8;
    uint32_t PRI_V18             :8;
    uint32_t PRI_V19             :8;
  }BF;
} reg_nvic_eiplr4_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_EIPLR4           (*(volatile reg_nvic_eiplr4_t*)((NVIC_BASE_ADDRESS + 0x410)))
#define REG_NVIC_EIPLR4_ADDR      (NVIC_BASE_ADDRESS + 0x410)
#define BP_NVIC_EIPLR4_PRI_V19                                           24
#define BM_NVIC_EIPLR4_PRI_V19                                   0xFF000000
#define BP_NVIC_EIPLR4_PRI_V18                                           16
#define BM_NVIC_EIPLR4_PRI_V18                                   0x00FF0000
#define BP_NVIC_EIPLR4_PRI_V17                                            8
#define BM_NVIC_EIPLR4_PRI_V17                                   0x0000FF00
#define BP_NVIC_EIPLR4_PRI_V16                                            0
#define BM_NVIC_EIPLR4_PRI_V16                                   0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_eiplr5_u
{
  uint32_t V;
  struct reg_nvic_eiplr5_s
  {
    uint32_t PRI_V20             :8;
    uint32_t PRI_V21             :8;
    uint32_t PRI_V22             :8;
    uint32_t PRI_V23             :8;
  }BF;
} reg_nvic_eiplr5_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_EIPLR5           (*(volatile reg_nvic_eiplr5_t*)((NVIC_BASE_ADDRESS + 0x414)))
#define REG_NVIC_EIPLR5_ADDR      (NVIC_BASE_ADDRESS + 0x414)
#define BP_NVIC_EIPLR5_PRI_V23                                           24
#define BM_NVIC_EIPLR5_PRI_V23                                   0xFF000000
#define BP_NVIC_EIPLR5_PRI_V22                                           16
#define BM_NVIC_EIPLR5_PRI_V22                                   0x00FF0000
#define BP_NVIC_EIPLR5_PRI_V21                                            8
#define BM_NVIC_EIPLR5_PRI_V21                                   0x0000FF00
#define BP_NVIC_EIPLR5_PRI_V20                                            0
#define BM_NVIC_EIPLR5_PRI_V20                                   0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_eiplr6_u
{
  uint32_t V;
  struct reg_nvic_eiplr6_s
  {
    uint32_t PRI_V24             :8;
    uint32_t PRI_V25             :8;
    uint32_t PRI_V26             :8;
    uint32_t PRI_V27             :8;
  }BF;
} reg_nvic_eiplr6_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_EIPLR6           (*(volatile reg_nvic_eiplr6_t*)((NVIC_BASE_ADDRESS + 0x418)))
#define REG_NVIC_EIPLR6_ADDR      (NVIC_BASE_ADDRESS + 0x418)
#define BP_NVIC_EIPLR6_PRI_V27                                           24
#define BM_NVIC_EIPLR6_PRI_V27                                   0xFF000000
#define BP_NVIC_EIPLR6_PRI_V26                                           16
#define BM_NVIC_EIPLR6_PRI_V26                                   0x00FF0000
#define BP_NVIC_EIPLR6_PRI_V25                                            8
#define BM_NVIC_EIPLR6_PRI_V25                                   0x0000FF00
#define BP_NVIC_EIPLR6_PRI_V24                                            0
#define BM_NVIC_EIPLR6_PRI_V24                                   0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_eiplr7_u
{
  uint32_t V;
  struct reg_nvic_eiplr7_s
  {
    uint32_t PRI_V28             :8;
    uint32_t PRI_V29             :8;
    uint32_t PRI_V30             :8;
    uint32_t PRI_V31             :8;
  }BF;
} reg_nvic_eiplr7_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_EIPLR7           (*(volatile reg_nvic_eiplr7_t*)((NVIC_BASE_ADDRESS + 0x41C)))
#define REG_NVIC_EIPLR7_ADDR      (NVIC_BASE_ADDRESS + 0x41C)
#define BP_NVIC_EIPLR7_PRI_V31                                           24
#define BM_NVIC_EIPLR7_PRI_V31                                   0xFF000000
#define BP_NVIC_EIPLR7_PRI_V30                                           16
#define BM_NVIC_EIPLR7_PRI_V30                                   0x00FF0000
#define BP_NVIC_EIPLR7_PRI_V29                                            8
#define BM_NVIC_EIPLR7_PRI_V29                                   0x0000FF00
#define BP_NVIC_EIPLR7_PRI_V28                                            0
#define BM_NVIC_EIPLR7_PRI_V28                                   0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_icsr_u
{
  uint32_t V;
  struct reg_nvic_icsr_s
  {
    uint32_t VECTACTIVE          :9;
    uint32_t RSVD0               :2;
    uint32_t RETTOBASE           :1;
    uint32_t VECTPENDING         :10;
    uint32_t ISRPENDING          :1;
    uint32_t ISRPREEMPT          :1;
    uint32_t RSVD1               :1;
    uint32_t PENDSTCLR           :1;
    uint32_t PENDSTSET           :1;
    uint32_t PENDSVCLR           :1;
    uint32_t PENDSVSET           :1;
    uint32_t RSVD2               :2;
    uint32_t NMIPENDSET          :1;
  }BF;
} reg_nvic_icsr_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_ICSR           (*(volatile reg_nvic_icsr_t*)((NVIC_BASE_ADDRESS + 0xD04)))
#define REG_NVIC_ICSR_ADDR      (NVIC_BASE_ADDRESS + 0xD04)
#define BP_NVIC_ICSR_NMIPENDSET                                          31
#define BM_NVIC_ICSR_NMIPENDSET                                  0x80000000
#define BP_NVIC_ICSR_RSVD0                                               29
#define BM_NVIC_ICSR_RSVD0                                       0x60000000
#define BP_NVIC_ICSR_PENDSVSET                                           28
#define BM_NVIC_ICSR_PENDSVSET                                   0x10000000
#define BP_NVIC_ICSR_PENDSVCLR                                           27
#define BM_NVIC_ICSR_PENDSVCLR                                   0x08000000
#define BP_NVIC_ICSR_PENDSTSET                                           26
#define BM_NVIC_ICSR_PENDSTSET                                   0x04000000
#define BP_NVIC_ICSR_PENDSTCLR                                           25
#define BM_NVIC_ICSR_PENDSTCLR                                   0x02000000
#define BP_NVIC_ICSR_RSVD1                                               24
#define BM_NVIC_ICSR_RSVD1                                       0x01000000
#define BP_NVIC_ICSR_ISRPREEMPT                                          23
#define BM_NVIC_ICSR_ISRPREEMPT                                  0x00800000
#define BP_NVIC_ICSR_ISRPENDING                                          22
#define BM_NVIC_ICSR_ISRPENDING                                  0x00400000
#define BP_NVIC_ICSR_VECTPENDING                                         12
#define BM_NVIC_ICSR_VECTPENDING                                 0x003FF000
#define BP_NVIC_ICSR_RETTOBASE                                           11
#define BM_NVIC_ICSR_RETTOBASE                                   0x00000800
#define BP_NVIC_ICSR_RSVD2                                                9
#define BM_NVIC_ICSR_RSVD2                                       0x00000600
#define BP_NVIC_ICSR_VECTACTIVE                                           0
#define BM_NVIC_ICSR_VECTACTIVE                                  0x000001FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_aircr_u
{
  uint32_t V;
  struct reg_nvic_aircr_s
  {
    uint32_t VECTRESET           :1;
    uint32_t VECTCLRACTIVE       :1;
    uint32_t SYSRESETREQ         :1;
    uint32_t RSVD0               :5;
    uint32_t PRIGROUP            :3;
    uint32_t RSVD1               :4;
    uint32_t ENDIANESS           :1;
    uint32_t VECTKEY             :16;
  }BF;
} reg_nvic_aircr_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_AIRCR           (*(volatile reg_nvic_aircr_t*)((NVIC_BASE_ADDRESS + 0xD0C)))
#define REG_NVIC_AIRCR_ADDR      (NVIC_BASE_ADDRESS + 0xD0C)
#define BP_NVIC_AIRCR_VECTKEY                                            16
#define BM_NVIC_AIRCR_VECTKEY                                    0xFFFF0000
#define BP_NVIC_AIRCR_ENDIANESS                                          15
#define BM_NVIC_AIRCR_ENDIANESS                                  0x00008000
#define BP_NVIC_AIRCR_RSVD0                                              11
#define BM_NVIC_AIRCR_RSVD0                                      0x00007800
#define BP_NVIC_AIRCR_PRIGROUP                                            8
#define BM_NVIC_AIRCR_PRIGROUP                                   0x00000700
#define BP_NVIC_AIRCR_RSVD1                                               3
#define BM_NVIC_AIRCR_RSVD1                                      0x000000F8
#define BP_NVIC_AIRCR_SYSRESETREQ                                         2
#define BM_NVIC_AIRCR_SYSRESETREQ                                0x00000004
#define BP_NVIC_AIRCR_VECTCLRACTIVE                                       1
#define BM_NVIC_AIRCR_VECTCLRACTIVE                              0x00000002
#define BP_NVIC_AIRCR_VECTRESET                                           0
#define BM_NVIC_AIRCR_VECTRESET                                  0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_scr_u
{
  uint32_t V;
  struct reg_nvic_scr_s
  {
    uint32_t RSVD0               :1;
    uint32_t SLEEPONEXIT         :1;
    uint32_t SLEEPDEEP           :1;
    uint32_t RSVD1               :1;
    uint32_t SEVONPEND           :1;
    uint32_t RSVD2               :27;
  }BF;
} reg_nvic_scr_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_SCR           (*(volatile reg_nvic_scr_t*)((NVIC_BASE_ADDRESS + 0xD10)))
#define REG_NVIC_SCR_ADDR      (NVIC_BASE_ADDRESS + 0xD10)
#define BP_NVIC_SCR_RSVD0                                                 5
#define BM_NVIC_SCR_RSVD0                                        0xFFFFFFE0
#define BP_NVIC_SCR_SEVONPEND                                             4
#define BM_NVIC_SCR_SEVONPEND                                    0x00000010
#define BP_NVIC_SCR_RSVD1                                                 3
#define BM_NVIC_SCR_RSVD1                                        0x00000008
#define BP_NVIC_SCR_SLEEPDEEP                                             2
#define BM_NVIC_SCR_SLEEPDEEP                                    0x00000004
#define BP_NVIC_SCR_SLEEPONEXIT                                           1
#define BM_NVIC_SCR_SLEEPONEXIT                                  0x00000002
#define BP_NVIC_SCR_RSVD2                                                 0
#define BM_NVIC_SCR_RSVD2                                        0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_ccr_u
{
  uint32_t V;
  struct reg_nvic_ccr_s
  {
    uint32_t NONBASETHRDENA      :1;
    uint32_t USERSETMPEND        :1;
    uint32_t RSVD0               :1;
    uint32_t UNALIGN_TRP         :1;
    uint32_t DIV_0_TRP           :1;
    uint32_t RSVD1               :3;
    uint32_t BFHFNMIGN           :1;
    uint32_t STKALIGN            :1;
    uint32_t RSVD2               :22;
  }BF;
} reg_nvic_ccr_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_CCR           (*(volatile reg_nvic_ccr_t*)((NVIC_BASE_ADDRESS + 0xD14)))
#define REG_NVIC_CCR_ADDR      (NVIC_BASE_ADDRESS + 0xD14)
#define BP_NVIC_CCR_RSVD0                                                10
#define BM_NVIC_CCR_RSVD0                                        0xFFFFFC00
#define BP_NVIC_CCR_STKALIGN                                              9
#define BM_NVIC_CCR_STKALIGN                                     0x00000200
#define BP_NVIC_CCR_BFHFNMIGN                                             8
#define BM_NVIC_CCR_BFHFNMIGN                                    0x00000100
#define BP_NVIC_CCR_RSVD1                                                 5
#define BM_NVIC_CCR_RSVD1                                        0x000000E0
#define BP_NVIC_CCR_DIV_0_TRP                                             4
#define BM_NVIC_CCR_DIV_0_TRP                                    0x00000010
#define BP_NVIC_CCR_UNALIGN_TRP                                           3
#define BM_NVIC_CCR_UNALIGN_TRP                                  0x00000008
#define BP_NVIC_CCR_RSVD2                                                 2
#define BM_NVIC_CCR_RSVD2                                        0x00000004
#define BP_NVIC_CCR_USERSETMPEND                                          1
#define BM_NVIC_CCR_USERSETMPEND                                 0x00000002
#define BP_NVIC_CCR_NONBASETHRDENA                                        0
#define BM_NVIC_CCR_NONBASETHRDENA                               0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_seplr0_u
{
  uint32_t V;
  struct reg_nvic_seplr0_s
  {
    uint32_t PRI_4               :8;
    uint32_t PRI_5               :8;
    uint32_t PRI_6               :8;
    uint32_t RSVD0               :8;
  }BF;
} reg_nvic_seplr0_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_SEPLR0           (*(volatile reg_nvic_seplr0_t*)((NVIC_BASE_ADDRESS + 0xD18)))
#define REG_NVIC_SEPLR0_ADDR      (NVIC_BASE_ADDRESS + 0xD18)
#define BP_NVIC_SEPLR0_RSVD0                                             24
#define BM_NVIC_SEPLR0_RSVD0                                     0xFF000000
#define BP_NVIC_SEPLR0_PRI_6                                             16
#define BM_NVIC_SEPLR0_PRI_6                                     0x00FF0000
#define BP_NVIC_SEPLR0_PRI_5                                              8
#define BM_NVIC_SEPLR0_PRI_5                                     0x0000FF00
#define BP_NVIC_SEPLR0_PRI_4                                              0
#define BM_NVIC_SEPLR0_PRI_4                                     0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_seplr1_u
{
  uint32_t V;
  struct reg_nvic_seplr1_s
  {
    uint32_t RSVD0               :24;
    uint32_t PRI_11              :8;
  }BF;
} reg_nvic_seplr1_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_SEPLR1           (*(volatile reg_nvic_seplr1_t*)((NVIC_BASE_ADDRESS + 0xD1C)))
#define REG_NVIC_SEPLR1_ADDR      (NVIC_BASE_ADDRESS + 0xD1C)
#define BP_NVIC_SEPLR1_PRI_11                                            24
#define BM_NVIC_SEPLR1_PRI_11                                    0xFF000000
#define BP_NVIC_SEPLR1_RSVD0                                              0
#define BM_NVIC_SEPLR1_RSVD0                                     0x00FFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_seplr2_u
{
  uint32_t V;
  struct reg_nvic_seplr2_s
  {
    uint32_t PRI_12              :8;
    uint32_t RSVD0               :8;
    uint32_t PRI_14              :8;
    uint32_t PRI_15              :8;
  }BF;
} reg_nvic_seplr2_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_SEPLR2           (*(volatile reg_nvic_seplr2_t*)((NVIC_BASE_ADDRESS + 0xD20)))
#define REG_NVIC_SEPLR2_ADDR      (NVIC_BASE_ADDRESS + 0xD20)
#define BP_NVIC_SEPLR2_PRI_15                                            24
#define BM_NVIC_SEPLR2_PRI_15                                    0xFF000000
#define BP_NVIC_SEPLR2_PRI_14                                            16
#define BM_NVIC_SEPLR2_PRI_14                                    0x00FF0000
#define BP_NVIC_SEPLR2_RSVD0                                              8
#define BM_NVIC_SEPLR2_RSVD0                                     0x0000FF00
#define BP_NVIC_SEPLR2_PRI_12                                             0
#define BM_NVIC_SEPLR2_PRI_12                                    0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_shcsr_u
{
  uint32_t V;
  struct reg_nvic_shcsr_s
  {
    uint32_t MEMFAULTACT         :1;
    uint32_t BUSFAULTACT         :1;
    uint32_t RSVD0               :1;
    uint32_t USGFAULTACT         :1;
    uint32_t RSVD1               :3;
    uint32_t SVCALLACT           :1;
    uint32_t MONITORACT          :1;
    uint32_t RSVD2               :1;
    uint32_t PENDSVACT           :1;
    uint32_t SYSTICKACT          :1;
    uint32_t USGFAULTPENDED      :1;
    uint32_t MEMFAULTPENDED      :1;
    uint32_t BUSFAULTPENDED      :1;
    uint32_t SVCALLPENDED        :1;
    uint32_t MEMFAULTENA         :1;
    uint32_t BUSFAULTENA         :1;
    uint32_t USGFAULTENA         :1;
    uint32_t RSVD3               :13;
  }BF;
} reg_nvic_shcsr_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_SHCSR           (*(volatile reg_nvic_shcsr_t*)((NVIC_BASE_ADDRESS + 0xD24)))
#define REG_NVIC_SHCSR_ADDR      (NVIC_BASE_ADDRESS + 0xD24)
#define BP_NVIC_SHCSR_RSVD0                                              19
#define BM_NVIC_SHCSR_RSVD0                                      0xFFF80000
#define BP_NVIC_SHCSR_USGFAULTENA                                        18
#define BM_NVIC_SHCSR_USGFAULTENA                                0x00040000
#define BP_NVIC_SHCSR_BUSFAULTENA                                        17
#define BM_NVIC_SHCSR_BUSFAULTENA                                0x00020000
#define BP_NVIC_SHCSR_MEMFAULTENA                                        16
#define BM_NVIC_SHCSR_MEMFAULTENA                                0x00010000
#define BP_NVIC_SHCSR_SVCALLPENDED                                       15
#define BM_NVIC_SHCSR_SVCALLPENDED                               0x00008000
#define BP_NVIC_SHCSR_BUSFAULTPENDED                                     14
#define BM_NVIC_SHCSR_BUSFAULTPENDED                             0x00004000
#define BP_NVIC_SHCSR_MEMFAULTPENDED                                     13
#define BM_NVIC_SHCSR_MEMFAULTPENDED                             0x00002000
#define BP_NVIC_SHCSR_USGFAULTPENDED                                     12
#define BM_NVIC_SHCSR_USGFAULTPENDED                             0x00001000
#define BP_NVIC_SHCSR_SYSTICKACT                                         11
#define BM_NVIC_SHCSR_SYSTICKACT                                 0x00000800
#define BP_NVIC_SHCSR_PENDSVACT                                          10
#define BM_NVIC_SHCSR_PENDSVACT                                  0x00000400
#define BP_NVIC_SHCSR_RSVD1                                               9
#define BM_NVIC_SHCSR_RSVD1                                      0x00000200
#define BP_NVIC_SHCSR_MONITORACT                                          8
#define BM_NVIC_SHCSR_MONITORACT                                 0x00000100
#define BP_NVIC_SHCSR_SVCALLACT                                           7
#define BM_NVIC_SHCSR_SVCALLACT                                  0x00000080
#define BP_NVIC_SHCSR_RSVD2                                               4
#define BM_NVIC_SHCSR_RSVD2                                      0x00000070
#define BP_NVIC_SHCSR_USGFAULTACT                                         3
#define BM_NVIC_SHCSR_USGFAULTACT                                0x00000008
#define BP_NVIC_SHCSR_RSVD3                                               2
#define BM_NVIC_SHCSR_RSVD3                                      0x00000004
#define BP_NVIC_SHCSR_BUSFAULTACT                                         1
#define BM_NVIC_SHCSR_BUSFAULTACT                                0x00000002
#define BP_NVIC_SHCSR_MEMFAULTACT                                         0
#define BM_NVIC_SHCSR_MEMFAULTACT                                0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_cfsr_u
{
  uint32_t V;
  struct reg_nvic_cfsr_s
  {
    uint32_t IACCVIOL            :1;
    uint32_t DACCVIOL            :1;
    uint32_t RSVD0               :1;
    uint32_t MUNSTKERR           :1;
    uint32_t MSTKERR             :1;
    uint32_t RSVD1               :2;
    uint32_t MMARVALID           :1;
    uint32_t IBUSERR             :1;
    uint32_t PREISERR            :1;
    uint32_t IMPREISERR          :1;
    uint32_t UNSTKERR            :1;
    uint32_t STKERR              :1;
    uint32_t RSVD2               :2;
    uint32_t BFARVALID           :1;
    uint32_t UNDEFINSTR          :1;
    uint32_t INVSTATE            :1;
    uint32_t INVPC               :1;
    uint32_t NOCP                :1;
    uint32_t RSVD3               :4;
    uint32_t UNALIGNED           :1;
    uint32_t DIVBYZERO           :1;
    uint32_t RSVD4               :6;
  }BF;
} reg_nvic_cfsr_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_CFSR           (*(volatile reg_nvic_cfsr_t*)((NVIC_BASE_ADDRESS + 0xD28)))
#define REG_NVIC_CFSR_ADDR      (NVIC_BASE_ADDRESS + 0xD28)
#define BP_NVIC_CFSR_RSVD0                                               26
#define BM_NVIC_CFSR_RSVD0                                       0xFC000000
#define BP_NVIC_CFSR_DIVBYZERO                                           25
#define BM_NVIC_CFSR_DIVBYZERO                                   0x02000000
#define BP_NVIC_CFSR_UNALIGNED                                           24
#define BM_NVIC_CFSR_UNALIGNED                                   0x01000000
#define BP_NVIC_CFSR_RSVD1                                               20
#define BM_NVIC_CFSR_RSVD1                                       0x00F00000
#define BP_NVIC_CFSR_NOCP                                                19
#define BM_NVIC_CFSR_NOCP                                        0x00080000
#define BP_NVIC_CFSR_INVPC                                               18
#define BM_NVIC_CFSR_INVPC                                       0x00040000
#define BP_NVIC_CFSR_INVSTATE                                            17
#define BM_NVIC_CFSR_INVSTATE                                    0x00020000
#define BP_NVIC_CFSR_UNDEFINSTR                                          16
#define BM_NVIC_CFSR_UNDEFINSTR                                  0x00010000
#define BP_NVIC_CFSR_BFARVALID                                           15
#define BM_NVIC_CFSR_BFARVALID                                   0x00008000
#define BP_NVIC_CFSR_RSVD2                                               13
#define BM_NVIC_CFSR_RSVD2                                       0x00006000
#define BP_NVIC_CFSR_STKERR                                              12
#define BM_NVIC_CFSR_STKERR                                      0x00001000
#define BP_NVIC_CFSR_UNSTKERR                                            11
#define BM_NVIC_CFSR_UNSTKERR                                    0x00000800
#define BP_NVIC_CFSR_IMPREISERR                                          10
#define BM_NVIC_CFSR_IMPREISERR                                  0x00000400
#define BP_NVIC_CFSR_PREISERR                                             9
#define BM_NVIC_CFSR_PREISERR                                    0x00000200
#define BP_NVIC_CFSR_IBUSERR                                              8
#define BM_NVIC_CFSR_IBUSERR                                     0x00000100
#define BP_NVIC_CFSR_MMARVALID                                            7
#define BM_NVIC_CFSR_MMARVALID                                   0x00000080
#define BP_NVIC_CFSR_RSVD3                                                5
#define BM_NVIC_CFSR_RSVD3                                       0x00000060
#define BP_NVIC_CFSR_MSTKERR                                              4
#define BM_NVIC_CFSR_MSTKERR                                     0x00000010
#define BP_NVIC_CFSR_MUNSTKERR                                            3
#define BM_NVIC_CFSR_MUNSTKERR                                   0x00000008
#define BP_NVIC_CFSR_RSVD4                                                2
#define BM_NVIC_CFSR_RSVD4                                       0x00000004
#define BP_NVIC_CFSR_DACCVIOL                                             1
#define BM_NVIC_CFSR_DACCVIOL                                    0x00000002
#define BP_NVIC_CFSR_IACCVIOL                                             0
#define BM_NVIC_CFSR_IACCVIOL                                    0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_hfsr_u
{
  uint32_t V;
  struct reg_nvic_hfsr_s
  {
    uint32_t RSVD0               :1;
    uint32_t VECTBL              :1;
    uint32_t RSVD1               :28;
    uint32_t FORCED              :1;
    uint32_t DEBUGEVT            :1;
  }BF;
} reg_nvic_hfsr_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_HFSR           (*(volatile reg_nvic_hfsr_t*)((NVIC_BASE_ADDRESS + 0xD2C)))
#define REG_NVIC_HFSR_ADDR      (NVIC_BASE_ADDRESS + 0xD2C)
#define BP_NVIC_HFSR_DEBUGEVT                                            31
#define BM_NVIC_HFSR_DEBUGEVT                                    0x80000000
#define BP_NVIC_HFSR_FORCED                                              30
#define BM_NVIC_HFSR_FORCED                                      0x40000000
#define BP_NVIC_HFSR_RSVD0                                                2
#define BM_NVIC_HFSR_RSVD0                                       0x3FFFFFFC
#define BP_NVIC_HFSR_VECTBL                                               1
#define BM_NVIC_HFSR_VECTBL                                      0x00000002
#define BP_NVIC_HFSR_RSVD1                                                0
#define BM_NVIC_HFSR_RSVD1                                       0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_dfsr_u
{
  uint32_t V;
  struct reg_nvic_dfsr_s
  {
    uint32_t HALTED              :1;
    uint32_t BKPT                :1;
    uint32_t DWTTRAP             :1;
    uint32_t VCATCH              :1;
    uint32_t EXTERNAL            :1;
    uint32_t RSVD0               :27;
  }BF;
} reg_nvic_dfsr_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_DFSR           (*(volatile reg_nvic_dfsr_t*)((NVIC_BASE_ADDRESS + 0xD30)))
#define REG_NVIC_DFSR_ADDR      (NVIC_BASE_ADDRESS + 0xD30)
#define BP_NVIC_DFSR_RSVD0                                                5
#define BM_NVIC_DFSR_RSVD0                                       0xFFFFFFE0
#define BP_NVIC_DFSR_EXTERNAL                                             4
#define BM_NVIC_DFSR_EXTERNAL                                    0x00000010
#define BP_NVIC_DFSR_VCATCH                                               3
#define BM_NVIC_DFSR_VCATCH                                      0x00000008
#define BP_NVIC_DFSR_DWTTRAP                                              2
#define BM_NVIC_DFSR_DWTTRAP                                     0x00000004
#define BP_NVIC_DFSR_BKPT                                                 1
#define BM_NVIC_DFSR_BKPT                                        0x00000002
#define BP_NVIC_DFSR_HALTED                                               0
#define BM_NVIC_DFSR_HALTED                                      0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_mmar_u
{
  uint32_t V;
  struct reg_nvic_mmar_s
  {
    uint32_t MMAR                :32;
  }BF;
} reg_nvic_mmar_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_MMAR           (*(volatile reg_nvic_mmar_t*)((NVIC_BASE_ADDRESS + 0xD34)))
#define REG_NVIC_MMAR_ADDR      (NVIC_BASE_ADDRESS + 0xD34)
#define BP_NVIC_MMAR_MMAR                                                 0
#define BM_NVIC_MMAR_MMAR                                        0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_bfar_u
{
  uint32_t V;
  struct reg_nvic_bfar_s
  {
    uint32_t BFAR                :32;
  }BF;
} reg_nvic_bfar_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_BFAR           (*(volatile reg_nvic_bfar_t*)((NVIC_BASE_ADDRESS + 0xD38)))
#define REG_NVIC_BFAR_ADDR      (NVIC_BASE_ADDRESS + 0xD38)
#define BP_NVIC_BFAR_BFAR                                                 0
#define BM_NVIC_BFAR_BFAR                                        0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_nvic_stir_u
{
  uint32_t V;
  struct reg_nvic_stir_s
  {
    uint32_t INTID               :9;
    uint32_t RSVD0               :23;
  }BF;
} reg_nvic_stir_t;

#endif  // __LANGUAGE_ASM__

#define REG_NVIC_STIR           (*(volatile reg_nvic_stir_t*)((NVIC_BASE_ADDRESS + 0xF00)))
#define REG_NVIC_STIR_ADDR      (NVIC_BASE_ADDRESS + 0xF00)
#define BP_NVIC_STIR_RSVD0                                                9
#define BM_NVIC_STIR_RSVD0                                       0xFFFFFE00
#define BP_NVIC_STIR_INTID                                                0
#define BM_NVIC_STIR_INTID                                       0x000001FF

#define FLASH_CTLR_BASE_ADDRESS 0xE0080000


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_flash_ctlr_status_u
{
  uint32_t V;
  struct reg_flash_ctlr_status_s
  {
    uint32_t READY               :1;
    uint32_t RSVD0               :31;
  }BF;
} reg_flash_ctlr_status_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for FLASH_CTLR_STATUS_READY
//-------------------------------------------------------------------------
#define BFV_FLASH_CTLR_STATUS_READY_READY                               0x1
#define BFV_FLASH_CTLR_STATUS_READY_NOT_READY                           0x0

#define REG_FLASH_CTLR_STATUS           (*(volatile reg_flash_ctlr_status_t*)((FLASH_CTLR_BASE_ADDRESS + 0x0)))
#define REG_FLASH_CTLR_STATUS_ADDR      (FLASH_CTLR_BASE_ADDRESS + 0x0)
#define BP_FLASH_CTLR_STATUS_RSVD0                                        1
#define BM_FLASH_CTLR_STATUS_RSVD0                               0xFFFFFFFE
#define BP_FLASH_CTLR_STATUS_READY                                        0
#define BM_FLASH_CTLR_STATUS_READY                               0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_flash_ctlr_controlen_u
{
  uint32_t V;
  struct reg_flash_ctlr_controlen_s
  {
    uint32_t KEY                 :32;
  }BF;
} reg_flash_ctlr_controlen_t;

#endif  // __LANGUAGE_ASM__

#define REG_FLASH_CTLR_CONTROLEN           (*(volatile reg_flash_ctlr_controlen_t*)((FLASH_CTLR_BASE_ADDRESS + 0x4)))
#define REG_FLASH_CTLR_CONTROLEN_ADDR      (FLASH_CTLR_BASE_ADDRESS + 0x4)
#define BP_FLASH_CTLR_CONTROLEN_KEY                                       0
#define BM_FLASH_CTLR_CONTROLEN_KEY                              0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_flash_ctlr_control0_u
{
  uint32_t V;
  struct reg_flash_ctlr_control0_s
  {
    uint32_t LVEN                :1;
    uint32_t RSVD0               :31;
  }BF;
} reg_flash_ctlr_control0_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for FLASH_CTLR_CONTROL0_LVEN
//-------------------------------------------------------------------------
#define BFV_FLASH_CTLR_CONTROL0_LVEN_LOWV                               0x1
#define BFV_FLASH_CTLR_CONTROL0_LVEN_HIGHV                              0x0

#define REG_FLASH_CTLR_CONTROL0           (*(volatile reg_flash_ctlr_control0_t*)((FLASH_CTLR_BASE_ADDRESS + 0x10)))
#define REG_FLASH_CTLR_CONTROL0_ADDR      (FLASH_CTLR_BASE_ADDRESS + 0x10)
#define BP_FLASH_CTLR_CONTROL0_RSVD0                                      1
#define BM_FLASH_CTLR_CONTROL0_RSVD0                             0xFFFFFFFE
#define BP_FLASH_CTLR_CONTROL0_LVEN                                       0
#define BM_FLASH_CTLR_CONTROL0_LVEN                              0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_flash_ctlr_control1_u
{
  uint32_t V;
  struct reg_flash_ctlr_control1_s
  {
    uint32_t XE                  :1;
    uint32_t YE                  :1;
    uint32_t SE                  :1;
    uint32_t RSVD0               :1;
    uint32_t IFREN               :1;
    uint32_t RSVD1               :3;
    uint32_t ERASE               :1;
    uint32_t MAS1                :1;
    uint32_t RSVD2               :2;
    uint32_t PROG                :1;
    uint32_t NVSTR               :1;
    uint32_t RSVD3               :2;
    uint32_t TMR                 :1;
    uint32_t RSVD4               :3;
    uint32_t TIMEREN             :1;
    uint32_t RSVD5               :3;
    uint32_t PROT_INFO           :1;
    uint32_t PROT_PROGRAM        :1;
    uint32_t PROT_ERASE          :1;
    uint32_t PROT_MASS_ERASE     :1;
    uint32_t PROT_REF_CELL_ERASE :1;
    uint32_t RSVD6               :3;
  }BF;
} reg_flash_ctlr_control1_t;

#endif  // __LANGUAGE_ASM__

#define REG_FLASH_CTLR_CONTROL1           (*(volatile reg_flash_ctlr_control1_t*)((FLASH_CTLR_BASE_ADDRESS + 0x14)))
#define REG_FLASH_CTLR_CONTROL1_ADDR      (FLASH_CTLR_BASE_ADDRESS + 0x14)
#define BP_FLASH_CTLR_CONTROL1_RSVD0                                     29
#define BM_FLASH_CTLR_CONTROL1_RSVD0                             0xE0000000
#define BP_FLASH_CTLR_CONTROL1_PROT_REF_CELL_ERASE                       28
#define BM_FLASH_CTLR_CONTROL1_PROT_REF_CELL_ERASE               0x10000000
#define BP_FLASH_CTLR_CONTROL1_PROT_MASS_ERASE                           27
#define BM_FLASH_CTLR_CONTROL1_PROT_MASS_ERASE                   0x08000000
#define BP_FLASH_CTLR_CONTROL1_PROT_ERASE                                26
#define BM_FLASH_CTLR_CONTROL1_PROT_ERASE                        0x04000000
#define BP_FLASH_CTLR_CONTROL1_PROT_PROGRAM                              25
#define BM_FLASH_CTLR_CONTROL1_PROT_PROGRAM                      0x02000000
#define BP_FLASH_CTLR_CONTROL1_PROT_INFO                                 24
#define BM_FLASH_CTLR_CONTROL1_PROT_INFO                         0x01000000
#define BP_FLASH_CTLR_CONTROL1_RSVD1                                     21
#define BM_FLASH_CTLR_CONTROL1_RSVD1                             0x00E00000
#define BP_FLASH_CTLR_CONTROL1_TIMEREN                                   20
#define BM_FLASH_CTLR_CONTROL1_TIMEREN                           0x00100000
#define BP_FLASH_CTLR_CONTROL1_RSVD2                                     17
#define BM_FLASH_CTLR_CONTROL1_RSVD2                             0x000E0000
#define BP_FLASH_CTLR_CONTROL1_TMR                                       16
#define BM_FLASH_CTLR_CONTROL1_TMR                               0x00010000
#define BP_FLASH_CTLR_CONTROL1_RSVD3                                     14
#define BM_FLASH_CTLR_CONTROL1_RSVD3                             0x0000C000
#define BP_FLASH_CTLR_CONTROL1_NVSTR                                     13
#define BM_FLASH_CTLR_CONTROL1_NVSTR                             0x00002000
#define BP_FLASH_CTLR_CONTROL1_PROG                                      12
#define BM_FLASH_CTLR_CONTROL1_PROG                              0x00001000
#define BP_FLASH_CTLR_CONTROL1_RSVD4                                     10
#define BM_FLASH_CTLR_CONTROL1_RSVD4                             0x00000C00
#define BP_FLASH_CTLR_CONTROL1_MAS1                                       9
#define BM_FLASH_CTLR_CONTROL1_MAS1                              0x00000200
#define BP_FLASH_CTLR_CONTROL1_ERASE                                      8
#define BM_FLASH_CTLR_CONTROL1_ERASE                             0x00000100
#define BP_FLASH_CTLR_CONTROL1_RSVD5                                      5
#define BM_FLASH_CTLR_CONTROL1_RSVD5                             0x000000E0
#define BP_FLASH_CTLR_CONTROL1_IFREN                                      4
#define BM_FLASH_CTLR_CONTROL1_IFREN                             0x00000010
#define BP_FLASH_CTLR_CONTROL1_RSVD6                                      3
#define BM_FLASH_CTLR_CONTROL1_RSVD6                             0x00000008
#define BP_FLASH_CTLR_CONTROL1_SE                                         2
#define BM_FLASH_CTLR_CONTROL1_SE                                0x00000004
#define BP_FLASH_CTLR_CONTROL1_YE                                         1
#define BM_FLASH_CTLR_CONTROL1_YE                                0x00000002
#define BP_FLASH_CTLR_CONTROL1_XE                                         0
#define BM_FLASH_CTLR_CONTROL1_XE                                0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_flash_ctlr_control2_u
{
  uint32_t V;
  struct reg_flash_ctlr_control2_s
  {
    uint32_t REDEN               :2;
    uint32_t IFREN1              :1;
    uint32_t RSVD0               :29;
  }BF;
} reg_flash_ctlr_control2_t;

#endif  // __LANGUAGE_ASM__

//-------------------------------------------------------------------------
// field value definitions for FLASH_CTLR_CONTROL2_IFREN1
//-------------------------------------------------------------------------
#define BFV_FLASH_CTLR_CONTROL2_IFREN1_ENABLE                           0x1
#define BFV_FLASH_CTLR_CONTROL2_IFREN1_DISABLE                          0x0

//-------------------------------------------------------------------------
// field value definitions for FLASH_CTLR_CONTROL2_REDEN
//-------------------------------------------------------------------------
#define BFV_FLASH_CTLR_CONTROL2_REDEN_NORMAL                            0x0
#define BFV_FLASH_CTLR_CONTROL2_REDEN_PAGE0                             0x1
#define BFV_FLASH_CTLR_CONTROL2_REDEN_PAGE1                             0x2

#define REG_FLASH_CTLR_CONTROL2           (*(volatile reg_flash_ctlr_control2_t*)((FLASH_CTLR_BASE_ADDRESS + 0x18)))
#define REG_FLASH_CTLR_CONTROL2_ADDR      (FLASH_CTLR_BASE_ADDRESS + 0x18)
#define BP_FLASH_CTLR_CONTROL2_RSVD0                                      3
#define BM_FLASH_CTLR_CONTROL2_RSVD0                             0xFFFFFFF8
#define BP_FLASH_CTLR_CONTROL2_IFREN1                                     2
#define BM_FLASH_CTLR_CONTROL2_IFREN1                            0x00000004
#define BP_FLASH_CTLR_CONTROL2_REDEN                                      0
#define BM_FLASH_CTLR_CONTROL2_REDEN                             0x00000003

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_flash_ctlr_timer_u
{
  uint32_t V;
  struct reg_flash_ctlr_timer_s
  {
    uint32_t COUNT               :20;
    uint32_t RSVD0               :12;
  }BF;
} reg_flash_ctlr_timer_t;

#endif  // __LANGUAGE_ASM__

#define REG_FLASH_CTLR_TIMER           (*(volatile reg_flash_ctlr_timer_t*)((FLASH_CTLR_BASE_ADDRESS + 0x20)))
#define REG_FLASH_CTLR_TIMER_ADDR      (FLASH_CTLR_BASE_ADDRESS + 0x20)
#define BP_FLASH_CTLR_TIMER_RSVD0                                        20
#define BM_FLASH_CTLR_TIMER_RSVD0                                0xFFF00000
#define BP_FLASH_CTLR_TIMER_COUNT                                         0
#define BM_FLASH_CTLR_TIMER_COUNT                                0x000FFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_flash_ctlr_addr_u
{
  uint32_t V;
  struct reg_flash_ctlr_addr_s
  {
    uint32_t ADDR                :32;
  }BF;
} reg_flash_ctlr_addr_t;

#endif  // __LANGUAGE_ASM__

#define REG_FLASH_CTLR_ADDR           (*(volatile reg_flash_ctlr_addr_t*)((FLASH_CTLR_BASE_ADDRESS + 0x30)))
#define REG_FLASH_CTLR_ADDR_ADDR      (FLASH_CTLR_BASE_ADDRESS + 0x30)
#define BP_FLASH_CTLR_ADDR_ADDR                                           0
#define BM_FLASH_CTLR_ADDR_ADDR                                  0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_flash_ctlr_data0_u
{
  uint32_t V;
  struct reg_flash_ctlr_data0_s
  {
    uint32_t DATA                :32;
  }BF;
} reg_flash_ctlr_data0_t;

#endif  // __LANGUAGE_ASM__

#define REG_FLASH_CTLR_DATA0           (*(volatile reg_flash_ctlr_data0_t*)((FLASH_CTLR_BASE_ADDRESS + 0x40)))
#define REG_FLASH_CTLR_DATA0_ADDR      (FLASH_CTLR_BASE_ADDRESS + 0x40)
#define BP_FLASH_CTLR_DATA0_DATA                                          0
#define BM_FLASH_CTLR_DATA0_DATA                                 0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_flash_ctlr_data1_u
{
  uint32_t V;
  struct reg_flash_ctlr_data1_s
  {
    uint32_t DATA                :32;
  }BF;
} reg_flash_ctlr_data1_t;

#endif  // __LANGUAGE_ASM__

#define REG_FLASH_CTLR_DATA1           (*(volatile reg_flash_ctlr_data1_t*)((FLASH_CTLR_BASE_ADDRESS + 0x44)))
#define REG_FLASH_CTLR_DATA1_ADDR      (FLASH_CTLR_BASE_ADDRESS + 0x44)
#define BP_FLASH_CTLR_DATA1_DATA                                          0
#define BM_FLASH_CTLR_DATA1_DATA                                 0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_flash_ctlr_data2_u
{
  uint32_t V;
  struct reg_flash_ctlr_data2_s
  {
    uint32_t DATA                :32;
  }BF;
} reg_flash_ctlr_data2_t;

#endif  // __LANGUAGE_ASM__

#define REG_FLASH_CTLR_DATA2           (*(volatile reg_flash_ctlr_data2_t*)((FLASH_CTLR_BASE_ADDRESS + 0x48)))
#define REG_FLASH_CTLR_DATA2_ADDR      (FLASH_CTLR_BASE_ADDRESS + 0x48)
#define BP_FLASH_CTLR_DATA2_DATA                                          0
#define BM_FLASH_CTLR_DATA2_DATA                                 0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_flash_ctlr_data3_u
{
  uint32_t V;
  struct reg_flash_ctlr_data3_s
  {
    uint32_t DATA                :32;
  }BF;
} reg_flash_ctlr_data3_t;

#endif  // __LANGUAGE_ASM__

#define REG_FLASH_CTLR_DATA3           (*(volatile reg_flash_ctlr_data3_t*)((FLASH_CTLR_BASE_ADDRESS + 0x4C)))
#define REG_FLASH_CTLR_DATA3_ADDR      (FLASH_CTLR_BASE_ADDRESS + 0x4C)
#define BP_FLASH_CTLR_DATA3_DATA                                          0
#define BM_FLASH_CTLR_DATA3_DATA                                 0xFFFFFFFF

#define DSPCTRL_M3_BASE_ADDRESS 0x40800000


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_m3_dsp_ctrl_u
{
  uint32_t V;
  struct reg_dspctrl_m3_dsp_ctrl_s
  {
    uint32_t RESET_DSP           :1;
    uint32_t CORE_HOLD           :1;
    uint32_t DMA_INV_PRIO        :1;
    uint32_t DMS_HOLD_EN         :1;
    uint32_t HOLD_TOGGLE_EN      :1;
    uint32_t RSVD0               :27;
  }BF;
} reg_dspctrl_m3_dsp_ctrl_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_M3_DSP_CTRL           (*(volatile reg_dspctrl_m3_dsp_ctrl_t*)((DSPCTRL_M3_BASE_ADDRESS + 0x0)))
#define REG_DSPCTRL_M3_DSP_CTRL_ADDR      (DSPCTRL_M3_BASE_ADDRESS + 0x0)
#define BP_DSPCTRL_M3_DSP_CTRL_RSVD0                                      5
#define BM_DSPCTRL_M3_DSP_CTRL_RSVD0                             0xFFFFFFE0
#define BP_DSPCTRL_M3_DSP_CTRL_HOLD_TOGGLE_EN                             4
#define BM_DSPCTRL_M3_DSP_CTRL_HOLD_TOGGLE_EN                    0x00000010
#define BP_DSPCTRL_M3_DSP_CTRL_DMS_HOLD_EN                                3
#define BM_DSPCTRL_M3_DSP_CTRL_DMS_HOLD_EN                       0x00000008
#define BP_DSPCTRL_M3_DSP_CTRL_DMA_INV_PRIO                               2
#define BM_DSPCTRL_M3_DSP_CTRL_DMA_INV_PRIO                      0x00000004
#define BP_DSPCTRL_M3_DSP_CTRL_CORE_HOLD                                  1
#define BM_DSPCTRL_M3_DSP_CTRL_CORE_HOLD                         0x00000002
#define BP_DSPCTRL_M3_DSP_CTRL_RESET_DSP                                  0
#define BM_DSPCTRL_M3_DSP_CTRL_RESET_DSP                         0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_m3_dsp_status_u
{
  uint32_t V;
  struct reg_dspctrl_m3_dsp_status_s
  {
    uint32_t CORE_HOLD_ACK       :1;
    uint32_t DSP_INIT_HOLD       :1;
    uint32_t AHB_RELEASE_HOLD    :1;
    uint32_t AHB_RELEASE2_HOLD   :1;
    uint32_t RSVD0               :28;
  }BF;
} reg_dspctrl_m3_dsp_status_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_M3_DSP_STATUS           (*(volatile reg_dspctrl_m3_dsp_status_t*)((DSPCTRL_M3_BASE_ADDRESS + 0x4)))
#define REG_DSPCTRL_M3_DSP_STATUS_ADDR      (DSPCTRL_M3_BASE_ADDRESS + 0x4)
#define BP_DSPCTRL_M3_DSP_STATUS_RSVD0                                    4
#define BM_DSPCTRL_M3_DSP_STATUS_RSVD0                           0xFFFFFFF0
#define BP_DSPCTRL_M3_DSP_STATUS_AHB_RELEASE2_HOLD                        3
#define BM_DSPCTRL_M3_DSP_STATUS_AHB_RELEASE2_HOLD               0x00000008
#define BP_DSPCTRL_M3_DSP_STATUS_AHB_RELEASE_HOLD                         2
#define BM_DSPCTRL_M3_DSP_STATUS_AHB_RELEASE_HOLD                0x00000004
#define BP_DSPCTRL_M3_DSP_STATUS_DSP_INIT_HOLD                            1
#define BM_DSPCTRL_M3_DSP_STATUS_DSP_INIT_HOLD                   0x00000002
#define BP_DSPCTRL_M3_DSP_STATUS_CORE_HOLD_ACK                            0
#define BM_DSPCTRL_M3_DSP_STATUS_CORE_HOLD_ACK                   0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_m3_release_hold_pulse_u
{
  uint32_t V;
  struct reg_dspctrl_m3_release_hold_pulse_s
  {
    uint32_t DATA                :32;
  }BF;
} reg_dspctrl_m3_release_hold_pulse_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_M3_RELEASE_HOLD_PULSE           (*(volatile reg_dspctrl_m3_release_hold_pulse_t*)((DSPCTRL_M3_BASE_ADDRESS + 0x8)))
#define REG_DSPCTRL_M3_RELEASE_HOLD_PULSE_ADDR      (DSPCTRL_M3_BASE_ADDRESS + 0x8)
#define BP_DSPCTRL_M3_RELEASE_HOLD_PULSE_DATA                             0
#define BM_DSPCTRL_M3_RELEASE_HOLD_PULSE_DATA                    0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_m3_dma_srcrdy_12_u
{
  uint32_t V;
  struct reg_dspctrl_m3_dma_srcrdy_12_s
  {
    uint32_t READY               :1;
    uint32_t RSVD0               :31;
  }BF;
} reg_dspctrl_m3_dma_srcrdy_12_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_M3_DMA_SRCRDY_12           (*(volatile reg_dspctrl_m3_dma_srcrdy_12_t*)((DSPCTRL_M3_BASE_ADDRESS + 0x20)))
#define REG_DSPCTRL_M3_DMA_SRCRDY_12_ADDR      (DSPCTRL_M3_BASE_ADDRESS + 0x20)
#define BP_DSPCTRL_M3_DMA_SRCRDY_12_RSVD0                                 1
#define BM_DSPCTRL_M3_DMA_SRCRDY_12_RSVD0                        0xFFFFFFFE
#define BP_DSPCTRL_M3_DMA_SRCRDY_12_READY                                 0
#define BM_DSPCTRL_M3_DMA_SRCRDY_12_READY                        0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_m3_dma_srcrdy_13_u
{
  uint32_t V;
  struct reg_dspctrl_m3_dma_srcrdy_13_s
  {
    uint32_t READY               :1;
    uint32_t RSVD0               :31;
  }BF;
} reg_dspctrl_m3_dma_srcrdy_13_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_M3_DMA_SRCRDY_13           (*(volatile reg_dspctrl_m3_dma_srcrdy_13_t*)((DSPCTRL_M3_BASE_ADDRESS + 0x24)))
#define REG_DSPCTRL_M3_DMA_SRCRDY_13_ADDR      (DSPCTRL_M3_BASE_ADDRESS + 0x24)
#define BP_DSPCTRL_M3_DMA_SRCRDY_13_RSVD0                                 1
#define BM_DSPCTRL_M3_DMA_SRCRDY_13_RSVD0                        0xFFFFFFFE
#define BP_DSPCTRL_M3_DMA_SRCRDY_13_READY                                 0
#define BM_DSPCTRL_M3_DMA_SRCRDY_13_READY                        0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_m3_dma_srcrdy_14_u
{
  uint32_t V;
  struct reg_dspctrl_m3_dma_srcrdy_14_s
  {
    uint32_t READY               :1;
    uint32_t RSVD0               :31;
  }BF;
} reg_dspctrl_m3_dma_srcrdy_14_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_M3_DMA_SRCRDY_14           (*(volatile reg_dspctrl_m3_dma_srcrdy_14_t*)((DSPCTRL_M3_BASE_ADDRESS + 0x28)))
#define REG_DSPCTRL_M3_DMA_SRCRDY_14_ADDR      (DSPCTRL_M3_BASE_ADDRESS + 0x28)
#define BP_DSPCTRL_M3_DMA_SRCRDY_14_RSVD0                                 1
#define BM_DSPCTRL_M3_DMA_SRCRDY_14_RSVD0                        0xFFFFFFFE
#define BP_DSPCTRL_M3_DMA_SRCRDY_14_READY                                 0
#define BM_DSPCTRL_M3_DMA_SRCRDY_14_READY                        0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_m3_dma_srcrdy_15_u
{
  uint32_t V;
  struct reg_dspctrl_m3_dma_srcrdy_15_s
  {
    uint32_t READY               :1;
    uint32_t RSVD0               :31;
  }BF;
} reg_dspctrl_m3_dma_srcrdy_15_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_M3_DMA_SRCRDY_15           (*(volatile reg_dspctrl_m3_dma_srcrdy_15_t*)((DSPCTRL_M3_BASE_ADDRESS + 0x2C)))
#define REG_DSPCTRL_M3_DMA_SRCRDY_15_ADDR      (DSPCTRL_M3_BASE_ADDRESS + 0x2C)
#define BP_DSPCTRL_M3_DMA_SRCRDY_15_RSVD0                                 1
#define BM_DSPCTRL_M3_DMA_SRCRDY_15_RSVD0                        0xFFFFFFFE
#define BP_DSPCTRL_M3_DMA_SRCRDY_15_READY                                 0
#define BM_DSPCTRL_M3_DMA_SRCRDY_15_READY                        0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_m3_dma_dstrdy_12_u
{
  uint32_t V;
  struct reg_dspctrl_m3_dma_dstrdy_12_s
  {
    uint32_t READY               :1;
    uint32_t RSVD0               :31;
  }BF;
} reg_dspctrl_m3_dma_dstrdy_12_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_M3_DMA_DSTRDY_12           (*(volatile reg_dspctrl_m3_dma_dstrdy_12_t*)((DSPCTRL_M3_BASE_ADDRESS + 0x30)))
#define REG_DSPCTRL_M3_DMA_DSTRDY_12_ADDR      (DSPCTRL_M3_BASE_ADDRESS + 0x30)
#define BP_DSPCTRL_M3_DMA_DSTRDY_12_RSVD0                                 1
#define BM_DSPCTRL_M3_DMA_DSTRDY_12_RSVD0                        0xFFFFFFFE
#define BP_DSPCTRL_M3_DMA_DSTRDY_12_READY                                 0
#define BM_DSPCTRL_M3_DMA_DSTRDY_12_READY                        0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_m3_dma_dstrdy_13_u
{
  uint32_t V;
  struct reg_dspctrl_m3_dma_dstrdy_13_s
  {
    uint32_t READY               :1;
    uint32_t RSVD0               :31;
  }BF;
} reg_dspctrl_m3_dma_dstrdy_13_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_M3_DMA_DSTRDY_13           (*(volatile reg_dspctrl_m3_dma_dstrdy_13_t*)((DSPCTRL_M3_BASE_ADDRESS + 0x34)))
#define REG_DSPCTRL_M3_DMA_DSTRDY_13_ADDR      (DSPCTRL_M3_BASE_ADDRESS + 0x34)
#define BP_DSPCTRL_M3_DMA_DSTRDY_13_RSVD0                                 1
#define BM_DSPCTRL_M3_DMA_DSTRDY_13_RSVD0                        0xFFFFFFFE
#define BP_DSPCTRL_M3_DMA_DSTRDY_13_READY                                 0
#define BM_DSPCTRL_M3_DMA_DSTRDY_13_READY                        0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_m3_dma_dstrdy_14_u
{
  uint32_t V;
  struct reg_dspctrl_m3_dma_dstrdy_14_s
  {
    uint32_t READY               :1;
    uint32_t RSVD0               :31;
  }BF;
} reg_dspctrl_m3_dma_dstrdy_14_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_M3_DMA_DSTRDY_14           (*(volatile reg_dspctrl_m3_dma_dstrdy_14_t*)((DSPCTRL_M3_BASE_ADDRESS + 0x38)))
#define REG_DSPCTRL_M3_DMA_DSTRDY_14_ADDR      (DSPCTRL_M3_BASE_ADDRESS + 0x38)
#define BP_DSPCTRL_M3_DMA_DSTRDY_14_RSVD0                                 1
#define BM_DSPCTRL_M3_DMA_DSTRDY_14_RSVD0                        0xFFFFFFFE
#define BP_DSPCTRL_M3_DMA_DSTRDY_14_READY                                 0
#define BM_DSPCTRL_M3_DMA_DSTRDY_14_READY                        0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_m3_dma_dstrdy_15_u
{
  uint32_t V;
  struct reg_dspctrl_m3_dma_dstrdy_15_s
  {
    uint32_t READY               :1;
    uint32_t RSVD0               :31;
  }BF;
} reg_dspctrl_m3_dma_dstrdy_15_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_M3_DMA_DSTRDY_15           (*(volatile reg_dspctrl_m3_dma_dstrdy_15_t*)((DSPCTRL_M3_BASE_ADDRESS + 0x3C)))
#define REG_DSPCTRL_M3_DMA_DSTRDY_15_ADDR      (DSPCTRL_M3_BASE_ADDRESS + 0x3C)
#define BP_DSPCTRL_M3_DMA_DSTRDY_15_RSVD0                                 1
#define BM_DSPCTRL_M3_DMA_DSTRDY_15_RSVD0                        0xFFFFFFFE
#define BP_DSPCTRL_M3_DMA_DSTRDY_15_READY                                 0
#define BM_DSPCTRL_M3_DMA_DSTRDY_15_READY                        0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_m3_dsp_lockup_debug_u
{
  uint32_t V;
  struct reg_dspctrl_m3_dsp_lockup_debug_s
  {
    uint32_t PMEM_A_CF           :13;
    uint32_t IO_SLAVE_HOLD       :1;
    uint32_t CORE_HOLD_ACK       :1;
    uint32_t STOP_ACK_REG        :1;
    uint32_t IO_DATA_RDDATA_AHB_WINDOW_HOLD:1;
    uint32_t IO_I2S_HOLD         :1;
    uint32_t IO_DATA_RDDATA_I2C_HOLD:1;
    uint32_t IO_DATA_RDDATA_SPI_HOLD:1;
    uint32_t GARBAGE             :1;
    uint32_t PMEM_CS_CF          :1;
    uint32_t DMS_HOLD_EN         :1;
    uint32_t HALT_ACK            :1;
    uint32_t LOOP_OVERFLOW       :1;
    uint32_t BREAK_OUT           :1;
    uint32_t LOOP_EN             :1;
    uint32_t CORE_HOLD_DMATIMEOUT:1;
    uint32_t RSVD0               :4;
  }BF;
} reg_dspctrl_m3_dsp_lockup_debug_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_M3_DSP_LOCKUP_DEBUG           (*(volatile reg_dspctrl_m3_dsp_lockup_debug_t*)((DSPCTRL_M3_BASE_ADDRESS + 0x40)))
#define REG_DSPCTRL_M3_DSP_LOCKUP_DEBUG_ADDR      (DSPCTRL_M3_BASE_ADDRESS + 0x40)
#define BP_DSPCTRL_M3_DSP_LOCKUP_DEBUG_RSVD0                             28
#define BM_DSPCTRL_M3_DSP_LOCKUP_DEBUG_RSVD0                     0xF0000000
#define BP_DSPCTRL_M3_DSP_LOCKUP_DEBUG_CORE_HOLD_DMATIMEOUT              27
#define BM_DSPCTRL_M3_DSP_LOCKUP_DEBUG_CORE_HOLD_DMATIMEOUT      0x08000000
#define BP_DSPCTRL_M3_DSP_LOCKUP_DEBUG_LOOP_EN                           26
#define BM_DSPCTRL_M3_DSP_LOCKUP_DEBUG_LOOP_EN                   0x04000000
#define BP_DSPCTRL_M3_DSP_LOCKUP_DEBUG_BREAK_OUT                         25
#define BM_DSPCTRL_M3_DSP_LOCKUP_DEBUG_BREAK_OUT                 0x02000000
#define BP_DSPCTRL_M3_DSP_LOCKUP_DEBUG_LOOP_OVERFLOW                     24
#define BM_DSPCTRL_M3_DSP_LOCKUP_DEBUG_LOOP_OVERFLOW             0x01000000
#define BP_DSPCTRL_M3_DSP_LOCKUP_DEBUG_HALT_ACK                          23
#define BM_DSPCTRL_M3_DSP_LOCKUP_DEBUG_HALT_ACK                  0x00800000
#define BP_DSPCTRL_M3_DSP_LOCKUP_DEBUG_DMS_HOLD_EN                       22
#define BM_DSPCTRL_M3_DSP_LOCKUP_DEBUG_DMS_HOLD_EN               0x00400000
#define BP_DSPCTRL_M3_DSP_LOCKUP_DEBUG_PMEM_CS_CF                        21
#define BM_DSPCTRL_M3_DSP_LOCKUP_DEBUG_PMEM_CS_CF                0x00200000
#define BP_DSPCTRL_M3_DSP_LOCKUP_DEBUG_GARBAGE                           20
#define BM_DSPCTRL_M3_DSP_LOCKUP_DEBUG_GARBAGE                   0x00100000
#define BP_DSPCTRL_M3_DSP_LOCKUP_DEBUG_IO_DATA_RDDATA_SPI_HOLD           19
#define BM_DSPCTRL_M3_DSP_LOCKUP_DEBUG_IO_DATA_RDDATA_SPI_HOLD   0x00080000
#define BP_DSPCTRL_M3_DSP_LOCKUP_DEBUG_IO_DATA_RDDATA_I2C_HOLD           18
#define BM_DSPCTRL_M3_DSP_LOCKUP_DEBUG_IO_DATA_RDDATA_I2C_HOLD   0x00040000
#define BP_DSPCTRL_M3_DSP_LOCKUP_DEBUG_IO_I2S_HOLD                       17
#define BM_DSPCTRL_M3_DSP_LOCKUP_DEBUG_IO_I2S_HOLD               0x00020000
#define BP_DSPCTRL_M3_DSP_LOCKUP_DEBUG_IO_DATA_RDDATA_AHB_WINDOW_HOLD         16
#define BM_DSPCTRL_M3_DSP_LOCKUP_DEBUG_IO_DATA_RDDATA_AHB_WINDOW_HOLD 0x00010000
#define BP_DSPCTRL_M3_DSP_LOCKUP_DEBUG_STOP_ACK_REG                      15
#define BM_DSPCTRL_M3_DSP_LOCKUP_DEBUG_STOP_ACK_REG              0x00008000
#define BP_DSPCTRL_M3_DSP_LOCKUP_DEBUG_CORE_HOLD_ACK                     14
#define BM_DSPCTRL_M3_DSP_LOCKUP_DEBUG_CORE_HOLD_ACK             0x00004000
#define BP_DSPCTRL_M3_DSP_LOCKUP_DEBUG_IO_SLAVE_HOLD                     13
#define BM_DSPCTRL_M3_DSP_LOCKUP_DEBUG_IO_SLAVE_HOLD             0x00002000
#define BP_DSPCTRL_M3_DSP_LOCKUP_DEBUG_PMEM_A_CF                          0
#define BM_DSPCTRL_M3_DSP_LOCKUP_DEBUG_PMEM_A_CF                 0x00001FFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_m3_dsp_stack_debug1_u
{
  uint32_t V;
  struct reg_dspctrl_m3_dsp_stack_debug1_s
  {
    uint32_t MAX_STACK_ADDR      :15;
    uint32_t RSVD0               :17;
  }BF;
} reg_dspctrl_m3_dsp_stack_debug1_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_M3_DSP_STACK_DEBUG1           (*(volatile reg_dspctrl_m3_dsp_stack_debug1_t*)((DSPCTRL_M3_BASE_ADDRESS + 0x44)))
#define REG_DSPCTRL_M3_DSP_STACK_DEBUG1_ADDR      (DSPCTRL_M3_BASE_ADDRESS + 0x44)
#define BP_DSPCTRL_M3_DSP_STACK_DEBUG1_RSVD0                             15
#define BM_DSPCTRL_M3_DSP_STACK_DEBUG1_RSVD0                     0xFFFF8000
#define BP_DSPCTRL_M3_DSP_STACK_DEBUG1_MAX_STACK_ADDR                     0
#define BM_DSPCTRL_M3_DSP_STACK_DEBUG1_MAX_STACK_ADDR            0x00007FFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_m3_dsp_hold_debug0_u
{
  uint32_t V;
  struct reg_dspctrl_m3_dsp_hold_debug0_s
  {
    uint32_t HOLD_COUNT          :8;
    uint32_t RSVD0               :7;
    uint32_t RESET               :1;
    uint32_t RSVD1               :16;
  }BF;
} reg_dspctrl_m3_dsp_hold_debug0_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_M3_DSP_HOLD_DEBUG0           (*(volatile reg_dspctrl_m3_dsp_hold_debug0_t*)((DSPCTRL_M3_BASE_ADDRESS + 0x48)))
#define REG_DSPCTRL_M3_DSP_HOLD_DEBUG0_ADDR      (DSPCTRL_M3_BASE_ADDRESS + 0x48)
#define BP_DSPCTRL_M3_DSP_HOLD_DEBUG0_RSVD0                              16
#define BM_DSPCTRL_M3_DSP_HOLD_DEBUG0_RSVD0                      0xFFFF0000
#define BP_DSPCTRL_M3_DSP_HOLD_DEBUG0_RESET                              15
#define BM_DSPCTRL_M3_DSP_HOLD_DEBUG0_RESET                      0x00008000
#define BP_DSPCTRL_M3_DSP_HOLD_DEBUG0_RSVD1                               8
#define BM_DSPCTRL_M3_DSP_HOLD_DEBUG0_RSVD1                      0x00007F00
#define BP_DSPCTRL_M3_DSP_HOLD_DEBUG0_HOLD_COUNT                          0
#define BM_DSPCTRL_M3_DSP_HOLD_DEBUG0_HOLD_COUNT                 0x000000FF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_m3_readonly_dsp_config_status_u
{
  uint32_t V;
  struct reg_dspctrl_m3_readonly_dsp_config_status_s
  {
    uint32_t HALFWORD_ENDIAN     :1;
    uint32_t DONT_WAIT           :1;
    uint32_t CACHE_DISABLE       :1;
    uint32_t START_HALFWORD      :1;
    uint32_t RSVD0               :1;
    uint32_t DMA_BYTE_ACC_DISABLE:1;
    uint32_t MODULO_FIX_DISABLE  :1;
    uint32_t ANY_WR_INV_CACHE    :1;
    uint32_t DSP_I2C_CLK_ON      :1;
    uint32_t DSP_SPI_CLK_ON      :1;
    uint32_t RSVD1               :2;
    uint32_t NESTED_LOOP_OFLOW   :1;
    uint32_t WARN_DSP2AHB_OOO    :1;
    uint32_t WARN_BAD_AHB_RESP   :1;
    uint32_t IO_CMD_IN_PROG      :1;
    uint32_t RSVD2               :16;
  }BF;
} reg_dspctrl_m3_readonly_dsp_config_status_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS           (*(volatile reg_dspctrl_m3_readonly_dsp_config_status_t*)((DSPCTRL_M3_BASE_ADDRESS + 0x4C)))
#define REG_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_ADDR      (DSPCTRL_M3_BASE_ADDRESS + 0x4C)
#define BP_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_RSVD0                   16
#define BM_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_RSVD0           0xFFFF0000
#define BP_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_IO_CMD_IN_PROG          15
#define BM_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_IO_CMD_IN_PROG  0x00008000
#define BP_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_WARN_BAD_AHB_RESP         14
#define BM_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_WARN_BAD_AHB_RESP 0x00004000
#define BP_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_WARN_DSP2AHB_OOO         13
#define BM_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_WARN_DSP2AHB_OOO 0x00002000
#define BP_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_NESTED_LOOP_OFLOW         12
#define BM_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_NESTED_LOOP_OFLOW 0x00001000
#define BP_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_RSVD1                   10
#define BM_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_RSVD1           0x00000C00
#define BP_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_DSP_SPI_CLK_ON           9
#define BM_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_DSP_SPI_CLK_ON  0x00000200
#define BP_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_DSP_I2C_CLK_ON           8
#define BM_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_DSP_I2C_CLK_ON  0x00000100
#define BP_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_ANY_WR_INV_CACHE          7
#define BM_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_ANY_WR_INV_CACHE 0x00000080
#define BP_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_MODULO_FIX_DISABLE          6
#define BM_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_MODULO_FIX_DISABLE 0x00000040
#define BP_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_DMA_BYTE_ACC_DISABLE          5
#define BM_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_DMA_BYTE_ACC_DISABLE 0x00000020
#define BP_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_RSVD2                    4
#define BM_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_RSVD2           0x00000010
#define BP_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_START_HALFWORD           3
#define BM_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_START_HALFWORD  0x00000008
#define BP_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_CACHE_DISABLE            2
#define BM_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_CACHE_DISABLE   0x00000004
#define BP_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_DONT_WAIT                1
#define BM_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_DONT_WAIT       0x00000002
#define BP_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_HALFWORD_ENDIAN          0
#define BM_DSPCTRL_M3_READONLY_DSP_CONFIG_STATUS_HALFWORD_ENDIAN 0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_m3_semaphore0_u
{
  uint32_t V;
  struct reg_dspctrl_m3_semaphore0_s
  {
    uint32_t SEMAPHORE           :1;
    uint32_t RSVD0               :31;
  }BF;
} reg_dspctrl_m3_semaphore0_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_M3_SEMAPHORE0           (*(volatile reg_dspctrl_m3_semaphore0_t*)((DSPCTRL_M3_BASE_ADDRESS + 0x21030)))
#define REG_DSPCTRL_M3_SEMAPHORE0_ADDR      (DSPCTRL_M3_BASE_ADDRESS + 0x21030)
#define BP_DSPCTRL_M3_SEMAPHORE0_RSVD0                                    1
#define BM_DSPCTRL_M3_SEMAPHORE0_RSVD0                           0xFFFFFFFE
#define BP_DSPCTRL_M3_SEMAPHORE0_SEMAPHORE                                0
#define BM_DSPCTRL_M3_SEMAPHORE0_SEMAPHORE                       0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_m3_semaphore1_u
{
  uint32_t V;
  struct reg_dspctrl_m3_semaphore1_s
  {
    uint32_t SEMAPHORE           :1;
    uint32_t RSVD0               :31;
  }BF;
} reg_dspctrl_m3_semaphore1_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_M3_SEMAPHORE1           (*(volatile reg_dspctrl_m3_semaphore1_t*)((DSPCTRL_M3_BASE_ADDRESS + 0x21034)))
#define REG_DSPCTRL_M3_SEMAPHORE1_ADDR      (DSPCTRL_M3_BASE_ADDRESS + 0x21034)
#define BP_DSPCTRL_M3_SEMAPHORE1_RSVD0                                    1
#define BM_DSPCTRL_M3_SEMAPHORE1_RSVD0                           0xFFFFFFFE
#define BP_DSPCTRL_M3_SEMAPHORE1_SEMAPHORE                                0
#define BM_DSPCTRL_M3_SEMAPHORE1_SEMAPHORE                       0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_m3_semaphore2_u
{
  uint32_t V;
  struct reg_dspctrl_m3_semaphore2_s
  {
    uint32_t SEMAPHORE           :1;
    uint32_t RSVD0               :31;
  }BF;
} reg_dspctrl_m3_semaphore2_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_M3_SEMAPHORE2           (*(volatile reg_dspctrl_m3_semaphore2_t*)((DSPCTRL_M3_BASE_ADDRESS + 0x21038)))
#define REG_DSPCTRL_M3_SEMAPHORE2_ADDR      (DSPCTRL_M3_BASE_ADDRESS + 0x21038)
#define BP_DSPCTRL_M3_SEMAPHORE2_RSVD0                                    1
#define BM_DSPCTRL_M3_SEMAPHORE2_RSVD0                           0xFFFFFFFE
#define BP_DSPCTRL_M3_SEMAPHORE2_SEMAPHORE                                0
#define BM_DSPCTRL_M3_SEMAPHORE2_SEMAPHORE                       0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_dspctrl_m3_semaphore3_u
{
  uint32_t V;
  struct reg_dspctrl_m3_semaphore3_s
  {
    uint32_t SEMAPHORE           :1;
    uint32_t RSVD0               :31;
  }BF;
} reg_dspctrl_m3_semaphore3_t;

#endif  // __LANGUAGE_ASM__

#define REG_DSPCTRL_M3_SEMAPHORE3           (*(volatile reg_dspctrl_m3_semaphore3_t*)((DSPCTRL_M3_BASE_ADDRESS + 0x2103C)))
#define REG_DSPCTRL_M3_SEMAPHORE3_ADDR      (DSPCTRL_M3_BASE_ADDRESS + 0x2103C)
#define BP_DSPCTRL_M3_SEMAPHORE3_RSVD0                                    1
#define BM_DSPCTRL_M3_SEMAPHORE3_RSVD0                           0xFFFFFFFE
#define BP_DSPCTRL_M3_SEMAPHORE3_SEMAPHORE                                0
#define BM_DSPCTRL_M3_SEMAPHORE3_SEMAPHORE                       0x00000001

#define MBOX_M3_BASE_ADDRESS 0x40800100


//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_mbox_m3_m32dsp_lower_u
{
  uint32_t V;
  struct reg_mbox_m3_m32dsp_lower_s
  {
    uint32_t DATA                :16;
    uint32_t ODD                 :16;
  }BF;
} reg_mbox_m3_m32dsp_lower_t;

#endif  // __LANGUAGE_ASM__

#define REG_MBOX_M3_M32DSP_LOWER           (*(volatile reg_mbox_m3_m32dsp_lower_t*)((MBOX_M3_BASE_ADDRESS + 0x0)))
#define REG_MBOX_M3_M32DSP_LOWER_ADDR      (MBOX_M3_BASE_ADDRESS + 0x0)
#define BP_MBOX_M3_M32DSP_LOWER_ODD                                      16
#define BM_MBOX_M3_M32DSP_LOWER_ODD                              0xFFFF0000
#define BP_MBOX_M3_M32DSP_LOWER_DATA                                      0
#define BM_MBOX_M3_M32DSP_LOWER_DATA                             0x0000FFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_mbox_m3_m32dsp_status_u
{
  uint32_t V;
  struct reg_mbox_m3_m32dsp_status_s
  {
    uint32_t BUSY                :1;
    uint32_t RSVD0               :31;
  }BF;
} reg_mbox_m3_m32dsp_status_t;

#endif  // __LANGUAGE_ASM__

#define REG_MBOX_M3_M32DSP_STATUS           (*(volatile reg_mbox_m3_m32dsp_status_t*)((MBOX_M3_BASE_ADDRESS + 0x4)))
#define REG_MBOX_M3_M32DSP_STATUS_ADDR      (MBOX_M3_BASE_ADDRESS + 0x4)
#define BP_MBOX_M3_M32DSP_STATUS_RSVD0                                    1
#define BM_MBOX_M3_M32DSP_STATUS_RSVD0                           0xFFFFFFFE
#define BP_MBOX_M3_M32DSP_STATUS_BUSY                                     0
#define BM_MBOX_M3_M32DSP_STATUS_BUSY                            0x00000001

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_mbox_m3_dsp2m3_mbox_lower_u
{
  uint32_t V;
  struct reg_mbox_m3_dsp2m3_mbox_lower_s
  {
    uint32_t DATA                :16;
    uint32_t ODD                 :16;
  }BF;
} reg_mbox_m3_dsp2m3_mbox_lower_t;

#endif  // __LANGUAGE_ASM__

#define REG_MBOX_M3_DSP2M3_MBOX_LOWER           (*(volatile reg_mbox_m3_dsp2m3_mbox_lower_t*)((MBOX_M3_BASE_ADDRESS + 0x8)))
#define REG_MBOX_M3_DSP2M3_MBOX_LOWER_ADDR      (MBOX_M3_BASE_ADDRESS + 0x8)
#define BP_MBOX_M3_DSP2M3_MBOX_LOWER_ODD                                 16
#define BM_MBOX_M3_DSP2M3_MBOX_LOWER_ODD                         0xFFFF0000
#define BP_MBOX_M3_DSP2M3_MBOX_LOWER_DATA                                 0
#define BM_MBOX_M3_DSP2M3_MBOX_LOWER_DATA                        0x0000FFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_mbox_m3_m32dsp_extend_u
{
  uint32_t V;
  struct reg_mbox_m3_m32dsp_extend_s
  {
    uint32_t DATA                :32;
  }BF;
} reg_mbox_m3_m32dsp_extend_t;

#endif  // __LANGUAGE_ASM__

#define REG_MBOX_M3_M32DSP_EXTEND           (*(volatile reg_mbox_m3_m32dsp_extend_t*)((MBOX_M3_BASE_ADDRESS + 0xC)))
#define REG_MBOX_M3_M32DSP_EXTEND_ADDR      (MBOX_M3_BASE_ADDRESS + 0xC)
#define BP_MBOX_M3_M32DSP_EXTEND_DATA                                     0
#define BM_MBOX_M3_M32DSP_EXTEND_DATA                            0xFFFFFFFF

//------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__

typedef union reg_mbox_m3_dsp2m3_mbox_extend_u
{
  uint32_t V;
  struct reg_mbox_m3_dsp2m3_mbox_extend_s
  {
    uint32_t DATA                :32;
  }BF;
} reg_mbox_m3_dsp2m3_mbox_extend_t;

#endif  // __LANGUAGE_ASM__

#define REG_MBOX_M3_DSP2M3_MBOX_EXTEND           (*(volatile reg_mbox_m3_dsp2m3_mbox_extend_t*)((MBOX_M3_BASE_ADDRESS + 0x10)))
#define REG_MBOX_M3_DSP2M3_MBOX_EXTEND_ADDR      (MBOX_M3_BASE_ADDRESS + 0x10)
#define BP_MBOX_M3_DSP2M3_MBOX_EXTEND_DATA                                0
#define BM_MBOX_M3_DSP2M3_MBOX_EXTEND_DATA                       0xFFFFFFFF


//-----------------------------------------------------------------------------

#ifdef __cplusplus
}
#endif

#endif //__REG_ETA_ECM3532_M3_H__


